
MICROSD_writeFIle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef20  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  0800f104  0800f104  00010104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fab0  0800fab0  000111cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fab0  0800fab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fab8  0800fab8  000111cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fab8  0800fab8  00010ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fabc  0800fabc  00010abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800fac0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016f8  200001cc  0800fc8c  000111cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018c4  0800fc8c  000118c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c10  00000000  00000000  000111f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e5a  00000000  00000000  00024e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00028c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  00029e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc50  00000000  00000000  0002ab0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001994c  00000000  00000000  0004875e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a005  00000000  00000000  000620aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc0af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba0  00000000  00000000  000fc0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00100c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	0800f0ec 	.word	0x0800f0ec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	0800f0ec 	.word	0x0800f0ec

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_dmul>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800023a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000242:	bf1d      	ittte	ne
 8000244:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000248:	ea94 0f0c 	teqne	r4, ip
 800024c:	ea95 0f0c 	teqne	r5, ip
 8000250:	f000 f8de 	bleq	8000410 <__aeabi_dmul+0x1dc>
 8000254:	442c      	add	r4, r5
 8000256:	ea81 0603 	eor.w	r6, r1, r3
 800025a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000262:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000266:	bf18      	it	ne
 8000268:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800026c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000274:	d038      	beq.n	80002e8 <__aeabi_dmul+0xb4>
 8000276:	fba0 ce02 	umull	ip, lr, r0, r2
 800027a:	f04f 0500 	mov.w	r5, #0
 800027e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000282:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000286:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028a:	f04f 0600 	mov.w	r6, #0
 800028e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000292:	f09c 0f00 	teq	ip, #0
 8000296:	bf18      	it	ne
 8000298:	f04e 0e01 	orrne.w	lr, lr, #1
 800029c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002a0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a8:	d204      	bcs.n	80002b4 <__aeabi_dmul+0x80>
 80002aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ae:	416d      	adcs	r5, r5
 80002b0:	eb46 0606 	adc.w	r6, r6, r6
 80002b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002cc:	bf88      	it	hi
 80002ce:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002d2:	d81e      	bhi.n	8000312 <__aeabi_dmul+0xde>
 80002d4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d8:	bf08      	it	eq
 80002da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002de:	f150 0000 	adcs.w	r0, r0, #0
 80002e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002ec:	ea46 0101 	orr.w	r1, r6, r1
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	ea81 0103 	eor.w	r1, r1, r3
 80002f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002fc:	bfc2      	ittt	gt
 80002fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000302:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000306:	bd70      	popgt	{r4, r5, r6, pc}
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800030c:	f04f 0e00 	mov.w	lr, #0
 8000310:	3c01      	subs	r4, #1
 8000312:	f300 80ab 	bgt.w	800046c <__aeabi_dmul+0x238>
 8000316:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800031a:	bfde      	ittt	le
 800031c:	2000      	movle	r0, #0
 800031e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000322:	bd70      	pople	{r4, r5, r6, pc}
 8000324:	f1c4 0400 	rsb	r4, r4, #0
 8000328:	3c20      	subs	r4, #32
 800032a:	da35      	bge.n	8000398 <__aeabi_dmul+0x164>
 800032c:	340c      	adds	r4, #12
 800032e:	dc1b      	bgt.n	8000368 <__aeabi_dmul+0x134>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f305 	lsl.w	r3, r0, r5
 800033c:	fa20 f004 	lsr.w	r0, r0, r4
 8000340:	fa01 f205 	lsl.w	r2, r1, r5
 8000344:	ea40 0002 	orr.w	r0, r0, r2
 8000348:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800034c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	fa21 f604 	lsr.w	r6, r1, r4
 8000358:	eb42 0106 	adc.w	r1, r2, r6
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f1c4 040c 	rsb	r4, r4, #12
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f304 	lsl.w	r3, r0, r4
 8000374:	fa20 f005 	lsr.w	r0, r0, r5
 8000378:	fa01 f204 	lsl.w	r2, r1, r4
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000390:	bf08      	it	eq
 8000392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f1c4 0520 	rsb	r5, r4, #32
 800039c:	fa00 f205 	lsl.w	r2, r0, r5
 80003a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a4:	fa20 f304 	lsr.w	r3, r0, r4
 80003a8:	fa01 f205 	lsl.w	r2, r1, r5
 80003ac:	ea43 0302 	orr.w	r3, r3, r2
 80003b0:	fa21 f004 	lsr.w	r0, r1, r4
 80003b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	fa21 f204 	lsr.w	r2, r1, r4
 80003bc:	ea20 0002 	bic.w	r0, r0, r2
 80003c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c8:	bf08      	it	eq
 80003ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f094 0f00 	teq	r4, #0
 80003d4:	d10f      	bne.n	80003f6 <__aeabi_dmul+0x1c2>
 80003d6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003da:	0040      	lsls	r0, r0, #1
 80003dc:	eb41 0101 	adc.w	r1, r1, r1
 80003e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e4:	bf08      	it	eq
 80003e6:	3c01      	subeq	r4, #1
 80003e8:	d0f7      	beq.n	80003da <__aeabi_dmul+0x1a6>
 80003ea:	ea41 0106 	orr.w	r1, r1, r6
 80003ee:	f095 0f00 	teq	r5, #0
 80003f2:	bf18      	it	ne
 80003f4:	4770      	bxne	lr
 80003f6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003fa:	0052      	lsls	r2, r2, #1
 80003fc:	eb43 0303 	adc.w	r3, r3, r3
 8000400:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000404:	bf08      	it	eq
 8000406:	3d01      	subeq	r5, #1
 8000408:	d0f7      	beq.n	80003fa <__aeabi_dmul+0x1c6>
 800040a:	ea43 0306 	orr.w	r3, r3, r6
 800040e:	4770      	bx	lr
 8000410:	ea94 0f0c 	teq	r4, ip
 8000414:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000418:	bf18      	it	ne
 800041a:	ea95 0f0c 	teqne	r5, ip
 800041e:	d00c      	beq.n	800043a <__aeabi_dmul+0x206>
 8000420:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000424:	bf18      	it	ne
 8000426:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042a:	d1d1      	bne.n	80003d0 <__aeabi_dmul+0x19c>
 800042c:	ea81 0103 	eor.w	r1, r1, r3
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043e:	bf06      	itte	eq
 8000440:	4610      	moveq	r0, r2
 8000442:	4619      	moveq	r1, r3
 8000444:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000448:	d019      	beq.n	800047e <__aeabi_dmul+0x24a>
 800044a:	ea94 0f0c 	teq	r4, ip
 800044e:	d102      	bne.n	8000456 <__aeabi_dmul+0x222>
 8000450:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000454:	d113      	bne.n	800047e <__aeabi_dmul+0x24a>
 8000456:	ea95 0f0c 	teq	r5, ip
 800045a:	d105      	bne.n	8000468 <__aeabi_dmul+0x234>
 800045c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000460:	bf1c      	itt	ne
 8000462:	4610      	movne	r0, r2
 8000464:	4619      	movne	r1, r3
 8000466:	d10a      	bne.n	800047e <__aeabi_dmul+0x24a>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd70      	pop	{r4, r5, r6, pc}
 800047e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000482:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000486:	bd70      	pop	{r4, r5, r6, pc}

08000488 <__aeabi_drsub>:
 8000488:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800048c:	e002      	b.n	8000494 <__adddf3>
 800048e:	bf00      	nop

08000490 <__aeabi_dsub>:
 8000490:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000494 <__adddf3>:
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800049a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	bf1f      	itttt	ne
 80004aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ba:	f000 80e2 	beq.w	8000682 <__adddf3+0x1ee>
 80004be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c6:	bfb8      	it	lt
 80004c8:	426d      	neglt	r5, r5
 80004ca:	dd0c      	ble.n	80004e6 <__adddf3+0x52>
 80004cc:	442c      	add	r4, r5
 80004ce:	ea80 0202 	eor.w	r2, r0, r2
 80004d2:	ea81 0303 	eor.w	r3, r1, r3
 80004d6:	ea82 0000 	eor.w	r0, r2, r0
 80004da:	ea83 0101 	eor.w	r1, r3, r1
 80004de:	ea80 0202 	eor.w	r2, r0, r2
 80004e2:	ea81 0303 	eor.w	r3, r1, r3
 80004e6:	2d36      	cmp	r5, #54	@ 0x36
 80004e8:	bf88      	it	hi
 80004ea:	bd30      	pophi	{r4, r5, pc}
 80004ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004fc:	d002      	beq.n	8000504 <__adddf3+0x70>
 80004fe:	4240      	negs	r0, r0
 8000500:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000504:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000508:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800050c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000510:	d002      	beq.n	8000518 <__adddf3+0x84>
 8000512:	4252      	negs	r2, r2
 8000514:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000518:	ea94 0f05 	teq	r4, r5
 800051c:	f000 80a7 	beq.w	800066e <__adddf3+0x1da>
 8000520:	f1a4 0401 	sub.w	r4, r4, #1
 8000524:	f1d5 0e20 	rsbs	lr, r5, #32
 8000528:	db0d      	blt.n	8000546 <__adddf3+0xb2>
 800052a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052e:	fa22 f205 	lsr.w	r2, r2, r5
 8000532:	1880      	adds	r0, r0, r2
 8000534:	f141 0100 	adc.w	r1, r1, #0
 8000538:	fa03 f20e 	lsl.w	r2, r3, lr
 800053c:	1880      	adds	r0, r0, r2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	4159      	adcs	r1, r3
 8000544:	e00e      	b.n	8000564 <__adddf3+0xd0>
 8000546:	f1a5 0520 	sub.w	r5, r5, #32
 800054a:	f10e 0e20 	add.w	lr, lr, #32
 800054e:	2a01      	cmp	r2, #1
 8000550:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000554:	bf28      	it	cs
 8000556:	f04c 0c02 	orrcs.w	ip, ip, #2
 800055a:	fa43 f305 	asr.w	r3, r3, r5
 800055e:	18c0      	adds	r0, r0, r3
 8000560:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000568:	d507      	bpl.n	800057a <__adddf3+0xe6>
 800056a:	f04f 0e00 	mov.w	lr, #0
 800056e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000572:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000576:	eb6e 0101 	sbc.w	r1, lr, r1
 800057a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057e:	d31b      	bcc.n	80005b8 <__adddf3+0x124>
 8000580:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000584:	d30c      	bcc.n	80005a0 <__adddf3+0x10c>
 8000586:	0849      	lsrs	r1, r1, #1
 8000588:	ea5f 0030 	movs.w	r0, r0, rrx
 800058c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000590:	f104 0401 	add.w	r4, r4, #1
 8000594:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000598:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800059c:	f080 809a 	bcs.w	80006d4 <__adddf3+0x240>
 80005a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	ea41 0105 	orr.w	r1, r1, r5
 80005b6:	bd30      	pop	{r4, r5, pc}
 80005b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005bc:	4140      	adcs	r0, r0
 80005be:	eb41 0101 	adc.w	r1, r1, r1
 80005c2:	3c01      	subs	r4, #1
 80005c4:	bf28      	it	cs
 80005c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ca:	d2e9      	bcs.n	80005a0 <__adddf3+0x10c>
 80005cc:	f091 0f00 	teq	r1, #0
 80005d0:	bf04      	itt	eq
 80005d2:	4601      	moveq	r1, r0
 80005d4:	2000      	moveq	r0, #0
 80005d6:	fab1 f381 	clz	r3, r1
 80005da:	bf08      	it	eq
 80005dc:	3320      	addeq	r3, #32
 80005de:	f1a3 030b 	sub.w	r3, r3, #11
 80005e2:	f1b3 0220 	subs.w	r2, r3, #32
 80005e6:	da0c      	bge.n	8000602 <__adddf3+0x16e>
 80005e8:	320c      	adds	r2, #12
 80005ea:	dd08      	ble.n	80005fe <__adddf3+0x16a>
 80005ec:	f102 0c14 	add.w	ip, r2, #20
 80005f0:	f1c2 020c 	rsb	r2, r2, #12
 80005f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f8:	fa21 f102 	lsr.w	r1, r1, r2
 80005fc:	e00c      	b.n	8000618 <__adddf3+0x184>
 80005fe:	f102 0214 	add.w	r2, r2, #20
 8000602:	bfd8      	it	le
 8000604:	f1c2 0c20 	rsble	ip, r2, #32
 8000608:	fa01 f102 	lsl.w	r1, r1, r2
 800060c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000610:	bfdc      	itt	le
 8000612:	ea41 010c 	orrle.w	r1, r1, ip
 8000616:	4090      	lslle	r0, r2
 8000618:	1ae4      	subs	r4, r4, r3
 800061a:	bfa2      	ittt	ge
 800061c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000620:	4329      	orrge	r1, r5
 8000622:	bd30      	popge	{r4, r5, pc}
 8000624:	ea6f 0404 	mvn.w	r4, r4
 8000628:	3c1f      	subs	r4, #31
 800062a:	da1c      	bge.n	8000666 <__adddf3+0x1d2>
 800062c:	340c      	adds	r4, #12
 800062e:	dc0e      	bgt.n	800064e <__adddf3+0x1ba>
 8000630:	f104 0414 	add.w	r4, r4, #20
 8000634:	f1c4 0220 	rsb	r2, r4, #32
 8000638:	fa20 f004 	lsr.w	r0, r0, r4
 800063c:	fa01 f302 	lsl.w	r3, r1, r2
 8000640:	ea40 0003 	orr.w	r0, r0, r3
 8000644:	fa21 f304 	lsr.w	r3, r1, r4
 8000648:	ea45 0103 	orr.w	r1, r5, r3
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	f1c4 040c 	rsb	r4, r4, #12
 8000652:	f1c4 0220 	rsb	r2, r4, #32
 8000656:	fa20 f002 	lsr.w	r0, r0, r2
 800065a:	fa01 f304 	lsl.w	r3, r1, r4
 800065e:	ea40 0003 	orr.w	r0, r0, r3
 8000662:	4629      	mov	r1, r5
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	fa21 f004 	lsr.w	r0, r1, r4
 800066a:	4629      	mov	r1, r5
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	f094 0f00 	teq	r4, #0
 8000672:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000676:	bf06      	itte	eq
 8000678:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800067c:	3401      	addeq	r4, #1
 800067e:	3d01      	subne	r5, #1
 8000680:	e74e      	b.n	8000520 <__adddf3+0x8c>
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf18      	it	ne
 8000688:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800068c:	d029      	beq.n	80006e2 <__adddf3+0x24e>
 800068e:	ea94 0f05 	teq	r4, r5
 8000692:	bf08      	it	eq
 8000694:	ea90 0f02 	teqeq	r0, r2
 8000698:	d005      	beq.n	80006a6 <__adddf3+0x212>
 800069a:	ea54 0c00 	orrs.w	ip, r4, r0
 800069e:	bf04      	itt	eq
 80006a0:	4619      	moveq	r1, r3
 80006a2:	4610      	moveq	r0, r2
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	ea91 0f03 	teq	r1, r3
 80006aa:	bf1e      	ittt	ne
 80006ac:	2100      	movne	r1, #0
 80006ae:	2000      	movne	r0, #0
 80006b0:	bd30      	popne	{r4, r5, pc}
 80006b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b6:	d105      	bne.n	80006c4 <__adddf3+0x230>
 80006b8:	0040      	lsls	r0, r0, #1
 80006ba:	4149      	adcs	r1, r1
 80006bc:	bf28      	it	cs
 80006be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006c2:	bd30      	pop	{r4, r5, pc}
 80006c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c8:	bf3c      	itt	cc
 80006ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ce:	bd30      	popcc	{r4, r5, pc}
 80006d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e6:	bf1a      	itte	ne
 80006e8:	4619      	movne	r1, r3
 80006ea:	4610      	movne	r0, r2
 80006ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006f0:	bf1c      	itt	ne
 80006f2:	460b      	movne	r3, r1
 80006f4:	4602      	movne	r2, r0
 80006f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006fa:	bf06      	itte	eq
 80006fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000700:	ea91 0f03 	teqeq	r1, r3
 8000704:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	bf00      	nop

0800070c <__aeabi_ui2d>:
 800070c:	f090 0f00 	teq	r0, #0
 8000710:	bf04      	itt	eq
 8000712:	2100      	moveq	r1, #0
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800071c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000720:	f04f 0500 	mov.w	r5, #0
 8000724:	f04f 0100 	mov.w	r1, #0
 8000728:	e750      	b.n	80005cc <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_i2d>:
 800072c:	f090 0f00 	teq	r0, #0
 8000730:	bf04      	itt	eq
 8000732:	2100      	moveq	r1, #0
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800073c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000740:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000744:	bf48      	it	mi
 8000746:	4240      	negmi	r0, r0
 8000748:	f04f 0100 	mov.w	r1, #0
 800074c:	e73e      	b.n	80005cc <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_f2d>:
 8000750:	0042      	lsls	r2, r0, #1
 8000752:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000756:	ea4f 0131 	mov.w	r1, r1, rrx
 800075a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075e:	bf1f      	itttt	ne
 8000760:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000764:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000768:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800076c:	4770      	bxne	lr
 800076e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000772:	bf08      	it	eq
 8000774:	4770      	bxeq	lr
 8000776:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800077a:	bf04      	itt	eq
 800077c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000788:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800078c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	e71c      	b.n	80005cc <__adddf3+0x138>
 8000792:	bf00      	nop

08000794 <__aeabi_ul2d>:
 8000794:	ea50 0201 	orrs.w	r2, r0, r1
 8000798:	bf08      	it	eq
 800079a:	4770      	bxeq	lr
 800079c:	b530      	push	{r4, r5, lr}
 800079e:	f04f 0500 	mov.w	r5, #0
 80007a2:	e00a      	b.n	80007ba <__aeabi_l2d+0x16>

080007a4 <__aeabi_l2d>:
 80007a4:	ea50 0201 	orrs.w	r2, r0, r1
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	b530      	push	{r4, r5, lr}
 80007ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007b2:	d502      	bpl.n	80007ba <__aeabi_l2d+0x16>
 80007b4:	4240      	negs	r0, r0
 80007b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c6:	f43f aed8 	beq.w	800057a <__adddf3+0xe6>
 80007ca:	f04f 0203 	mov.w	r2, #3
 80007ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d2:	bf18      	it	ne
 80007d4:	3203      	addne	r2, #3
 80007d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007da:	bf18      	it	ne
 80007dc:	3203      	addne	r2, #3
 80007de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80007f2:	ea40 000e 	orr.w	r0, r0, lr
 80007f6:	fa21 f102 	lsr.w	r1, r1, r2
 80007fa:	4414      	add	r4, r2
 80007fc:	e6bd      	b.n	800057a <__adddf3+0xe6>
 80007fe:	bf00      	nop

08000800 <__aeabi_d2uiz>:
 8000800:	004a      	lsls	r2, r1, #1
 8000802:	d211      	bcs.n	8000828 <__aeabi_d2uiz+0x28>
 8000804:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000808:	d211      	bcs.n	800082e <__aeabi_d2uiz+0x2e>
 800080a:	d50d      	bpl.n	8000828 <__aeabi_d2uiz+0x28>
 800080c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000810:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000814:	d40e      	bmi.n	8000834 <__aeabi_d2uiz+0x34>
 8000816:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800081e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000822:	fa23 f002 	lsr.w	r0, r3, r2
 8000826:	4770      	bx	lr
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	4770      	bx	lr
 800082e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000832:	d102      	bne.n	800083a <__aeabi_d2uiz+0x3a>
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr

08000840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_GPIO_Init+0x58>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a13      	ldr	r2, [pc, #76]	@ (8000898 <MX_GPIO_Init+0x58>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_GPIO_Init+0x58>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_GPIO_Init+0x58>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <MX_GPIO_Init+0x58>)
 8000864:	f043 0320 	orr.w	r3, r3, #32
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_GPIO_Init+0x58>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_GPIO_Init+0x58>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <MX_GPIO_Init+0x58>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <MX_GPIO_Init+0x58>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <USB_CDC_Print>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
static void USB_CDC_Print(char* TxStr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    while(CDC_Transmit_FS((uint8_t*)TxStr, strlen(TxStr)) == USBD_BUSY);
 80008a4:	bf00      	nop
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff fcbc 	bl	8000224 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f00d fb8c 	bl	800dfd0 <CDC_Transmit_FS>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d0f3      	beq.n	80008a6 <USB_CDC_Print+0xa>
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <SDIO_SDCard_Test>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void SDIO_SDCard_Test(void)
{
 80008c8:	b5b0      	push	{r4, r5, r7, lr}
 80008ca:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 80008ce:	af00      	add	r7, sp, #0
  uint32_t TotalSize, FreeSpace;
  char RW_Buffer[200];
  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, SDPath, 1);
 80008d0:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80008d4:	3b1c      	subs	r3, #28
 80008d6:	2201      	movs	r2, #1
 80008d8:	49b0      	ldr	r1, [pc, #704]	@ (8000b9c <SDIO_SDCard_Test+0x2d4>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f00b fc12 	bl	800c104 <f_mount>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 80008e6:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 80008ea:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 80008ec:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80008f0:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00d      	beq.n	8000916 <SDIO_SDCard_Test+0x4e>
    {
      sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 80008fa:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80008fe:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	49a6      	ldr	r1, [pc, #664]	@ (8000ba0 <SDIO_SDCard_Test+0x2d8>)
 8000908:	48a6      	ldr	r0, [pc, #664]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 800090a:	f00d ff3f 	bl	800e78c <siprintf>
      USB_CDC_Print(TxBuffer);
 800090e:	48a5      	ldr	r0, [pc, #660]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000910:	f7ff ffc4 	bl	800089c <USB_CDC_Print>
      break;
 8000914:	e1a9      	b.n	8000c6a <SDIO_SDCard_Test+0x3a2>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 8000916:	49a4      	ldr	r1, [pc, #656]	@ (8000ba8 <SDIO_SDCard_Test+0x2e0>)
 8000918:	48a2      	ldr	r0, [pc, #648]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 800091a:	f00d ff37 	bl	800e78c <siprintf>
    USB_CDC_Print(TxBuffer);
 800091e:	48a1      	ldr	r0, [pc, #644]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000920:	f7ff ffbc 	bl	800089c <USB_CDC_Print>
    //------------------[ Get & Print The SD Card Size & Free Space ]--------------------
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000924:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8000928:	3a2c      	subs	r2, #44	@ 0x2c
 800092a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800092e:	3b38      	subs	r3, #56	@ 0x38
 8000930:	4619      	mov	r1, r3
 8000932:	489e      	ldr	r0, [pc, #632]	@ (8000bac <SDIO_SDCard_Test+0x2e4>)
 8000934:	f00c ff4f 	bl	800d7d6 <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000938:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800093c:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	3b02      	subs	r3, #2
 8000948:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800094c:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 8000950:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000954:	7892      	ldrb	r2, [r2, #2]
 8000956:	fb02 f303 	mul.w	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fed6 	bl	800070c <__aeabi_ui2d>
 8000960:	f04f 0200 	mov.w	r2, #0
 8000964:	4b92      	ldr	r3, [pc, #584]	@ (8000bb0 <SDIO_SDCard_Test+0x2e8>)
 8000966:	f7ff fc65 	bl	8000234 <__aeabi_dmul>
 800096a:	4602      	mov	r2, r0
 800096c:	460b      	mov	r3, r1
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	f7ff ff45 	bl	8000800 <__aeabi_d2uiz>
 8000976:	4603      	mov	r3, r0
 8000978:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 800097c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000980:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000982:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000986:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 800098a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800098e:	789b      	ldrb	r3, [r3, #2]
 8000990:	461a      	mov	r2, r3
 8000992:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000996:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800099a:	fb02 f303 	mul.w	r3, r2, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff feb4 	bl	800070c <__aeabi_ui2d>
 80009a4:	f04f 0200 	mov.w	r2, #0
 80009a8:	4b81      	ldr	r3, [pc, #516]	@ (8000bb0 <SDIO_SDCard_Test+0x2e8>)
 80009aa:	f7ff fc43 	bl	8000234 <__aeabi_dmul>
 80009ae:	4602      	mov	r2, r0
 80009b0:	460b      	mov	r3, r1
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	f7ff ff23 	bl	8000800 <__aeabi_d2uiz>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 80009c0:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80009c4:	6013      	str	r3, [r2, #0]
    sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 80009c6:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80009ca:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4978      	ldr	r1, [pc, #480]	@ (8000bb4 <SDIO_SDCard_Test+0x2ec>)
 80009d2:	4874      	ldr	r0, [pc, #464]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 80009d4:	f00d feda 	bl	800e78c <siprintf>
    USB_CDC_Print(TxBuffer);
 80009d8:	4872      	ldr	r0, [pc, #456]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 80009da:	f7ff ff5f 	bl	800089c <USB_CDC_Print>
    sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 80009de:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80009e2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4973      	ldr	r1, [pc, #460]	@ (8000bb8 <SDIO_SDCard_Test+0x2f0>)
 80009ea:	486e      	ldr	r0, [pc, #440]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 80009ec:	f00d fece 	bl	800e78c <siprintf>
    USB_CDC_Print(TxBuffer);
 80009f0:	486c      	ldr	r0, [pc, #432]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 80009f2:	f7ff ff53 	bl	800089c <USB_CDC_Print>
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80009f6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009fa:	3b28      	subs	r3, #40	@ 0x28
 80009fc:	220b      	movs	r2, #11
 80009fe:	496f      	ldr	r1, [pc, #444]	@ (8000bbc <SDIO_SDCard_Test+0x2f4>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f00b fbc9 	bl	800c198 <f_open>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000a0c:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000a10:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000a12:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000a16:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00d      	beq.n	8000a3c <SDIO_SDCard_Test+0x174>
    {
      sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000a20:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000a24:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4964      	ldr	r1, [pc, #400]	@ (8000bc0 <SDIO_SDCard_Test+0x2f8>)
 8000a2e:	485d      	ldr	r0, [pc, #372]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000a30:	f00d feac 	bl	800e78c <siprintf>
      USB_CDC_Print(TxBuffer);
 8000a34:	485b      	ldr	r0, [pc, #364]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000a36:	f7ff ff31 	bl	800089c <USB_CDC_Print>
      break;
 8000a3a:	e116      	b.n	8000c6a <SDIO_SDCard_Test+0x3a2>
    }
    sprintf(TxBuffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000a3c:	4961      	ldr	r1, [pc, #388]	@ (8000bc4 <SDIO_SDCard_Test+0x2fc>)
 8000a3e:	4859      	ldr	r0, [pc, #356]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000a40:	f00d fea4 	bl	800e78c <siprintf>
    USB_CDC_Print(TxBuffer);
 8000a44:	4857      	ldr	r0, [pc, #348]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000a46:	f7ff ff29 	bl	800089c <USB_CDC_Print>
    // (1) Write Data To The Text File [ Using f_puts() Function ]
    f_puts("Hello! From STM32 To SD Card Over SDIO, Using f_puts()\n", &Fil);
 8000a4a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a4e:	3b28      	subs	r3, #40	@ 0x28
 8000a50:	4619      	mov	r1, r3
 8000a52:	485d      	ldr	r0, [pc, #372]	@ (8000bc8 <SDIO_SDCard_Test+0x300>)
 8000a54:	f00d f814 	bl	800da80 <f_puts>
    // (2) Write Data To The Text File [ Using f_write() Function ]
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SDIO, Using f_write()\r\n");
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4a5c      	ldr	r2, [pc, #368]	@ (8000bcc <SDIO_SDCard_Test+0x304>)
 8000a5c:	461c      	mov	r4, r3
 8000a5e:	4615      	mov	r5, r2
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a70:	c403      	stmia	r4!, {r0, r1}
 8000a72:	8022      	strh	r2, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8000a74:	463b      	mov	r3, r7
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fbd4 	bl	8000224 <strlen>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a82:	3b34      	subs	r3, #52	@ 0x34
 8000a84:	4639      	mov	r1, r7
 8000a86:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000a8a:	3828      	subs	r0, #40	@ 0x28
 8000a8c:	f00c f880 	bl	800cb90 <f_write>
    // Close The File
    f_close(&Fil);
 8000a90:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a94:	3b28      	subs	r3, #40	@ 0x28
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00c fb81 	bl	800d19e <f_close>
    //------------------[ Open A Text File For Read & Read Its Data ]--------------------
    // Open The File
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_READ);
 8000a9c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000aa0:	3b28      	subs	r3, #40	@ 0x28
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4945      	ldr	r1, [pc, #276]	@ (8000bbc <SDIO_SDCard_Test+0x2f4>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00b fb76 	bl	800c198 <f_open>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000ab2:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000ab6:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000ab8:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000abc:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <SDIO_SDCard_Test+0x20e>
    {
      sprintf(TxBuffer, "Error! While Opening (MyTextFile.txt) File For Read.. \r\n");
 8000ac6:	4942      	ldr	r1, [pc, #264]	@ (8000bd0 <SDIO_SDCard_Test+0x308>)
 8000ac8:	4836      	ldr	r0, [pc, #216]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000aca:	f00d fe5f 	bl	800e78c <siprintf>
      USB_CDC_Print(TxBuffer);
 8000ace:	4835      	ldr	r0, [pc, #212]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000ad0:	f7ff fee4 	bl	800089c <USB_CDC_Print>
      break;
 8000ad4:	e0c9      	b.n	8000c6a <SDIO_SDCard_Test+0x3a2>
    }
    // (1) Read The Text File's Data [ Using f_gets() Function ]
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 8000ad6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000ada:	3b28      	subs	r3, #40	@ 0x28
 8000adc:	4638      	mov	r0, r7
 8000ade:	461a      	mov	r2, r3
 8000ae0:	21c8      	movs	r1, #200	@ 0xc8
 8000ae2:	f00c ff52 	bl	800d98a <f_gets>
    sprintf(TxBuffer, "Data Read From (MyTextFile.txt) Using f_gets():%s", RW_Buffer);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	461a      	mov	r2, r3
 8000aea:	493a      	ldr	r1, [pc, #232]	@ (8000bd4 <SDIO_SDCard_Test+0x30c>)
 8000aec:	482d      	ldr	r0, [pc, #180]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000aee:	f00d fe4d 	bl	800e78c <siprintf>
    USB_CDC_Print(TxBuffer);
 8000af2:	482c      	ldr	r0, [pc, #176]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000af4:	f7ff fed2 	bl	800089c <USB_CDC_Print>
    // (2) Read The Text File's Data [ Using f_read() Function ]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000af8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000afc:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	@ 0xfa4
 8000b00:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b04:	3b30      	subs	r3, #48	@ 0x30
 8000b06:	4639      	mov	r1, r7
 8000b08:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000b0c:	3828      	subs	r0, #40	@ 0x28
 8000b0e:	f00b fe57 	bl	800c7c0 <f_read>
    sprintf(TxBuffer, "Data Read From (MyTextFile.txt) Using f_read():%s", RW_Buffer);
 8000b12:	463b      	mov	r3, r7
 8000b14:	461a      	mov	r2, r3
 8000b16:	4930      	ldr	r1, [pc, #192]	@ (8000bd8 <SDIO_SDCard_Test+0x310>)
 8000b18:	4822      	ldr	r0, [pc, #136]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000b1a:	f00d fe37 	bl	800e78c <siprintf>
    USB_CDC_Print(TxBuffer);
 8000b1e:	4821      	ldr	r0, [pc, #132]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000b20:	f7ff febc 	bl	800089c <USB_CDC_Print>
    // Close The File
    f_close(&Fil);
 8000b24:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b28:	3b28      	subs	r3, #40	@ 0x28
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00c fb37 	bl	800d19e <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 8000b30:	492a      	ldr	r1, [pc, #168]	@ (8000bdc <SDIO_SDCard_Test+0x314>)
 8000b32:	481c      	ldr	r0, [pc, #112]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000b34:	f00d fe2a 	bl	800e78c <siprintf>
    USB_CDC_Print(TxBuffer);
 8000b38:	481a      	ldr	r0, [pc, #104]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000b3a:	f7ff feaf 	bl	800089c <USB_CDC_Print>
    //------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
    // (1) Open The Existing File For Write (Update)
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_OPEN_EXISTING | FA_WRITE);
 8000b3e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b42:	3b28      	subs	r3, #40	@ 0x28
 8000b44:	2202      	movs	r2, #2
 8000b46:	491d      	ldr	r1, [pc, #116]	@ (8000bbc <SDIO_SDCard_Test+0x2f4>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00b fb25 	bl	800c198 <f_open>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000b54:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000b58:	7013      	strb	r3, [r2, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8000b5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000b5e:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	@ 0xfa4
 8000b62:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b66:	3b28      	subs	r3, #40	@ 0x28
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00c fb42 	bl	800d1f4 <f_lseek>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000b76:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000b7a:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000b7c:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000b80:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d02c      	beq.n	8000be4 <SDIO_SDCard_Test+0x31c>
    {
      sprintf(TxBuffer, "Error! While Opening (MyTextFile.txt) File For Update.. \r\n");
 8000b8a:	4915      	ldr	r1, [pc, #84]	@ (8000be0 <SDIO_SDCard_Test+0x318>)
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000b8e:	f00d fdfd 	bl	800e78c <siprintf>
      USB_CDC_Print(TxBuffer);
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <SDIO_SDCard_Test+0x2dc>)
 8000b94:	f7ff fe82 	bl	800089c <USB_CDC_Print>
      break;
 8000b98:	e067      	b.n	8000c6a <SDIO_SDCard_Test+0x3a2>
 8000b9a:	bf00      	nop
 8000b9c:	20000374 	.word	0x20000374
 8000ba0:	0800f104 	.word	0x0800f104
 8000ba4:	200001e8 	.word	0x200001e8
 8000ba8:	0800f138 	.word	0x0800f138
 8000bac:	0800f15c 	.word	0x0800f15c
 8000bb0:	3fe00000 	.word	0x3fe00000
 8000bb4:	0800f160 	.word	0x0800f160
 8000bb8:	0800f180 	.word	0x0800f180
 8000bbc:	0800f1a4 	.word	0x0800f1a4
 8000bc0:	0800f1b4 	.word	0x0800f1b4
 8000bc4:	0800f1f8 	.word	0x0800f1f8
 8000bc8:	0800f238 	.word	0x0800f238
 8000bcc:	0800f270 	.word	0x0800f270
 8000bd0:	0800f2ac 	.word	0x0800f2ac
 8000bd4:	0800f2e8 	.word	0x0800f2e8
 8000bd8:	0800f31c 	.word	0x0800f31c
 8000bdc:	0800f350 	.word	0x0800f350
 8000be0:	0800f364 	.word	0x0800f364
    }
    // (2) Write New Line of Text Data To The File
    FR_Status = f_puts("This New Line Was Added During File Update!\r\n", &Fil);
 8000be4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000be8:	3b28      	subs	r3, #40	@ 0x28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4835      	ldr	r0, [pc, #212]	@ (8000cc4 <SDIO_SDCard_Test+0x3fc>)
 8000bee:	f00c ff47 	bl	800da80 <f_puts>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000bf8:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000bfc:	7013      	strb	r3, [r2, #0]
    f_close(&Fil);
 8000bfe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c02:	3b28      	subs	r3, #40	@ 0x28
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00c faca 	bl	800d19e <f_close>
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	22c8      	movs	r2, #200	@ 0xc8
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f00d fddb 	bl	800e7cc <memset>
    // (3) Read The Contents of The Text File After The Update
    FR_Status = f_open(&Fil, "MyTextFile.txt", FA_READ); // Open The File For Read
 8000c16:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c1a:	3b28      	subs	r3, #40	@ 0x28
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	492a      	ldr	r1, [pc, #168]	@ (8000cc8 <SDIO_SDCard_Test+0x400>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f00b fab9 	bl	800c198 <f_open>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000c2c:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000c30:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000c32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000c36:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	@ 0xfa4
 8000c3a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c3e:	3b30      	subs	r3, #48	@ 0x30
 8000c40:	4639      	mov	r1, r7
 8000c42:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000c46:	3828      	subs	r0, #40	@ 0x28
 8000c48:	f00b fdba 	bl	800c7c0 <f_read>
    sprintf(TxBuffer, "Data Read From (MyTextFile.txt) After Update:\r\n%s", RW_Buffer);
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	461a      	mov	r2, r3
 8000c50:	491e      	ldr	r1, [pc, #120]	@ (8000ccc <SDIO_SDCard_Test+0x404>)
 8000c52:	481f      	ldr	r0, [pc, #124]	@ (8000cd0 <SDIO_SDCard_Test+0x408>)
 8000c54:	f00d fd9a 	bl	800e78c <siprintf>
    USB_CDC_Print(TxBuffer);
 8000c58:	481d      	ldr	r0, [pc, #116]	@ (8000cd0 <SDIO_SDCard_Test+0x408>)
 8000c5a:	f7ff fe1f 	bl	800089c <USB_CDC_Print>
    f_close(&Fil);
 8000c5e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c62:	3b28      	subs	r3, #40	@ 0x28
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00c fa9a 	bl	800d19e <f_close>
        USC_CDC_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4919      	ldr	r1, [pc, #100]	@ (8000cd4 <SDIO_SDCard_Test+0x40c>)
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f00b fa48 	bl	800c104 <f_mount>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000c7a:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000c7e:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 8000c80:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000c84:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00d      	beq.n	8000caa <SDIO_SDCard_Test+0x3e2>
  {
      sprintf(TxBuffer, "\r\nError! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000c8e:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000c92:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	490f      	ldr	r1, [pc, #60]	@ (8000cd8 <SDIO_SDCard_Test+0x410>)
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <SDIO_SDCard_Test+0x408>)
 8000c9e:	f00d fd75 	bl	800e78c <siprintf>
      USB_CDC_Print(TxBuffer);
 8000ca2:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <SDIO_SDCard_Test+0x408>)
 8000ca4:	f7ff fdfa 	bl	800089c <USB_CDC_Print>
  } else{
      sprintf(TxBuffer, "\r\nSD Card Un-mounted Successfully! \r\n");
      USB_CDC_Print(TxBuffer);
  }
}
 8000ca8:	e006      	b.n	8000cb8 <SDIO_SDCard_Test+0x3f0>
      sprintf(TxBuffer, "\r\nSD Card Un-mounted Successfully! \r\n");
 8000caa:	490c      	ldr	r1, [pc, #48]	@ (8000cdc <SDIO_SDCard_Test+0x414>)
 8000cac:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <SDIO_SDCard_Test+0x408>)
 8000cae:	f00d fd6d 	bl	800e78c <siprintf>
      USB_CDC_Print(TxBuffer);
 8000cb2:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <SDIO_SDCard_Test+0x408>)
 8000cb4:	f7ff fdf2 	bl	800089c <USB_CDC_Print>
}
 8000cb8:	bf00      	nop
 8000cba:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	0800f3a0 	.word	0x0800f3a0
 8000cc8:	0800f1a4 	.word	0x0800f1a4
 8000ccc:	0800f3d0 	.word	0x0800f3d0
 8000cd0:	200001e8 	.word	0x200001e8
 8000cd4:	0800f15c 	.word	0x0800f15c
 8000cd8:	0800f404 	.word	0x0800f404
 8000cdc:	0800f43c 	.word	0x0800f43c

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 f9cc 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f80f 	bl	8000d0a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f7ff fda8 	bl	8000840 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000cf0:	f000 f870 	bl	8000dd4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000cf4:	f007 f9a2 	bl	800803c <MX_FATFS_Init>
  HAL_Delay(200);
 8000cf8:	20c8      	movs	r0, #200	@ 0xc8
 8000cfa:	f000 fa23 	bl	8001144 <HAL_Delay>
  MX_USB_DEVICE_Init();
 8000cfe:	f00d f8a9 	bl	800de54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SDIO_SDCard_Test();
 8000d02:	f7ff fde1 	bl	80008c8 <SDIO_SDCard_Test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d06:	bf00      	nop
 8000d08:	e7fd      	b.n	8000d06 <main+0x26>

08000d0a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b096      	sub	sp, #88	@ 0x58
 8000d0e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d14:	2228      	movs	r2, #40	@ 0x28
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00d fd57 	bl	800e7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d50:	2302      	movs	r3, #2
 8000d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d58:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d5a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d5e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fa21 	bl	80031ac <HAL_RCC_OscConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d70:	f000 f829 	bl	8000dc6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d74:	230f      	movs	r3, #15
 8000d76:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2102      	movs	r1, #2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fc8d 	bl	80036b0 <HAL_RCC_ClockConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d9c:	f000 f813 	bl	8000dc6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000da0:	2310      	movs	r3, #16
 8000da2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 fe02 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000db6:	f000 f806 	bl	8000dc6 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000dba:	f002 fd63 	bl	8003884 <HAL_RCC_EnableCSS>
}
 8000dbe:	bf00      	nop
 8000dc0:	3758      	adds	r7, #88	@ 0x58
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dca:	b672      	cpsid	i
}
 8000dcc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dce:	bf00      	nop
 8000dd0:	e7fd      	b.n	8000dce <Error_Handler+0x8>
	...

08000dd4 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	@ (8000e30 <MX_SDIO_SD_Init+0x5c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000dfe:	2204      	movs	r2, #4
 8000e00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if(1){
	  if (HAL_SD_Init(&hsd) != HAL_OK) {
 8000e02:	480a      	ldr	r0, [pc, #40]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000e04:	f002 fe8c 	bl	8003b20 <HAL_SD_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_SDIO_SD_Init+0x3e>
	   Error_Handler();
 8000e0e:	f7ff ffda 	bl	8000dc6 <Error_Handler>
	   }
	  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK) {  //! 4 bit here
 8000e12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_SDIO_SD_Init+0x58>)
 8000e18:	f003 fc66 	bl	80046e8 <HAL_SD_ConfigWideBusOperation>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_SDIO_SD_Init+0x52>
	   Error_Handler();
 8000e22:	f7ff ffd0 	bl	8000dc6 <Error_Handler>
	   }
  }
  /* USER CODE END SDIO_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200002e4 	.word	0x200002e4
 8000e30:	40018000 	.word	0x40018000

08000e34 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a22      	ldr	r2, [pc, #136]	@ (8000ed8 <HAL_SD_MspInit+0xa4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d13c      	bne.n	8000ece <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e54:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	4a20      	ldr	r2, [pc, #128]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5e:	6153      	str	r3, [r2, #20]
 8000e60:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_SD_MspInit+0xa8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000e9c:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <HAL_SD_MspInit+0xac>)
 8000eb2:	f000 fa79 	bl	80013a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4806      	ldr	r0, [pc, #24]	@ (8000ee4 <HAL_SD_MspInit+0xb0>)
 8000eca:	f000 fa6d 	bl	80013a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40018000 	.word	0x40018000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40011400 	.word	0x40011400

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <HAL_MspInit+0x5c>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_MspInit+0x60>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_MspInit+0x60>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000f50:	f002 fcf8 	bl	8003944 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x8>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 f8b4 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fae:	f000 fcb4 	bl	800191a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000126c 	.word	0x2000126c

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f00d fbf6 	bl	800e7dc <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000c000 	.word	0x2000c000
 800101c:	00000400 	.word	0x00000400
 8001020:	20000368 	.word	0x20000368
 8001024:	200018c8 	.word	0x200018c8

08001028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff fff8 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480b      	ldr	r0, [pc, #44]	@ (8001068 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800103a:	490c      	ldr	r1, [pc, #48]	@ (800106c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800103c:	4a0c      	ldr	r2, [pc, #48]	@ (8001070 <LoopFillZerobss+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001050:	4c09      	ldr	r4, [pc, #36]	@ (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f00d fbc3 	bl	800e7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff fe3d 	bl	8000ce0 <main>
  bx lr
 8001066:	4770      	bx	lr
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001070:	0800fac0 	.word	0x0800fac0
  ldr r2, =_sbss
 8001074:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001078:	200018c4 	.word	0x200018c4

0800107c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC1_2_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_Init+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_Init+0x28>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f947 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff ff24 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f95f 	bl	800138e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f927 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_IncTick+0x1c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x20>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a03      	ldr	r2, [pc, #12]	@ (800112c <HAL_IncTick+0x20>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000008 	.word	0x20000008
 800112c:	2000036c 	.word	0x2000036c

08001130 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b02      	ldr	r3, [pc, #8]	@ (8001140 <HAL_GetTick+0x10>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	2000036c 	.word	0x2000036c

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff fff0 	bl	8001130 <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffe0 	bl	8001130 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4906      	ldr	r1, [pc, #24]	@ (8001224 <__NVIC_EnableIRQ+0x34>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff90 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff2d 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff42 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff90 	bl	800127c <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5f 	bl	8001228 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff35 	bl	80011f0 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b08b      	sub	sp, #44	@ 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e179      	b.n	80016b0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013bc:	2201      	movs	r2, #1
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8168 	bne.w	80016aa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4a96      	ldr	r2, [pc, #600]	@ (8001638 <HAL_GPIO_Init+0x290>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d05e      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013e4:	4a94      	ldr	r2, [pc, #592]	@ (8001638 <HAL_GPIO_Init+0x290>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d875      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013ea:	4a94      	ldr	r2, [pc, #592]	@ (800163c <HAL_GPIO_Init+0x294>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d058      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013f0:	4a92      	ldr	r2, [pc, #584]	@ (800163c <HAL_GPIO_Init+0x294>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d86f      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 80013f6:	4a92      	ldr	r2, [pc, #584]	@ (8001640 <HAL_GPIO_Init+0x298>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d052      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 80013fc:	4a90      	ldr	r2, [pc, #576]	@ (8001640 <HAL_GPIO_Init+0x298>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d869      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001402:	4a90      	ldr	r2, [pc, #576]	@ (8001644 <HAL_GPIO_Init+0x29c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d04c      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001408:	4a8e      	ldr	r2, [pc, #568]	@ (8001644 <HAL_GPIO_Init+0x29c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d863      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800140e:	4a8e      	ldr	r2, [pc, #568]	@ (8001648 <HAL_GPIO_Init+0x2a0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d046      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
 8001414:	4a8c      	ldr	r2, [pc, #560]	@ (8001648 <HAL_GPIO_Init+0x2a0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d85d      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 800141a:	2b12      	cmp	r3, #18
 800141c:	d82a      	bhi.n	8001474 <HAL_GPIO_Init+0xcc>
 800141e:	2b12      	cmp	r3, #18
 8001420:	d859      	bhi.n	80014d6 <HAL_GPIO_Init+0x12e>
 8001422:	a201      	add	r2, pc, #4	@ (adr r2, 8001428 <HAL_GPIO_Init+0x80>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	080014a3 	.word	0x080014a3
 800142c:	0800147d 	.word	0x0800147d
 8001430:	0800148f 	.word	0x0800148f
 8001434:	080014d1 	.word	0x080014d1
 8001438:	080014d7 	.word	0x080014d7
 800143c:	080014d7 	.word	0x080014d7
 8001440:	080014d7 	.word	0x080014d7
 8001444:	080014d7 	.word	0x080014d7
 8001448:	080014d7 	.word	0x080014d7
 800144c:	080014d7 	.word	0x080014d7
 8001450:	080014d7 	.word	0x080014d7
 8001454:	080014d7 	.word	0x080014d7
 8001458:	080014d7 	.word	0x080014d7
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014d7 	.word	0x080014d7
 8001464:	080014d7 	.word	0x080014d7
 8001468:	080014d7 	.word	0x080014d7
 800146c:	08001485 	.word	0x08001485
 8001470:	08001499 	.word	0x08001499
 8001474:	4a75      	ldr	r2, [pc, #468]	@ (800164c <HAL_GPIO_Init+0x2a4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147a:	e02c      	b.n	80014d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	623b      	str	r3, [r7, #32]
          break;
 8001482:	e029      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	3304      	adds	r3, #4
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e024      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	3308      	adds	r3, #8
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e01f      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	330c      	adds	r3, #12
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e01a      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014aa:	2304      	movs	r3, #4
 80014ac:	623b      	str	r3, [r7, #32]
          break;
 80014ae:	e013      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b8:	2308      	movs	r3, #8
 80014ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	611a      	str	r2, [r3, #16]
          break;
 80014c2:	e009      	b.n	80014d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	615a      	str	r2, [r3, #20]
          break;
 80014ce:	e003      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x130>
          break;
 80014d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	d801      	bhi.n	80014e2 <HAL_GPIO_Init+0x13a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	e001      	b.n	80014e6 <HAL_GPIO_Init+0x13e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3304      	adds	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2bff      	cmp	r3, #255	@ 0xff
 80014ec:	d802      	bhi.n	80014f4 <HAL_GPIO_Init+0x14c>
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x152>
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	3b08      	subs	r3, #8
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	210f      	movs	r1, #15
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80c1 	beq.w	80016aa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001528:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <HAL_GPIO_Init+0x2a8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a48      	ldr	r2, [pc, #288]	@ (8001650 <HAL_GPIO_Init+0x2a8>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b46      	ldr	r3, [pc, #280]	@ (8001650 <HAL_GPIO_Init+0x2a8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001540:	4a44      	ldr	r2, [pc, #272]	@ (8001654 <HAL_GPIO_Init+0x2ac>)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3c      	ldr	r2, [pc, #240]	@ (8001658 <HAL_GPIO_Init+0x2b0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d01f      	beq.n	80015ac <HAL_GPIO_Init+0x204>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a3b      	ldr	r2, [pc, #236]	@ (800165c <HAL_GPIO_Init+0x2b4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d019      	beq.n	80015a8 <HAL_GPIO_Init+0x200>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a3a      	ldr	r2, [pc, #232]	@ (8001660 <HAL_GPIO_Init+0x2b8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d013      	beq.n	80015a4 <HAL_GPIO_Init+0x1fc>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a39      	ldr	r2, [pc, #228]	@ (8001664 <HAL_GPIO_Init+0x2bc>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d00d      	beq.n	80015a0 <HAL_GPIO_Init+0x1f8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a38      	ldr	r2, [pc, #224]	@ (8001668 <HAL_GPIO_Init+0x2c0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d007      	beq.n	800159c <HAL_GPIO_Init+0x1f4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a37      	ldr	r2, [pc, #220]	@ (800166c <HAL_GPIO_Init+0x2c4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d101      	bne.n	8001598 <HAL_GPIO_Init+0x1f0>
 8001594:	2305      	movs	r3, #5
 8001596:	e00a      	b.n	80015ae <HAL_GPIO_Init+0x206>
 8001598:	2306      	movs	r3, #6
 800159a:	e008      	b.n	80015ae <HAL_GPIO_Init+0x206>
 800159c:	2304      	movs	r3, #4
 800159e:	e006      	b.n	80015ae <HAL_GPIO_Init+0x206>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x206>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x206>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x206>
 80015ac:	2300      	movs	r3, #0
 80015ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015be:	4925      	ldr	r1, [pc, #148]	@ (8001654 <HAL_GPIO_Init+0x2ac>)
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d8:	4b25      	ldr	r3, [pc, #148]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	4924      	ldr	r1, [pc, #144]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e6:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4920      	ldr	r1, [pc, #128]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	491a      	ldr	r1, [pc, #104]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	60cb      	str	r3, [r1, #12]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4916      	ldr	r1, [pc, #88]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 8001618:	4013      	ands	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d025      	beq.n	8001674 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4910      	ldr	r1, [pc, #64]	@ (8001670 <HAL_GPIO_Init+0x2c8>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e025      	b.n	8001682 <HAL_GPIO_Init+0x2da>
 8001636:	bf00      	nop
 8001638:	10320000 	.word	0x10320000
 800163c:	10310000 	.word	0x10310000
 8001640:	10220000 	.word	0x10220000
 8001644:	10210000 	.word	0x10210000
 8001648:	10120000 	.word	0x10120000
 800164c:	10110000 	.word	0x10110000
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000
 8001658:	40010800 	.word	0x40010800
 800165c:	40010c00 	.word	0x40010c00
 8001660:	40011000 	.word	0x40011000
 8001664:	40011400 	.word	0x40011400
 8001668:	40011800 	.word	0x40011800
 800166c:	40011c00 	.word	0x40011c00
 8001670:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	43db      	mvns	r3, r3
 800167c:	4913      	ldr	r1, [pc, #76]	@ (80016cc <HAL_GPIO_Init+0x324>)
 800167e:	4013      	ands	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800168e:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	490e      	ldr	r1, [pc, #56]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800169c:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <HAL_GPIO_Init+0x324>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4909      	ldr	r1, [pc, #36]	@ (80016cc <HAL_GPIO_Init+0x324>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	3301      	adds	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f47f ae7e 	bne.w	80013bc <HAL_GPIO_Init+0x14>
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	372c      	adds	r7, #44	@ 0x2c
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	b08b      	sub	sp, #44	@ 0x2c
 80016d4:	af06      	add	r7, sp, #24
 80016d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0f1      	b.n	80018c6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f00c fd9e 	bl	800e238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f004 f921 	bl	8005950 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	687e      	ldr	r6, [r7, #4]
 8001716:	466d      	mov	r5, sp
 8001718:	f106 0410 	add.w	r4, r6, #16
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	1d33      	adds	r3, r6, #4
 8001726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001728:	6838      	ldr	r0, [r7, #0]
 800172a:	f004 f8eb 	bl	8005904 <USB_CoreInit>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0c2      	b.n	80018c6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f004 f91c 	bl	8005984 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e040      	b.n	80017d4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3301      	adds	r3, #1
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3303      	adds	r3, #3
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3338      	adds	r3, #56	@ 0x38
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	333c      	adds	r3, #60	@ 0x3c
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	3340      	adds	r3, #64	@ 0x40
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	3301      	adds	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d3b9      	bcc.n	8001752 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e044      	b.n	800186e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d3b5      	bcc.n	80017e4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	687e      	ldr	r6, [r7, #4]
 8001880:	466d      	mov	r5, sp
 8001882:	f106 0410 	add.w	r4, r6, #16
 8001886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	602b      	str	r3, [r5, #0]
 800188e:	1d33      	adds	r3, r6, #4
 8001890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f004 f882 	bl	800599c <USB_DevInit>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2202      	movs	r2, #2
 80018a2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00d      	b.n	80018c6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f006 fb03 	bl	8007eca <USB_DevDisconnect>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_PCD_Start+0x16>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e016      	b.n	8001912 <HAL_PCD_Start+0x44>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 f817 	bl	8005924 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80018f6:	2101      	movs	r1, #1
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f00c ff10 	bl	800e71e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f006 fad7 	bl	8007eb6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b088      	sub	sp, #32
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f006 fad9 	bl	8007ede <USB_ReadInterrupts>
 800192c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fb1b 	bl	8001f74 <PCD_EP_ISR_Handler>

    return;
 800193e:	e119      	b.n	8001b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001946:	2b00      	cmp	r3, #0
 8001948:	d013      	beq.n	8001972 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800195c:	b292      	uxth	r2, r2
 800195e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f00c fce3 	bl	800e32e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001968:	2100      	movs	r1, #0
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f905 	bl	8001b7a <HAL_PCD_SetAddress>

    return;
 8001970:	e100      	b.n	8001b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00c      	beq.n	8001996 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800198e:	b292      	uxth	r2, r2
 8001990:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001994:	e0ee      	b.n	8001b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019b2:	b292      	uxth	r2, r2
 80019b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019b8:	e0dc      	b.n	8001b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d027      	beq.n	8001a14 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0204 	bic.w	r2, r2, #4
 80019d6:	b292      	uxth	r2, r2
 80019d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0208 	bic.w	r2, r2, #8
 80019ee:	b292      	uxth	r2, r2
 80019f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f00c fcd3 	bl	800e3a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a12:	e0af      	b.n	8001b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8083 	beq.w	8001b26 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	77fb      	strb	r3, [r7, #31]
 8001a24:	e010      	b.n	8001a48 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	441a      	add	r2, r3
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	8812      	ldrh	r2, [r2, #0]
 8001a36:	b292      	uxth	r2, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	3320      	adds	r3, #32
 8001a3c:	443b      	add	r3, r7
 8001a3e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	3301      	adds	r3, #1
 8001a46:	77fb      	strb	r3, [r7, #31]
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d9eb      	bls.n	8001a26 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	b292      	uxth	r2, r2
 8001a62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001a7e:	bf00      	nop
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f6      	beq.n	8001a80 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	77fb      	strb	r3, [r7, #31]
 8001aae:	e00f      	b.n	8001ad0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	7ffa      	ldrb	r2, [r7, #31]
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	440a      	add	r2, r1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	3320      	adds	r3, #32
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001ac8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	3301      	adds	r3, #1
 8001ace:	77fb      	strb	r3, [r7, #31]
 8001ad0:	7ffb      	ldrb	r3, [r7, #31]
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	d9ec      	bls.n	8001ab0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0208 	orr.w	r2, r2, #8
 8001ae8:	b292      	uxth	r2, r2
 8001aea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b00:	b292      	uxth	r2, r2
 8001b02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0204 	orr.w	r2, r2, #4
 8001b18:	b292      	uxth	r2, r2
 8001b1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f00c fc24 	bl	800e36c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b24:	e026      	b.n	8001b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00f      	beq.n	8001b50 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b42:	b292      	uxth	r2, r2
 8001b44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f00c fbe2 	bl	800e312 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b4e:	e011      	b.n	8001b74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b72:	bf00      	nop
  }
}
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_PCD_SetAddress+0x1a>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e013      	b.n	8001bbc <HAL_PCD_SetAddress+0x42>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	78fa      	ldrb	r2, [r7, #3]
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f006 f96f 	bl	8007e90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	70fb      	strb	r3, [r7, #3]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	803b      	strh	r3, [r7, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da0e      	bge.n	8001c08 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	705a      	strb	r2, [r3, #1]
 8001c06:	e00e      	b.n	8001c26 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 0207 	and.w	r2, r3, #7
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c32:	883a      	ldrh	r2, [r7, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	78ba      	ldrb	r2, [r7, #2]
 8001c3c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c3e:	78bb      	ldrb	r3, [r7, #2]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d102      	bne.n	8001c4a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_PCD_EP_Open+0x94>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e00e      	b.n	8001c76 <HAL_PCD_EP_Open+0xb2>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 feb8 	bl	80059dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001c74:	7afb      	ldrb	r3, [r7, #11]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da0e      	bge.n	8001cb0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	705a      	strb	r2, [r3, #1]
 8001cae:	e00e      	b.n	8001cce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 0207 	and.w	r2, r3, #7
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_PCD_EP_Close+0x6a>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e00e      	b.n	8001d06 <HAL_PCD_EP_Close+0x88>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 fa30 	bl	800615c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	f003 0207 	and.w	r2, r3, #7
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6979      	ldr	r1, [r7, #20]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f004 fbe7 	bl	8006534 <USB_EPStartXfer>

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 0207 	and.w	r2, r3, #7
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	460b      	mov	r3, r1
 8001dac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2201      	movs	r2, #1
 8001de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6979      	ldr	r1, [r7, #20]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fb99 	bl	8006534 <USB_EPStartXfer>

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0207 	and.w	r2, r3, #7
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d901      	bls.n	8001e2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e04c      	b.n	8001ec4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da0e      	bge.n	8001e50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	705a      	strb	r2, [r3, #1]
 8001e4e:	e00c      	b.n	8001e6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_EP_SetStall+0x7e>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e01c      	b.n	8001ec4 <HAL_PCD_EP_SetStall+0xb8>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f005 fefc 	bl	8007c96 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d108      	bne.n	8001eba <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f006 f821 	bl	8007efc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d901      	bls.n	8001eea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e040      	b.n	8001f6c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0e      	bge.n	8001f10 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
 8001f0e:	e00e      	b.n	8001f2e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 0207 	and.w	r2, r3, #7
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_PCD_EP_ClrStall+0x82>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e00e      	b.n	8001f6c <HAL_PCD_EP_ClrStall+0xa0>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f005 feea 	bl	8007d36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b096      	sub	sp, #88	@ 0x58
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f7c:	e3be      	b.n	80026fc <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001f98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 8178 	bne.w	8002292 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d151      	bne.n	8002052 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fbe:	81fb      	strh	r3, [r7, #14]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	89fb      	ldrh	r3, [r7, #14]
 8001fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3328      	adds	r3, #40	@ 0x28
 8001fd6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	3302      	adds	r3, #2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002002:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	441a      	add	r2, r3
 800200e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002010:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002012:	2100      	movs	r1, #0
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f00c f962 	bl	800e2de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 836a 	beq.w	80026fc <PCD_EP_ISR_Handler+0x788>
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 8365 	bne.w	80026fc <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002050:	e354      	b.n	80026fc <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002058:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002064:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800206c:	2b00      	cmp	r3, #0
 800206e:	d034      	beq.n	80020da <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	3306      	adds	r3, #6
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80020a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f005 ff74 	bl	8007f9c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020c0:	4013      	ands	r3, r2
 80020c2:	823b      	strh	r3, [r7, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	8a3a      	ldrh	r2, [r7, #16]
 80020ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020ce:	b292      	uxth	r2, r2
 80020d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f00c f8d6 	bl	800e284 <HAL_PCD_SetupStageCallback>
 80020d8:	e310      	b.n	80026fc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020da:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f280 830c 	bge.w	80026fc <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020f0:	4013      	ands	r3, r2
 80020f2:	83fb      	strh	r3, [r7, #30]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	8bfa      	ldrh	r2, [r7, #30]
 80020fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020fe:	b292      	uxth	r2, r2
 8002100:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	3306      	adds	r3, #6
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800212a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800212e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <PCD_EP_ISR_Handler+0x1f6>
 8002136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d015      	beq.n	800216a <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002144:	6959      	ldr	r1, [r3, #20]
 8002146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002148:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800214e:	b29b      	uxth	r3, r3
 8002150:	f005 ff24 	bl	8007f9c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	441a      	add	r2, r3
 800215e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002160:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002162:	2100      	movs	r1, #0
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f00c f89f 	bl	800e2a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002174:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 82bd 	bne.w	80026fc <PCD_EP_ISR_Handler+0x788>
 8002182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002186:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800218a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800218e:	f000 82b5 	beq.w	80026fc <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	4413      	add	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021bc:	b29a      	uxth	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80021c8:	d91d      	bls.n	8002206 <PCD_EP_ISR_Handler+0x292>
 80021ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80021d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <PCD_EP_ISR_Handler+0x270>
 80021de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e0:	3b01      	subs	r3, #1
 80021e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	029b      	lsls	r3, r3, #10
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021fe:	b29a      	uxth	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	e026      	b.n	8002254 <PCD_EP_ISR_Handler+0x2e0>
 8002206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <PCD_EP_ISR_Handler+0x2b0>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800221c:	b29a      	uxth	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	e017      	b.n	8002254 <PCD_EP_ISR_Handler+0x2e0>
 8002224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	647b      	str	r3, [r7, #68]	@ 0x44
 800222c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <PCD_EP_ISR_Handler+0x2ca>
 8002238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800223a:	3301      	adds	r3, #1
 800223c:	647b      	str	r3, [r7, #68]	@ 0x44
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29a      	uxth	r2, r3
 8002244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002246:	b29b      	uxth	r3, r3
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	b29b      	uxth	r3, r3
 800224c:	4313      	orrs	r3, r2
 800224e:	b29a      	uxth	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002264:	827b      	strh	r3, [r7, #18]
 8002266:	8a7b      	ldrh	r3, [r7, #18]
 8002268:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800226c:	827b      	strh	r3, [r7, #18]
 800226e:	8a7b      	ldrh	r3, [r7, #18]
 8002270:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002274:	827b      	strh	r3, [r7, #18]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	8a7b      	ldrh	r3, [r7, #18]
 800227c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800228c:	b29b      	uxth	r3, r3
 800228e:	8013      	strh	r3, [r2, #0]
 8002290:	e234      	b.n	80026fc <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022a6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f280 80fc 	bge.w	80024a8 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80022c6:	4013      	ands	r3, r2
 80022c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80022de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022e2:	b292      	uxth	r2, r2
 80022e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022e6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022fe:	7b1b      	ldrb	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d125      	bne.n	8002350 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	3306      	adds	r3, #6
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002330:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8092 	beq.w	800245e <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002340:	6959      	ldr	r1, [r3, #20]
 8002342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002344:	88da      	ldrh	r2, [r3, #6]
 8002346:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800234a:	f005 fe27 	bl	8007f9c <USB_ReadPMA>
 800234e:	e086      	b.n	800245e <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002352:	78db      	ldrb	r3, [r3, #3]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d10a      	bne.n	800236e <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002358:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800235c:	461a      	mov	r2, r3
 800235e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f9d9 	bl	8002718 <HAL_PCD_EP_DB_Receive>
 8002366:	4603      	mov	r3, r0
 8002368:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800236c:	e077      	b.n	800245e <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002388:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	441a      	add	r2, r3
 800239a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800239e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d024      	beq.n	8002416 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	3302      	adds	r3, #2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80023f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02e      	beq.n	800245e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002406:	6959      	ldr	r1, [r3, #20]
 8002408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800240a:	891a      	ldrh	r2, [r3, #8]
 800240c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002410:	f005 fdc4 	bl	8007f9c <USB_ReadPMA>
 8002414:	e023      	b.n	800245e <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	3306      	adds	r3, #6
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002442:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002450:	6959      	ldr	r1, [r3, #20]
 8002452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002454:	895a      	ldrh	r2, [r3, #10]
 8002456:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800245a:	f005 fd9f 	bl	8007f9c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800245e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002466:	441a      	add	r2, r3
 8002468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800246c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002474:	441a      	add	r2, r3
 8002476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002478:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800247a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <PCD_EP_ISR_Handler+0x51a>
 8002482:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	429a      	cmp	r2, r3
 800248c:	d206      	bcs.n	800249c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800248e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f00b ff07 	bl	800e2a8 <HAL_PCD_DataOutStageCallback>
 800249a:	e005      	b.n	80024a8 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 f846 	bl	8006534 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8123 	beq.w	80026fc <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80024b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80024e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	441a      	add	r2, r3
 80024f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80024fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002502:	b29b      	uxth	r3, r3
 8002504:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002508:	78db      	ldrb	r3, [r3, #3]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 80a2 	bne.w	8002654 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8002510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002518:	7b1b      	ldrb	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8093 	beq.w	8002646 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002520:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d046      	beq.n	80025ba <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800252c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d126      	bne.n	8002582 <PCD_EP_ISR_Handler+0x60e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	4413      	add	r3, r2
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
 800254c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	011a      	lsls	r2, r3, #4
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	4413      	add	r3, r2
 8002556:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002566:	b29a      	uxth	r2, r3
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257a:	b29a      	uxth	r2, r3
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	e061      	b.n	8002646 <PCD_EP_ISR_Handler+0x6d2>
 8002582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d15d      	bne.n	8002646 <PCD_EP_ISR_Handler+0x6d2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259e:	4413      	add	r3, r2
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	011a      	lsls	r2, r3, #4
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025aa:	4413      	add	r3, r2
 80025ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b4:	2200      	movs	r2, #0
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e045      	b.n	8002646 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d126      	bne.n	8002616 <PCD_EP_ISR_Handler+0x6a2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025dc:	4413      	add	r3, r2
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	011a      	lsls	r2, r3, #4
 80025e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e8:	4413      	add	r3, r2
 80025ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800260a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260e:	b29a      	uxth	r2, r3
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e017      	b.n	8002646 <PCD_EP_ISR_Handler+0x6d2>
 8002616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d113      	bne.n	8002646 <PCD_EP_ISR_Handler+0x6d2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800262c:	4413      	add	r3, r2
 800262e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	011a      	lsls	r2, r3, #4
 8002636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002638:	4413      	add	r3, r2
 800263a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800263e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002642:	2200      	movs	r2, #0
 8002644:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f00b fe46 	bl	800e2de <HAL_PCD_DataInStageCallback>
 8002652:	e053      	b.n	80026fc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002654:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d146      	bne.n	80026ee <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	3302      	adds	r3, #2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002688:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800268c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002694:	429a      	cmp	r2, r3
 8002696:	d907      	bls.n	80026a8 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8002698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026a0:	1ad2      	subs	r2, r2, r3
 80026a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a4:	619a      	str	r2, [r3, #24]
 80026a6:	e002      	b.n	80026ae <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 80026a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f00b fe0e 	bl	800e2de <HAL_PCD_DataInStageCallback>
 80026c2:	e01b      	b.n	80026fc <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80026c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026cc:	441a      	add	r2, r3
 80026ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80026d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80026da:	441a      	add	r2, r3
 80026dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026de:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 ff24 	bl	8006534 <USB_EPStartXfer>
 80026ec:	e006      	b.n	80026fc <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026f2:	461a      	mov	r2, r3
 80026f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f91b 	bl	8002932 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002704:	b29b      	uxth	r3, r3
 8002706:	b21b      	sxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	f6ff ac38 	blt.w	8001f7e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3758      	adds	r7, #88	@ 0x58
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	4613      	mov	r3, r2
 8002724:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d07e      	beq.n	800282e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	3302      	adds	r3, #2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	8b7b      	ldrh	r3, [r7, #26]
 8002760:	429a      	cmp	r2, r3
 8002762:	d306      	bcc.n	8002772 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	8b7b      	ldrh	r3, [r7, #26]
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	619a      	str	r2, [r3, #24]
 8002770:	e002      	b.n	8002778 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d123      	bne.n	80027c8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800279a:	833b      	strh	r3, [r7, #24]
 800279c:	8b3b      	ldrh	r3, [r7, #24]
 800279e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80027a2:	833b      	strh	r3, [r7, #24]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	8b3b      	ldrh	r3, [r7, #24]
 80027b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01f      	beq.n	8002812 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ec:	82fb      	strh	r3, [r7, #22]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	8afb      	ldrh	r3, [r7, #22]
 80027fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800280a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800280e:	b29b      	uxth	r3, r3
 8002810:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002812:	8b7b      	ldrh	r3, [r7, #26]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8087 	beq.w	8002928 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6959      	ldr	r1, [r3, #20]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	891a      	ldrh	r2, [r3, #8]
 8002826:	8b7b      	ldrh	r3, [r7, #26]
 8002828:	f005 fbb8 	bl	8007f9c <USB_ReadPMA>
 800282c:	e07c      	b.n	8002928 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	3306      	adds	r3, #6
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002856:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	8b7b      	ldrh	r3, [r7, #26]
 800285e:	429a      	cmp	r2, r3
 8002860:	d306      	bcc.n	8002870 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	8b7b      	ldrh	r3, [r7, #26]
 8002868:	1ad2      	subs	r2, r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	619a      	str	r2, [r3, #24]
 800286e:	e002      	b.n	8002876 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d123      	bne.n	80028c6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002898:	83fb      	strh	r3, [r7, #30]
 800289a:	8bfb      	ldrh	r3, [r7, #30]
 800289c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80028a0:	83fb      	strh	r3, [r7, #30]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	441a      	add	r2, r3
 80028b0:	8bfb      	ldrh	r3, [r7, #30]
 80028b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11f      	bne.n	8002910 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	83bb      	strh	r3, [r7, #28]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	441a      	add	r2, r3
 80028fa:	8bbb      	ldrh	r3, [r7, #28]
 80028fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002908:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800290c:	b29b      	uxth	r3, r3
 800290e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002910:	8b7b      	ldrh	r3, [r7, #26]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	6959      	ldr	r1, [r3, #20]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	895a      	ldrh	r2, [r3, #10]
 8002922:	8b7b      	ldrh	r3, [r7, #26]
 8002924:	f005 fb3a 	bl	8007f9c <USB_ReadPMA>
    }
  }

  return count;
 8002928:	8b7b      	ldrh	r3, [r7, #26]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b0a4      	sub	sp, #144	@ 0x90
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	4613      	mov	r3, r2
 800293e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 81dd 	beq.w	8002d06 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	3302      	adds	r3, #2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002974:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	699a      	ldr	r2, [r3, #24]
 800297c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002980:	429a      	cmp	r2, r3
 8002982:	d907      	bls.n	8002994 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800298c:	1ad2      	subs	r2, r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	619a      	str	r2, [r3, #24]
 8002992:	e002      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 80b9 	bne.w	8002b16 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d126      	bne.n	80029fa <HAL_PCD_EP_DB_Transmit+0xc8>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	4413      	add	r3, r2
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	011a      	lsls	r2, r3, #4
 80029ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029cc:	4413      	add	r3, r2
 80029ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029de:	b29a      	uxth	r2, r3
 80029e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e2:	801a      	strh	r2, [r3, #0]
 80029e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f6:	801a      	strh	r2, [r3, #0]
 80029f8:	e01a      	b.n	8002a30 <HAL_PCD_EP_DB_Transmit+0xfe>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	785b      	ldrb	r3, [r3, #1]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d116      	bne.n	8002a30 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a16:	4413      	add	r3, r2
 8002a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	011a      	lsls	r2, r3, #4
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	4413      	add	r3, r2
 8002a24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d126      	bne.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	011a      	lsls	r2, r3, #4
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	e017      	b.n	8002abc <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d113      	bne.n	8002abc <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	4413      	add	r3, r2
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	011a      	lsls	r2, r3, #4
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	4413      	add	r3, r2
 8002ab0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f00b fc0b 	bl	800e2de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 82fc 	beq.w	80030cc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aee:	82fb      	strh	r3, [r7, #22]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	8afb      	ldrh	r3, [r7, #22]
 8002b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	8013      	strh	r3, [r2, #0]
 8002b14:	e2da      	b.n	80030cc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d021      	beq.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b3a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	441a      	add	r2, r3
 8002b4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	f040 82ae 	bne.w	80030cc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b78:	441a      	add	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b86:	441a      	add	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6a1a      	ldr	r2, [r3, #32]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d30b      	bcc.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba8:	1ad2      	subs	r2, r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	621a      	str	r2, [r3, #32]
 8002bae:	e017      	b.n	8002be0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d108      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002bb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002bbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002bc8:	e00a      	b.n	8002be0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	785b      	ldrb	r3, [r3, #1]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d165      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x382>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfc:	4413      	add	r3, r2
 8002bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	011a      	lsls	r2, r3, #4
 8002c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c08:	4413      	add	r3, r2
 8002c0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1e:	801a      	strh	r2, [r3, #0]
 8002c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c24:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c26:	d91d      	bls.n	8002c64 <HAL_PCD_EP_DB_Transmit+0x332>
 8002c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x310>
 8002c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	029b      	lsls	r3, r3, #10
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4313      	orrs	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c60:	801a      	strh	r2, [r3, #0]
 8002c62:	e044      	b.n	8002cee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x350>
 8002c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	e035      	b.n	8002cee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x36a>
 8002c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c98:	3301      	adds	r3, #1
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	e01c      	b.n	8002cee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	785b      	ldrb	r3, [r3, #1]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d118      	bne.n	8002cee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cd0:	4413      	add	r3, r2
 8002cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	011a      	lsls	r2, r3, #4
 8002cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cdc:	4413      	add	r3, r2
 8002cde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6959      	ldr	r1, [r3, #20]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	891a      	ldrh	r2, [r3, #8]
 8002cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f005 f907 	bl	8007f12 <USB_WritePMA>
 8002d04:	e1e2      	b.n	80030cc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3306      	adds	r3, #6
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d2e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d307      	bcc.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	619a      	str	r2, [r3, #24]
 8002d4c:	e002      	b.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 80c0 	bne.w	8002ede <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d126      	bne.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x482>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d7a:	4413      	add	r3, r2
 8002d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	011a      	lsls	r2, r3, #4
 8002d84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d86:	4413      	add	r3, r2
 8002d88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	e01a      	b.n	8002dea <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d116      	bne.n	8002dea <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dd0:	4413      	add	r3, r2
 8002dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	011a      	lsls	r2, r3, #4
 8002dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ddc:	4413      	add	r3, r2
 8002dde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002de2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002de4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002de6:	2200      	movs	r2, #0
 8002de8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	677b      	str	r3, [r7, #116]	@ 0x74
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d12b      	bne.n	8002e50 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e0c:	4413      	add	r3, r2
 8002e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	011a      	lsls	r2, r3, #4
 8002e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e18:	4413      	add	r3, r2
 8002e1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e4c:	801a      	strh	r2, [r3, #0]
 8002e4e:	e017      	b.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d113      	bne.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e66:	4413      	add	r3, r2
 8002e68:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	011a      	lsls	r2, r3, #4
 8002e70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e72:	4413      	add	r3, r2
 8002e74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e78:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f00b fa29 	bl	800e2de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 811a 	bne.w	80030cc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	441a      	add	r2, r3
 8002ec4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ed0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	8013      	strh	r3, [r2, #0]
 8002edc:	e0f6      	b.n	80030cc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d121      	bne.n	8002f2c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	441a      	add	r2, r3
 8002f14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	f040 80ca 	bne.w	80030cc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f40:	441a      	add	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f4e:	441a      	add	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d30b      	bcc.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	621a      	str	r2, [r3, #32]
 8002f76:	e017      	b.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d108      	bne.n	8002f92 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002f80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002f90:	e00a      	b.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d165      	bne.n	8003082 <HAL_PCD_EP_DB_Transmit+0x750>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fca:	4413      	add	r3, r2
 8002fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	011a      	lsls	r2, r3, #4
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ff2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ff4:	d91d      	bls.n	8003032 <HAL_PCD_EP_DB_Transmit+0x700>
 8002ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_PCD_EP_DB_Transmit+0x6de>
 800300a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800300c:	3b01      	subs	r3, #1
 800300e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29a      	uxth	r2, r3
 8003016:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003018:	b29b      	uxth	r3, r3
 800301a:	029b      	lsls	r3, r3, #10
 800301c:	b29b      	uxth	r3, r3
 800301e:	4313      	orrs	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302a:	b29a      	uxth	r2, r3
 800302c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	e041      	b.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_PCD_EP_DB_Transmit+0x71e>
 800303a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003048:	b29a      	uxth	r2, r3
 800304a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800304c:	801a      	strh	r2, [r3, #0]
 800304e:	e032      	b.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003058:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_PCD_EP_DB_Transmit+0x738>
 8003064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003066:	3301      	adds	r3, #1
 8003068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800306a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	b29a      	uxth	r2, r3
 8003070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003072:	b29b      	uxth	r3, r3
 8003074:	029b      	lsls	r3, r3, #10
 8003076:	b29b      	uxth	r3, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	b29a      	uxth	r2, r3
 800307c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	e019      	b.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	785b      	ldrb	r3, [r3, #1]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d115      	bne.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x784>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003098:	4413      	add	r3, r2
 800309a:	657b      	str	r3, [r7, #84]	@ 0x54
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	011a      	lsls	r2, r3, #4
 80030a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a4:	4413      	add	r3, r2
 80030a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80030ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6959      	ldr	r1, [r3, #20]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	895a      	ldrh	r2, [r3, #10]
 80030c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f004 ff23 	bl	8007f12 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030e6:	82bb      	strh	r3, [r7, #20]
 80030e8:	8abb      	ldrh	r3, [r7, #20]
 80030ea:	f083 0310 	eor.w	r3, r3, #16
 80030ee:	82bb      	strh	r3, [r7, #20]
 80030f0:	8abb      	ldrh	r3, [r7, #20]
 80030f2:	f083 0320 	eor.w	r3, r3, #32
 80030f6:	82bb      	strh	r3, [r7, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	8abb      	ldrh	r3, [r7, #20]
 8003108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800310c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003118:	b29b      	uxth	r3, r3
 800311a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3790      	adds	r7, #144	@ 0x90
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003126:	b480      	push	{r7}
 8003128:	b087      	sub	sp, #28
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	817b      	strh	r3, [r7, #10]
 8003134:	4613      	mov	r3, r2
 8003136:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003144:	897b      	ldrh	r3, [r7, #10]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e009      	b.n	8003170 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800315c:	897a      	ldrh	r2, [r7, #10]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	b29a      	uxth	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	80da      	strh	r2, [r3, #6]
 8003184:	e00b      	b.n	800319e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2201      	movs	r2, #1
 800318a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	b29a      	uxth	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b29a      	uxth	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e272      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8087 	beq.w	80032da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031cc:	4b92      	ldr	r3, [pc, #584]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d00c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d112      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
 80031e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f0:	d10b      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	4b89      	ldr	r3, [pc, #548]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d06c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x12c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d168      	bne.n	80032d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e24c      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x76>
 8003214:	4b80      	ldr	r3, [pc, #512]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7f      	ldr	r2, [pc, #508]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800321a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	e02e      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x98>
 800322a:	4b7b      	ldr	r3, [pc, #492]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7a      	ldr	r2, [pc, #488]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b78      	ldr	r3, [pc, #480]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a77      	ldr	r2, [pc, #476]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800323c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0xbc>
 800324e:	4b72      	ldr	r3, [pc, #456]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a71      	ldr	r2, [pc, #452]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b6f      	ldr	r3, [pc, #444]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6e      	ldr	r2, [pc, #440]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003268:	4b6b      	ldr	r3, [pc, #428]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6a      	ldr	r2, [pc, #424]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b68      	ldr	r3, [pc, #416]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a67      	ldr	r2, [pc, #412]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd ff52 	bl	8001130 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd ff4e 	bl	8001130 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	@ 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e200      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xe4>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd ff3e 	bl	8001130 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd ff3a 	bl	8001130 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	@ 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1ec      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x10c>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032f2:	4b49      	ldr	r3, [pc, #292]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x18c>
 80032fe:	4b46      	ldr	r3, [pc, #280]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b43      	ldr	r3, [pc, #268]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x176>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1c0      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4939      	ldr	r1, [pc, #228]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b36      	ldr	r3, [pc, #216]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fd fef3 	bl	8001130 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334e:	f7fd feef 	bl	8001130 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1a1      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4927      	ldr	r1, [pc, #156]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003382:	4b26      	ldr	r3, [pc, #152]	@ (800341c <HAL_RCC_OscConfig+0x270>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fd fed2 	bl	8001130 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd fece 	bl	8001130 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e180      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03a      	beq.n	8003430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d019      	beq.n	80033f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b17      	ldr	r3, [pc, #92]	@ (8003420 <HAL_RCC_OscConfig+0x274>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fd feb2 	bl	8001130 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fd feae 	bl	8001130 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e160      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f000 fabc 	bl	800396c <RCC_Delay>
 80033f4:	e01c      	b.n	8003430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <HAL_RCC_OscConfig+0x274>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fe98 	bl	8001130 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003402:	e00f      	b.n	8003424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fd fe94 	bl	8001130 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d908      	bls.n	8003424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e146      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	42420000 	.word	0x42420000
 8003420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b92      	ldr	r3, [pc, #584]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e9      	bne.n	8003404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a6 	beq.w	800358a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b8b      	ldr	r3, [pc, #556]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a87      	ldr	r2, [pc, #540]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003458:	61d3      	str	r3, [r2, #28]
 800345a:	4b85      	ldr	r3, [pc, #532]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b82      	ldr	r3, [pc, #520]	@ (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b7f      	ldr	r3, [pc, #508]	@ (8003674 <HAL_RCC_OscConfig+0x4c8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7e      	ldr	r2, [pc, #504]	@ (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fd fe55 	bl	8001130 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fd fe51 	bl	8001130 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b64      	cmp	r3, #100	@ 0x64
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e103      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4b75      	ldr	r3, [pc, #468]	@ (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x312>
 80034b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	e02d      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x334>
 80034c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a69      	ldr	r2, [pc, #420]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	4b67      	ldr	r3, [pc, #412]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a66      	ldr	r2, [pc, #408]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	e01c      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d10c      	bne.n	8003502 <HAL_RCC_OscConfig+0x356>
 80034e8:	4b61      	ldr	r3, [pc, #388]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a60      	ldr	r2, [pc, #384]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	e00b      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 8003502:	4b5b      	ldr	r3, [pc, #364]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a5a      	ldr	r2, [pc, #360]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4b58      	ldr	r3, [pc, #352]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a57      	ldr	r2, [pc, #348]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d015      	beq.n	800354e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003522:	f7fd fe05 	bl	8001130 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fe01 	bl	8001130 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0b1      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	4b4b      	ldr	r3, [pc, #300]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ee      	beq.n	800352a <HAL_RCC_OscConfig+0x37e>
 800354c:	e014      	b.n	8003578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fd fdef 	bl	8001130 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fd fdeb 	bl	8001130 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e09b      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	4b40      	ldr	r3, [pc, #256]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4b3c      	ldr	r3, [pc, #240]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4a3b      	ldr	r2, [pc, #236]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8087 	beq.w	80036a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003594:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d061      	beq.n	8003664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d146      	bne.n	8003636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a8:	4b33      	ldr	r3, [pc, #204]	@ (8003678 <HAL_RCC_OscConfig+0x4cc>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd fdbf 	bl	8001130 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fd fdbb 	bl	8001130 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e06d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c8:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	4921      	ldr	r1, [pc, #132]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a19      	ldr	r1, [r3, #32]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	430b      	orrs	r3, r1
 8003602:	491b      	ldr	r1, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_OscConfig+0x4cc>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fd fd8f 	bl	8001130 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7fd fd8b 	bl	8001130 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e03d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x46a>
 8003634:	e035      	b.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd fd78 	bl	8001130 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fd fd74 	bl	8001130 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e026      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x498>
 8003662:	e01e      	b.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e019      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_RCC_OscConfig+0x500>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0d0      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d910      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b67      	ldr	r3, [pc, #412]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 0207 	bic.w	r2, r3, #7
 80036da:	4965      	ldr	r1, [pc, #404]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b63      	ldr	r3, [pc, #396]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b8      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b59      	ldr	r3, [pc, #356]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a58      	ldr	r2, [pc, #352]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b53      	ldr	r3, [pc, #332]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a52      	ldr	r2, [pc, #328]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800372e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b50      	ldr	r3, [pc, #320]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494d      	ldr	r1, [pc, #308]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d040      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e073      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b3d      	ldr	r3, [pc, #244]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06b      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b39      	ldr	r3, [pc, #228]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4936      	ldr	r1, [pc, #216]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a0:	f7fd fcc6 	bl	8001130 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fd fcc2 	bl	8001130 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e053      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d210      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	4922      	ldr	r1, [pc, #136]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e032      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4916      	ldr	r1, [pc, #88]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800382a:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490e      	ldr	r1, [pc, #56]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f82d 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490a      	ldr	r1, [pc, #40]	@ (8003878 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a09      	ldr	r2, [pc, #36]	@ (800387c <HAL_RCC_ClockConfig+0x1cc>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800385a:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <HAL_RCC_ClockConfig+0x1d0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fc24 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40022000 	.word	0x40022000
 8003874:	40021000 	.word	0x40021000
 8003878:	0800f4f4 	.word	0x0800f4f4
 800387c:	20000000 	.word	0x20000000
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003888:	4b03      	ldr	r3, [pc, #12]	@ (8003898 <HAL_RCC_EnableCSS+0x14>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	4242004c 	.word	0x4242004c

0800389c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d002      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x30>
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0x36>
 80038ca:	e027      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038cc:	4b19      	ldr	r3, [pc, #100]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ce:	613b      	str	r3, [r7, #16]
      break;
 80038d0:	e027      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	0c9b      	lsrs	r3, r3, #18
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x94>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	0c5b      	lsrs	r3, r3, #17
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	4a11      	ldr	r2, [pc, #68]	@ (800393c <HAL_RCC_GetSysClockFreq+0xa0>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fe:	fb03 f202 	mul.w	r2, r3, r2
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e004      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0c      	ldr	r2, [pc, #48]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	613b      	str	r3, [r7, #16]
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x98>)
 800391e:	613b      	str	r3, [r7, #16]
      break;
 8003920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003922:	693b      	ldr	r3, [r7, #16]
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	007a1200 	.word	0x007a1200
 8003938:	0800f504 	.word	0x0800f504
 800393c:	0800f514 	.word	0x0800f514
 8003940:	003d0900 	.word	0x003d0900

08003944 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003948:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <HAL_RCC_NMI_IRQHandler+0x20>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	2b80      	cmp	r3, #128	@ 0x80
 8003952:	d104      	bne.n	800395e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003954:	f000 f828 	bl	80039a8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <HAL_RCC_NMI_IRQHandler+0x24>)
 800395a:	2280      	movs	r2, #128	@ 0x80
 800395c:	701a      	strb	r2, [r3, #0]
  }
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40021000 	.word	0x40021000
 8003968:	4002100a 	.word	0x4002100a

0800396c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003974:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <RCC_Delay+0x34>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <RCC_Delay+0x38>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0a5b      	lsrs	r3, r3, #9
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003988:	bf00      	nop
  }
  while (Delay --);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	60fa      	str	r2, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f9      	bne.n	8003988 <RCC_Delay+0x1c>
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	20000000 	.word	0x20000000
 80039a4:	10624dd3 	.word	0x10624dd3

080039a8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d07d      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	61d3      	str	r3, [r2, #28]
 80039ec:	4b49      	ldr	r3, [pc, #292]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	4b46      	ldr	r3, [pc, #280]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d118      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a08:	4b43      	ldr	r3, [pc, #268]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a42      	ldr	r2, [pc, #264]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a14:	f7fd fb8c 	bl	8001130 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	e008      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fd fb88 	bl	8001130 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e06d      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a3a:	4b36      	ldr	r3, [pc, #216]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d027      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a58:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a62:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a68:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a6e:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d014      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fb57 	bl	8001130 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fd fb53 	bl	8001130 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e036      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4917      	ldr	r1, [pc, #92]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	490b      	ldr	r1, [pc, #44]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4904      	ldr	r1, [pc, #16]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42420440 	.word	0x42420440

08003b20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e022      	b.n	8003b78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fd f975 	bl	8000e34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f814 	bl	8003b80 <HAL_SD_InitCard>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e00a      	b.n	8003b78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	b08e      	sub	sp, #56	@ 0x38
 8003b84:	af04      	add	r7, sp, #16
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003b9c:	2376      	movs	r3, #118	@ 0x76
 8003b9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681d      	ldr	r5, [r3, #0]
 8003ba4:	466c      	mov	r4, sp
 8003ba6:	f107 0314 	add.w	r3, r7, #20
 8003baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f001 f93c 	bl	8004e36 <SDIO_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e04f      	b.n	8003c70 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003bd0:	4b29      	ldr	r3, [pc, #164]	@ (8003c78 <HAL_SD_InitCard+0xf8>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 f971 	bl	8004ec2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003be0:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_SD_InitCard+0xf8>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003be6:	2002      	movs	r0, #2
 8003be8:	f7fd faac 	bl	8001144 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 ff03 	bl	80049f8 <SD_PowerON>
 8003bf2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e02e      	b.n	8003c70 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fe22 	bl	800485c <SD_InitCard>
 8003c18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00b      	beq.n	8003c38 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e01b      	b.n	8003c70 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 f9ca 	bl	8004fda <SDMMC_CmdBlockLength>
 8003c46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00f      	beq.n	8003c6e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <HAL_SD_InitCard+0xfc>)
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3728      	adds	r7, #40	@ 0x28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bdb0      	pop	{r4, r5, r7, pc}
 8003c78:	423000a0 	.word	0x423000a0
 8003c7c:	004005ff 	.word	0x004005ff

08003c80 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b092      	sub	sp, #72	@ 0x48
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c8e:	f7fd fa4f 	bl	8001130 <HAL_GetTick>
 8003c92:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1bd      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	f040 81b0 	bne.w	8004020 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003cc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	441a      	add	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d907      	bls.n	8003ce4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e1a4      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	025b      	lsls	r3, r3, #9
 8003d00:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	025b      	lsls	r3, r3, #9
 8003d0c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d0e:	2390      	movs	r3, #144	@ 0x90
 8003d10:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d12:	2302      	movs	r3, #2
 8003d14:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f107 0214 	add.w	r2, r7, #20
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 f92b 	bl	8004f84 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d90a      	bls.n	8003d4a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2202      	movs	r2, #2
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 f98e 	bl	8005062 <SDMMC_CmdReadMultiBlock>
 8003d46:	6478      	str	r0, [r7, #68]	@ 0x44
 8003d48:	e009      	b.n	8003d5e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 f961 	bl	800501e <SDMMC_CmdReadSingleBlock>
 8003d5c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a7a      	ldr	r2, [pc, #488]	@ (8003f54 <HAL_SD_ReadBlocks+0x2d4>)
 8003d6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e151      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003d8e:	e061      	b.n	8003e54 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d03c      	beq.n	8003e18 <HAL_SD_ReadBlocks+0x198>
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d039      	beq.n	8003e18 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003da8:	e033      	b.n	8003e12 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 f86b 	bl	8004e8a <SDIO_ReadFIFO>
 8003db4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dec:	3301      	adds	r3, #1
 8003dee:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df2:	3b01      	subs	r3, #1
 8003df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df8:	0e1b      	lsrs	r3, r3, #24
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e02:	3301      	adds	r3, #1
 8003e04:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8003e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e0e:	3301      	adds	r3, #1
 8003e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e14:	2b07      	cmp	r3, #7
 8003e16:	d9c8      	bls.n	8003daa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e18:	f7fd f98a 	bl	8001130 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d902      	bls.n	8003e2e <HAL_SD_ReadBlocks+0x1ae>
 8003e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d112      	bne.n	8003e54 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <HAL_SD_ReadBlocks+0x2d4>)
 8003e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0ec      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e5a:	f240 332a 	movw	r3, #810	@ 0x32a
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d095      	beq.n	8003d90 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d022      	beq.n	8003eb8 <HAL_SD_ReadBlocks+0x238>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d91f      	bls.n	8003eb8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d01b      	beq.n	8003eb8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 f953 	bl	8005130 <SDMMC_CmdStopTransfer>
 8003e8a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d012      	beq.n	8003eb8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2f      	ldr	r2, [pc, #188]	@ (8003f54 <HAL_SD_ReadBlocks+0x2d4>)
 8003e98:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0ba      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d012      	beq.n	8003eec <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a22      	ldr	r2, [pc, #136]	@ (8003f54 <HAL_SD_ReadBlocks+0x2d4>)
 8003ecc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed2:	f043 0208 	orr.w	r2, r3, #8
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0a0      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a15      	ldr	r2, [pc, #84]	@ (8003f54 <HAL_SD_ReadBlocks+0x2d4>)
 8003f00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e086      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d063      	beq.n	8003ff6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a08      	ldr	r2, [pc, #32]	@ (8003f54 <HAL_SD_ReadBlocks+0x2d4>)
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e06c      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
 8003f54:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 ff94 	bl	8004e8a <SDIO_ReadFIFO>
 8003f62:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6e:	3301      	adds	r3, #1
 8003f70:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	3b01      	subs	r3, #1
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f84:	3301      	adds	r3, #1
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	0e1b      	lsrs	r3, r3, #24
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003fba:	f7fd f8b9 	bl	8001130 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d902      	bls.n	8003fd0 <HAL_SD_ReadBlocks+0x350>
 8003fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d112      	bne.n	8003ff6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a18      	ldr	r2, [pc, #96]	@ (8004038 <HAL_SD_ReadBlocks+0x3b8>)
 8003fd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e01b      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_SD_ReadBlocks+0x38a>
 8004004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1a6      	bne.n	8003f58 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004012:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e006      	b.n	800402e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3748      	adds	r7, #72	@ 0x48
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	004005ff 	.word	0x004005ff

0800403c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b092      	sub	sp, #72	@ 0x48
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800404a:	f7fd f871 	bl	8001130 <HAL_GetTick>
 800404e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e166      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	f040 8159 	bne.w	800432e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	441a      	add	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408c:	429a      	cmp	r2, r3
 800408e:	d907      	bls.n	80040a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e14d      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2203      	movs	r2, #3
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2200      	movs	r2, #0
 80040ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d002      	beq.n	80040be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80040b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ba:	025b      	lsls	r3, r3, #9
 80040bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040be:	f04f 33ff 	mov.w	r3, #4294967295
 80040c2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	025b      	lsls	r3, r3, #9
 80040c8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80040ca:	2390      	movs	r3, #144	@ 0x90
 80040cc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80040d6:	2301      	movs	r3, #1
 80040d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f107 0218 	add.w	r2, r7, #24
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 ff4d 	bl	8004f84 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d90a      	bls.n	8004106 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fff4 	bl	80050ea <SDMMC_CmdWriteMultiBlock>
 8004102:	6478      	str	r0, [r7, #68]	@ 0x44
 8004104:	e009      	b.n	800411a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2210      	movs	r2, #16
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004112:	4618      	mov	r0, r3
 8004114:	f000 ffc7 	bl	80050a6 <SDMMC_CmdWriteSingleBlock>
 8004118:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800411a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411c:	2b00      	cmp	r3, #0
 800411e:	d012      	beq.n	8004146 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a87      	ldr	r2, [pc, #540]	@ (8004344 <HAL_SD_WriteBlocks+0x308>)
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800412c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412e:	431a      	orrs	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0fa      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800414a:	e065      	b.n	8004218 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d040      	beq.n	80041dc <HAL_SD_WriteBlocks+0x1a0>
 800415a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03d      	beq.n	80041dc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004160:	2300      	movs	r3, #0
 8004162:	643b      	str	r3, [r7, #64]	@ 0x40
 8004164:	e037      	b.n	80041d6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8004166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800416c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416e:	3301      	adds	r3, #1
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004174:	3b01      	subs	r3, #1
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	021a      	lsls	r2, r3, #8
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004186:	3301      	adds	r3, #1
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418c:	3b01      	subs	r3, #1
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800419c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419e:	3301      	adds	r3, #1
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80041a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a4:	3b01      	subs	r3, #1
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80041a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	061a      	lsls	r2, r3, #24
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b6:	3301      	adds	r3, #1
 80041b8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80041ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041bc:	3b01      	subs	r3, #1
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f107 0214 	add.w	r2, r7, #20
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fe69 	bl	8004ea2 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80041d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d2:	3301      	adds	r3, #1
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d8:	2b07      	cmp	r3, #7
 80041da:	d9c4      	bls.n	8004166 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80041dc:	f7fc ffa8 	bl	8001130 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d902      	bls.n	80041f2 <HAL_SD_WriteBlocks+0x1b6>
 80041ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d112      	bne.n	8004218 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a53      	ldr	r2, [pc, #332]	@ (8004344 <HAL_SD_WriteBlocks+0x308>)
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e091      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800421e:	f240 331a 	movw	r3, #794	@ 0x31a
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d091      	beq.n	800414c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d022      	beq.n	800427c <HAL_SD_WriteBlocks+0x240>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d91f      	bls.n	800427c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004240:	2b03      	cmp	r3, #3
 8004242:	d01b      	beq.n	800427c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 ff71 	bl	8005130 <SDMMC_CmdStopTransfer>
 800424e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004252:	2b00      	cmp	r3, #0
 8004254:	d012      	beq.n	800427c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3a      	ldr	r2, [pc, #232]	@ (8004344 <HAL_SD_WriteBlocks+0x308>)
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e05f      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a2d      	ldr	r2, [pc, #180]	@ (8004344 <HAL_SD_WriteBlocks+0x308>)
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004296:	f043 0208 	orr.w	r2, r3, #8
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e045      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d012      	beq.n	80042e4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a20      	ldr	r2, [pc, #128]	@ (8004344 <HAL_SD_WriteBlocks+0x308>)
 80042c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e02b      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d012      	beq.n	8004318 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a13      	ldr	r2, [pc, #76]	@ (8004344 <HAL_SD_WriteBlocks+0x308>)
 80042f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	f043 0210 	orr.w	r2, r3, #16
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e011      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004320:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e006      	b.n	800433c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3748      	adds	r7, #72	@ 0x48
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	004005ff 	.word	0x004005ff

08004348 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004356:	0f9b      	lsrs	r3, r3, #30
 8004358:	b2da      	uxtb	r2, r3
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004362:	0e9b      	lsrs	r3, r3, #26
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	b2da      	uxtb	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004374:	0e1b      	lsrs	r3, r3, #24
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	b2da      	uxtb	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004386:	0c1b      	lsrs	r3, r3, #16
 8004388:	b2da      	uxtb	r2, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	b2da      	uxtb	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043a8:	0d1b      	lsrs	r3, r3, #20
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c6:	0bdb      	lsrs	r3, r3, #15
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d8:	0b9b      	lsrs	r3, r3, #14
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043ea:	0b5b      	lsrs	r3, r3, #13
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043fc:	0b1b      	lsrs	r3, r3, #12
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2200      	movs	r2, #0
 800440e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004414:	2b00      	cmp	r3, #0
 8004416:	d163      	bne.n	80044e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004422:	4013      	ands	r3, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004428:	0f92      	lsrs	r2, r2, #30
 800442a:	431a      	orrs	r2, r3
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004434:	0edb      	lsrs	r3, r3, #27
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	b2da      	uxtb	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004446:	0e1b      	lsrs	r3, r3, #24
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	b2da      	uxtb	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004458:	0d5b      	lsrs	r3, r3, #21
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	b2da      	uxtb	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800446a:	0c9b      	lsrs	r3, r3, #18
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	b2da      	uxtb	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800447c:	0bdb      	lsrs	r3, r3, #15
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	b2da      	uxtb	r2, r3
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	7e1b      	ldrb	r3, [r3, #24]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	3302      	adds	r3, #2
 80044a0:	2201      	movs	r2, #1
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80044aa:	fb03 f202 	mul.w	r2, r3, r2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	7a1b      	ldrb	r3, [r3, #8]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f003 030f 	and.w	r3, r3, #15
 80044bc:	2201      	movs	r2, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80044cc:	0a52      	lsrs	r2, r2, #9
 80044ce:	fb03 f202 	mul.w	r2, r3, r2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80044de:	e031      	b.n	8004544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d11d      	bne.n	8004524 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	431a      	orrs	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	3301      	adds	r3, #1
 8004504:	029a      	lsls	r2, r3, #10
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004518:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60
 8004522:	e00f      	b.n	8004544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a58      	ldr	r2, [pc, #352]	@ (800468c <HAL_SD_GetCardCSD+0x344>)
 800452a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e09d      	b.n	8004680 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004548:	0b9b      	lsrs	r3, r3, #14
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800455a:	09db      	lsrs	r3, r3, #7
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004562:	b2da      	uxtb	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004572:	b2da      	uxtb	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457c:	0fdb      	lsrs	r3, r3, #31
 800457e:	b2da      	uxtb	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004588:	0f5b      	lsrs	r3, r3, #29
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	b2da      	uxtb	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	0e9b      	lsrs	r3, r3, #26
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ac:	0d9b      	lsrs	r3, r3, #22
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	0d5b      	lsrs	r3, r3, #21
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ee:	0bdb      	lsrs	r3, r3, #15
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	0b9b      	lsrs	r3, r3, #14
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	0b5b      	lsrs	r3, r3, #13
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	0b1b      	lsrs	r3, r3, #12
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463e:	0a9b      	lsrs	r3, r3, #10
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	b2da      	uxtb	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	0a1b      	lsrs	r3, r3, #8
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	b2da      	uxtb	r2, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800466e:	b2da      	uxtb	r2, r3
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	004005ff 	.word	0x004005ff

08004690 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
	...

080046e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80046e8:	b5b0      	push	{r4, r5, r7, lr}
 80046ea:	b08e      	sub	sp, #56	@ 0x38
 80046ec:	af04      	add	r7, sp, #16
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2203      	movs	r2, #3
 80046fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004704:	2b03      	cmp	r3, #3
 8004706:	d02e      	beq.n	8004766 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470e:	d106      	bne.n	800471e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	639a      	str	r2, [r3, #56]	@ 0x38
 800471c:	e029      	b.n	8004772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d10a      	bne.n	800473c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fa1c 	bl	8004b64 <SD_WideBus_Enable>
 800472c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	639a      	str	r2, [r3, #56]	@ 0x38
 800473a:	e01a      	b.n	8004772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa59 	bl	8004bfa <SD_WideBus_Disable>
 8004748:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	639a      	str	r2, [r3, #56]	@ 0x38
 8004756:	e00c      	b.n	8004772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	@ 0x38
 8004764:	e005      	b.n	8004772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a26      	ldr	r2, [pc, #152]	@ (8004818 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004780:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004790:	e01f      	b.n	80047d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681d      	ldr	r5, [r3, #0]
 80047b8:	466c      	mov	r4, sp
 80047ba:	f107 0314 	add.w	r3, r7, #20
 80047be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047c6:	f107 0308 	add.w	r3, r7, #8
 80047ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 fb32 	bl	8004e36 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fbfd 	bl	8004fda <SDMMC_CmdBlockLength>
 80047e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00c      	beq.n	8004802 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004818 <HAL_SD_ConfigWideBusOperation+0x130>)
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800480a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800480e:	4618      	mov	r0, r3
 8004810:	3728      	adds	r7, #40	@ 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bdb0      	pop	{r4, r5, r7, pc}
 8004816:	bf00      	nop
 8004818:	004005ff 	.word	0x004005ff

0800481c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f970 	bl	8004b14 <SD_SendStatus>
 8004834:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	0a5b      	lsrs	r3, r3, #9
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004852:	693b      	ldr	r3, [r7, #16]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b094      	sub	sp, #80	@ 0x50
 8004860:	af04      	add	r7, sp, #16
 8004862:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004864:	2301      	movs	r3, #1
 8004866:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fb35 	bl	8004edc <SDIO_GetPowerState>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004878:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800487c:	e0b8      	b.n	80049f0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	2b03      	cmp	r3, #3
 8004884:	d02f      	beq.n	80048e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fd5a 	bl	8005344 <SDMMC_CmdSendCID>
 8004890:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <SD_InitCard+0x40>
    {
      return errorstate;
 8004898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800489a:	e0a9      	b.n	80049f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fb5c 	bl	8004f60 <SDIO_GetResponse>
 80048a8:	4602      	mov	r2, r0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2104      	movs	r1, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fb53 	bl	8004f60 <SDIO_GetResponse>
 80048ba:	4602      	mov	r2, r0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2108      	movs	r1, #8
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fb4a 	bl	8004f60 <SDIO_GetResponse>
 80048cc:	4602      	mov	r2, r0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	210c      	movs	r1, #12
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fb41 	bl	8004f60 <SDIO_GetResponse>
 80048de:	4602      	mov	r2, r0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d00d      	beq.n	800490a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f107 020e 	add.w	r2, r7, #14
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fd60 	bl	80053be <SDMMC_CmdSetRelAdd>
 80048fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <SD_InitCard+0xae>
    {
      return errorstate;
 8004906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004908:	e072      	b.n	80049f0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	2b03      	cmp	r3, #3
 8004910:	d036      	beq.n	8004980 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fd2a 	bl	8005380 <SDMMC_CmdSendCSD>
 800492c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800492e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004936:	e05b      	b.n	80049f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb0e 	bl	8004f60 <SDIO_GetResponse>
 8004944:	4602      	mov	r2, r0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2104      	movs	r1, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fb05 	bl	8004f60 <SDIO_GetResponse>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2108      	movs	r1, #8
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fafc 	bl	8004f60 <SDIO_GetResponse>
 8004968:	4602      	mov	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	210c      	movs	r1, #12
 8004974:	4618      	mov	r0, r3
 8004976:	f000 faf3 	bl	8004f60 <SDIO_GetResponse>
 800497a:	4602      	mov	r2, r0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2104      	movs	r1, #4
 8004986:	4618      	mov	r0, r3
 8004988:	f000 faea 	bl	8004f60 <SDIO_GetResponse>
 800498c:	4603      	mov	r3, r0
 800498e:	0d1a      	lsrs	r2, r3, #20
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004994:	f107 0310 	add.w	r3, r7, #16
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff fcd4 	bl	8004348 <HAL_SD_GetCardCSD>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80049aa:	e021      	b.n	80049f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	2200      	movs	r2, #0
 80049b8:	461c      	mov	r4, r3
 80049ba:	4615      	mov	r5, r2
 80049bc:	4622      	mov	r2, r4
 80049be:	462b      	mov	r3, r5
 80049c0:	4608      	mov	r0, r1
 80049c2:	f000 fbd7 	bl	8005174 <SDMMC_CmdSelDesel>
 80049c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80049c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <SD_InitCard+0x176>
  {
    return errorstate;
 80049ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d0:	e00e      	b.n	80049f0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681d      	ldr	r5, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	466c      	mov	r4, sp
 80049da:	f103 0210 	add.w	r2, r3, #16
 80049de:	ca07      	ldmia	r2, {r0, r1, r2}
 80049e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049e4:	3304      	adds	r3, #4
 80049e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 fa24 	bl	8004e36 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3740      	adds	r7, #64	@ 0x40
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bdb0      	pop	{r4, r5, r7, pc}

080049f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fbd2 	bl	80051ba <SDMMC_CmdGoIdleState>
 8004a16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	e072      	b.n	8004b08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fbe5 	bl	80051f6 <SDMMC_CmdOperCond>
 8004a2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00d      	beq.n	8004a50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fbbb 	bl	80051ba <SDMMC_CmdGoIdleState>
 8004a44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	e05b      	b.n	8004b08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d137      	bne.n	8004ace <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fbe5 	bl	8005234 <SDMMC_CmdAppCommand>
 8004a6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d02d      	beq.n	8004ace <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004a76:	e047      	b.n	8004b08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fbd8 	bl	8005234 <SDMMC_CmdAppCommand>
 8004a84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	e03b      	b.n	8004b08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	491e      	ldr	r1, [pc, #120]	@ (8004b10 <SD_PowerON+0x118>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fbee 	bl	8005278 <SDMMC_CmdAppOperCommand>
 8004a9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004aa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004aa8:	e02e      	b.n	8004b08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fa55 	bl	8004f60 <SDIO_GetResponse>
 8004ab6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	0fdb      	lsrs	r3, r3, #31
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <SD_PowerON+0xcc>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <SD_PowerON+0xce>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]

    count++;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d802      	bhi.n	8004ade <SD_PowerON+0xe6>
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0cc      	beq.n	8004a78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d902      	bls.n	8004aee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004ae8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004aec:	e00c      	b.n	8004b08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
 8004afe:	e002      	b.n	8004b06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	c1100000 	.word	0xc1100000

08004b14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b28:	e018      	b.n	8004b5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 fc62 	bl	8005400 <SDMMC_CmdSendStatus>
 8004b3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	e009      	b.n	8004b5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fa06 	bl	8004f60 <SDIO_GetResponse>
 8004b54:	4602      	mov	r2, r0
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f9f0 	bl	8004f60 <SDIO_GetResponse>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b8a:	d102      	bne.n	8004b92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b90:	e02f      	b.n	8004bf2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f879 	bl	8004c90 <SD_FindSCR>
 8004b9e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	e023      	b.n	8004bf2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01c      	beq.n	8004bee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 fb37 	bl	8005234 <SDMMC_CmdAppCommand>
 8004bc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	e00f      	b.n	8004bf2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2102      	movs	r1, #2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fb70 	bl	80052be <SDMMC_CmdBusWidth>
 8004bde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	e003      	b.n	8004bf2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e001      	b.n	8004bf2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f9a5 	bl	8004f60 <SDIO_GetResponse>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c20:	d102      	bne.n	8004c28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c26:	e02f      	b.n	8004c88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f82e 	bl	8004c90 <SD_FindSCR>
 8004c34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	e023      	b.n	8004c88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01c      	beq.n	8004c84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	4619      	mov	r1, r3
 8004c56:	4610      	mov	r0, r2
 8004c58:	f000 faec 	bl	8005234 <SDMMC_CmdAppCommand>
 8004c5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	e00f      	b.n	8004c88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb25 	bl	80052be <SDMMC_CmdBusWidth>
 8004c74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	e003      	b.n	8004c88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e001      	b.n	8004c88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004c90:	b590      	push	{r4, r7, lr}
 8004c92:	b08f      	sub	sp, #60	@ 0x3c
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c9a:	f7fc fa49 	bl	8001130 <HAL_GetTick>
 8004c9e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2108      	movs	r1, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f98f 	bl	8004fda <SDMMC_CmdBlockLength>
 8004cbc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	e0b2      	b.n	8004e2e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 faad 	bl	8005234 <SDMMC_CmdAppCommand>
 8004cda:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce4:	e0a3      	b.n	8004e2e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004cec:	2308      	movs	r3, #8
 8004cee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004cf0:	2330      	movs	r3, #48	@ 0x30
 8004cf2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f107 0210 	add.w	r2, r7, #16
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f93a 	bl	8004f84 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 faf4 	bl	8005302 <SDMMC_CmdSendSCR>
 8004d1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d02a      	beq.n	8004d78 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	e083      	b.n	8004e2e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00f      	beq.n	8004d54 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6819      	ldr	r1, [r3, #0]
 8004d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	f107 0208 	add.w	r2, r7, #8
 8004d40:	18d4      	adds	r4, r2, r3
 8004d42:	4608      	mov	r0, r1
 8004d44:	f000 f8a1 	bl	8004e8a <SDIO_ReadFIFO>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	6023      	str	r3, [r4, #0]
      index++;
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4e:	3301      	adds	r3, #1
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d52:	e006      	b.n	8004d62 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d012      	beq.n	8004d88 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d62:	f7fc f9e5 	bl	8001130 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d102      	bne.n	8004d78 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004d72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d76:	e05a      	b.n	8004e2e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0cf      	beq.n	8004d26 <SD_FindSCR+0x96>
 8004d86:	e000      	b.n	8004d8a <SD_FindSCR+0xfa>
      break;
 8004d88:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004da0:	2308      	movs	r3, #8
 8004da2:	e044      	b.n	8004e2e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2202      	movs	r2, #2
 8004db8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e037      	b.n	8004e2e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	e02a      	b.n	8004e2e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004de0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	061a      	lsls	r2, r3, #24
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004dee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004df8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e02:	601a      	str	r2, [r3, #0]
    scr++;
 8004e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e06:	3304      	adds	r3, #4
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	061a      	lsls	r2, r3, #24
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	373c      	adds	r7, #60	@ 0x3c
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}

08004e36 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004e36:	b084      	sub	sp, #16
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	f107 001c 	add.w	r0, r7, #28
 8004e44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004e4c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004e50:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004e54:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004e58:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004e5c:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004e60:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004e70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	b004      	add	sp, #16
 8004e88:	4770      	bx	lr

08004e8a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2203      	movs	r2, #3
 8004ece:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f14:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f1a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004f30:	f023 030f 	bic.w	r3, r3, #15
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	b2db      	uxtb	r3, r3
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	461a      	mov	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4413      	add	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
}  
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004faa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004fb0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004fb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0

}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr

08004fda <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b088      	sub	sp, #32
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004fe8:	2310      	movs	r3, #16
 8004fea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fec:	2340      	movs	r3, #64	@ 0x40
 8004fee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ff8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff78 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500a:	2110      	movs	r1, #16
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa19 	bl	8005444 <SDMMC_GetCmdResp1>
 8005012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005014:	69fb      	ldr	r3, [r7, #28]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b088      	sub	sp, #32
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800502c:	2311      	movs	r3, #17
 800502e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005030:	2340      	movs	r3, #64	@ 0x40
 8005032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800503c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800503e:	f107 0308 	add.w	r3, r7, #8
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff ff56 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800504a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504e:	2111      	movs	r1, #17
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f9f7 	bl	8005444 <SDMMC_GetCmdResp1>
 8005056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005058:	69fb      	ldr	r3, [r7, #28]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b088      	sub	sp, #32
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005070:	2312      	movs	r3, #18
 8005072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005074:	2340      	movs	r3, #64	@ 0x40
 8005076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800507c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005080:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff34 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800508e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005092:	2112      	movs	r1, #18
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f9d5 	bl	8005444 <SDMMC_GetCmdResp1>
 800509a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800509c:	69fb      	ldr	r3, [r7, #28]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b088      	sub	sp, #32
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80050b4:	2318      	movs	r3, #24
 80050b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050b8:	2340      	movs	r3, #64	@ 0x40
 80050ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050c6:	f107 0308 	add.w	r3, r7, #8
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ff12 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d6:	2118      	movs	r1, #24
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f9b3 	bl	8005444 <SDMMC_GetCmdResp1>
 80050de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050e0:	69fb      	ldr	r3, [r7, #28]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b088      	sub	sp, #32
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80050f8:	2319      	movs	r3, #25
 80050fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050fc:	2340      	movs	r3, #64	@ 0x40
 80050fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005108:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fef0 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511a:	2119      	movs	r1, #25
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f991 	bl	8005444 <SDMMC_GetCmdResp1>
 8005122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005124:	69fb      	ldr	r3, [r7, #28]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800513c:	230c      	movs	r3, #12
 800513e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005140:	2340      	movs	r3, #64	@ 0x40
 8005142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800514c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fece 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800515a:	4a05      	ldr	r2, [pc, #20]	@ (8005170 <SDMMC_CmdStopTransfer+0x40>)
 800515c:	210c      	movs	r1, #12
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f970 	bl	8005444 <SDMMC_GetCmdResp1>
 8005164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005166:	69fb      	ldr	r3, [r7, #28]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	05f5e100 	.word	0x05f5e100

08005174 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	@ 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005184:	2307      	movs	r3, #7
 8005186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005188:	2340      	movs	r3, #64	@ 0x40
 800518a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005190:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005194:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005196:	f107 0310 	add.w	r3, r7, #16
 800519a:	4619      	mov	r1, r3
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff feaa 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80051a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a6:	2107      	movs	r1, #7
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f94b 	bl	8005444 <SDMMC_GetCmdResp1>
 80051ae:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3728      	adds	r7, #40	@ 0x28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b088      	sub	sp, #32
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051d8:	f107 0308 	add.w	r3, r7, #8
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fe89 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fb63 	bl	80058b0 <SDMMC_GetCmdError>
 80051ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ec:	69fb      	ldr	r3, [r7, #28]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b088      	sub	sp, #32
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80051fe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005204:	2308      	movs	r3, #8
 8005206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005208:	2340      	movs	r3, #64	@ 0x40
 800520a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fe6a 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 faf6 	bl	8005814 <SDMMC_GetCmdResp7>
 8005228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800522a:	69fb      	ldr	r3, [r7, #28]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005242:	2337      	movs	r3, #55	@ 0x37
 8005244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005246:	2340      	movs	r3, #64	@ 0x40
 8005248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800524e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fe4b 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005264:	2137      	movs	r1, #55	@ 0x37
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8ec 	bl	8005444 <SDMMC_GetCmdResp1>
 800526c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800526e:	69fb      	ldr	r3, [r7, #28]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800528c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800528e:	2329      	movs	r3, #41	@ 0x29
 8005290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005292:	2340      	movs	r3, #64	@ 0x40
 8005294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800529a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800529e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052a0:	f107 0308 	add.w	r3, r7, #8
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fe25 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f9ff 	bl	80056b0 <SDMMC_GetCmdResp3>
 80052b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052b4:	69fb      	ldr	r3, [r7, #28]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b088      	sub	sp, #32
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80052cc:	2306      	movs	r3, #6
 80052ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052d0:	2340      	movs	r3, #64	@ 0x40
 80052d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fe06 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80052ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ee:	2106      	movs	r1, #6
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f8a7 	bl	8005444 <SDMMC_GetCmdResp1>
 80052f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052f8:	69fb      	ldr	r3, [r7, #28]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b088      	sub	sp, #32
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800530e:	2333      	movs	r3, #51	@ 0x33
 8005310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005312:	2340      	movs	r3, #64	@ 0x40
 8005314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800531a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800531e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fde5 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800532c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005330:	2133      	movs	r1, #51	@ 0x33
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f886 	bl	8005444 <SDMMC_GetCmdResp1>
 8005338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800533a:	69fb      	ldr	r3, [r7, #28]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005350:	2302      	movs	r3, #2
 8005352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005354:	23c0      	movs	r3, #192	@ 0xc0
 8005356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800535c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005360:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fdc4 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f956 	bl	8005620 <SDMMC_GetCmdResp2>
 8005374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005376:	69fb      	ldr	r3, [r7, #28]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800538e:	2309      	movs	r3, #9
 8005390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005392:	23c0      	movs	r3, #192	@ 0xc0
 8005394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800539a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800539e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053a0:	f107 0308 	add.w	r3, r7, #8
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fda5 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f937 	bl	8005620 <SDMMC_GetCmdResp2>
 80053b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053b4:	69fb      	ldr	r3, [r7, #28]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b088      	sub	sp, #32
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80053cc:	2303      	movs	r3, #3
 80053ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053d0:	2340      	movs	r3, #64	@ 0x40
 80053d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fd86 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	2103      	movs	r1, #3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f99a 	bl	8005728 <SDMMC_GetCmdResp6>
 80053f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053f6:	69fb      	ldr	r3, [r7, #28]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800540e:	230d      	movs	r3, #13
 8005410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005412:	2340      	movs	r3, #64	@ 0x40
 8005414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800541a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800541e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005420:	f107 0308 	add.w	r3, r7, #8
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fd65 	bl	8004ef6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800542c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005430:	210d      	movs	r1, #13
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f806 	bl	8005444 <SDMMC_GetCmdResp1>
 8005438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800543a:	69fb      	ldr	r3, [r7, #28]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	460b      	mov	r3, r1
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005452:	4b70      	ldr	r3, [pc, #448]	@ (8005614 <SDMMC_GetCmdResp1+0x1d0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a70      	ldr	r2, [pc, #448]	@ (8005618 <SDMMC_GetCmdResp1+0x1d4>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	0a5a      	lsrs	r2, r3, #9
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	fb02 f303 	mul.w	r3, r2, r3
 8005464:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	1e5a      	subs	r2, r3, #1
 800546a:	61fa      	str	r2, [r7, #28]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005470:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005474:	e0c9      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0ef      	beq.n	8005466 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1ea      	bne.n	8005466 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2204      	movs	r2, #4
 80054a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054a2:	2304      	movs	r3, #4
 80054a4:	e0b1      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0a6      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	22c5      	movs	r2, #197	@ 0xc5
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff fd40 	bl	8004f48 <SDIO_GetCommandResponse>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	7afb      	ldrb	r3, [r7, #11]
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d001      	beq.n	80054d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e099      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80054d6:	2100      	movs	r1, #0
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fd41 	bl	8004f60 <SDIO_GetResponse>
 80054de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4b4e      	ldr	r3, [pc, #312]	@ (800561c <SDMMC_GetCmdResp1+0x1d8>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e08d      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da02      	bge.n	80054fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80054f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054f8:	e087      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005504:	2340      	movs	r3, #64	@ 0x40
 8005506:	e080      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005512:	2380      	movs	r3, #128	@ 0x80
 8005514:	e079      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005524:	e071      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005534:	e069      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005540:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005544:	e061      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005550:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005554:	e059      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005564:	e051      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005570:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005574:	e049      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005580:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005584:	e041      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005590:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005594:	e039      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80055a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055a4:	e031      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80055b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80055b4:	e029      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80055c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80055c4:	e021      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80055d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80055d4:	e019      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80055e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80055e4:	e011      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80055f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80055f4:	e009      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005600:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005604:	e001      	b.n	800560a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005606:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000000 	.word	0x20000000
 8005618:	10624dd3 	.word	0x10624dd3
 800561c:	fdffe008 	.word	0xfdffe008

08005620 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005628:	4b1f      	ldr	r3, [pc, #124]	@ (80056a8 <SDMMC_GetCmdResp2+0x88>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1f      	ldr	r2, [pc, #124]	@ (80056ac <SDMMC_GetCmdResp2+0x8c>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	0a5b      	lsrs	r3, r3, #9
 8005634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005638:	fb02 f303 	mul.w	r3, r2, r3
 800563c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1e5a      	subs	r2, r3, #1
 8005642:	60fa      	str	r2, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005648:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800564c:	e026      	b.n	800569c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005652:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0ef      	beq.n	800563e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1ea      	bne.n	800563e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2204      	movs	r2, #4
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800567a:	2304      	movs	r3, #4
 800567c:	e00e      	b.n	800569c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005690:	2301      	movs	r3, #1
 8005692:	e003      	b.n	800569c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	22c5      	movs	r2, #197	@ 0xc5
 8005698:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000
 80056ac:	10624dd3 	.word	0x10624dd3

080056b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056b8:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <SDMMC_GetCmdResp3+0x70>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <SDMMC_GetCmdResp3+0x74>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	0a5b      	lsrs	r3, r3, #9
 80056c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	60fa      	str	r2, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80056dc:	e01b      	b.n	8005716 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ef      	beq.n	80056ce <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ea      	bne.n	80056ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2204      	movs	r2, #4
 8005708:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800570a:	2304      	movs	r3, #4
 800570c:	e003      	b.n	8005716 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	22c5      	movs	r2, #197	@ 0xc5
 8005712:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr
 8005720:	20000000 	.word	0x20000000
 8005724:	10624dd3 	.word	0x10624dd3

08005728 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	460b      	mov	r3, r1
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005736:	4b35      	ldr	r3, [pc, #212]	@ (800580c <SDMMC_GetCmdResp6+0xe4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a35      	ldr	r2, [pc, #212]	@ (8005810 <SDMMC_GetCmdResp6+0xe8>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	0a5b      	lsrs	r3, r3, #9
 8005742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	1e5a      	subs	r2, r3, #1
 8005750:	61fa      	str	r2, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005756:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800575a:	e052      	b.n	8005802 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005760:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ef      	beq.n	800574c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1ea      	bne.n	800574c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2204      	movs	r2, #4
 8005786:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005788:	2304      	movs	r3, #4
 800578a:	e03a      	b.n	8005802 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800579e:	2301      	movs	r3, #1
 80057a0:	e02f      	b.n	8005802 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff fbd0 	bl	8004f48 <SDIO_GetCommandResponse>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	7afb      	ldrb	r3, [r7, #11]
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d001      	beq.n	80057b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e025      	b.n	8005802 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22c5      	movs	r2, #197	@ 0xc5
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80057bc:	2100      	movs	r1, #0
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f7ff fbce 	bl	8004f60 <SDIO_GetResponse>
 80057c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	0c1b      	lsrs	r3, r3, #16
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80057da:	2300      	movs	r3, #0
 80057dc:	e011      	b.n	8005802 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80057e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80057ec:	e009      	b.n	8005802 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80057f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057fc:	e001      	b.n	8005802 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80057fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000000 	.word	0x20000000
 8005810:	10624dd3 	.word	0x10624dd3

08005814 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800581c:	4b22      	ldr	r3, [pc, #136]	@ (80058a8 <SDMMC_GetCmdResp7+0x94>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a22      	ldr	r2, [pc, #136]	@ (80058ac <SDMMC_GetCmdResp7+0x98>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	0a5b      	lsrs	r3, r3, #9
 8005828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582c:	fb02 f303 	mul.w	r3, r2, r3
 8005830:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1e5a      	subs	r2, r3, #1
 8005836:	60fa      	str	r2, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800583c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005840:	e02c      	b.n	800589c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005846:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0ef      	beq.n	8005832 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ea      	bne.n	8005832 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d004      	beq.n	8005872 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2204      	movs	r2, #4
 800586c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800586e:	2304      	movs	r3, #4
 8005870:	e014      	b.n	800589c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005884:	2301      	movs	r3, #1
 8005886:	e009      	b.n	800589c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2240      	movs	r2, #64	@ 0x40
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800589a:	2300      	movs	r3, #0
  
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000000 	.word	0x20000000
 80058ac:	10624dd3 	.word	0x10624dd3

080058b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058b8:	4b10      	ldr	r3, [pc, #64]	@ (80058fc <SDMMC_GetCmdError+0x4c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a10      	ldr	r2, [pc, #64]	@ (8005900 <SDMMC_GetCmdError+0x50>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	0a5b      	lsrs	r3, r3, #9
 80058c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c8:	fb02 f303 	mul.w	r3, r2, r3
 80058cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1e5a      	subs	r2, r3, #1
 80058d2:	60fa      	str	r2, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058dc:	e009      	b.n	80058f2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f1      	beq.n	80058ce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	22c5      	movs	r2, #197	@ 0xc5
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr
 80058fc:	20000000 	.word	0x20000000
 8005900:	10624dd3 	.word	0x10624dd3

08005904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005904:	b084      	sub	sp, #16
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	f107 0014 	add.w	r0, r7, #20
 8005912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	b004      	add	sp, #16
 8005922:	4770      	bx	lr

08005924 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005934:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005938:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	b29a      	uxth	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005958:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800595c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	b29b      	uxth	r3, r3
 800596a:	43db      	mvns	r3, r3
 800596c:	b29b      	uxth	r3, r3
 800596e:	4013      	ands	r3, r2
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800599c:	b084      	sub	sp, #16
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	f107 0014 	add.w	r0, r7, #20
 80059aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	b004      	add	sp, #16
 80059da:	4770      	bx	lr

080059dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059dc:	b480      	push	{r7}
 80059de:	b09d      	sub	sp, #116	@ 0x74
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80059fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a02:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	78db      	ldrb	r3, [r3, #3]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d81f      	bhi.n	8005a4e <USB_ActivateEndpoint+0x72>
 8005a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <USB_ActivateEndpoint+0x38>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a41 	.word	0x08005a41
 8005a1c:	08005a57 	.word	0x08005a57
 8005a20:	08005a33 	.word	0x08005a33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005a30:	e012      	b.n	8005a58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a32:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a36:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005a3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005a3e:	e00b      	b.n	8005a58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005a4c:	e004      	b.n	8005a58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005a54:	e000      	b.n	8005a58 <USB_ActivateEndpoint+0x7c>
      break;
 8005a56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	441a      	add	r2, r3
 8005a62:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	7b1b      	ldrb	r3, [r3, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f040 8178 	bne.w	8005db8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8084 	beq.w	8005bda <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	011a      	lsls	r2, r3, #4
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	88db      	ldrh	r3, [r3, #6]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	827b      	strh	r3, [r7, #18]
 8005b14:	8a7b      	ldrh	r3, [r7, #18]
 8005b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01b      	beq.n	8005b56 <USB_ActivateEndpoint+0x17a>
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b34:	823b      	strh	r3, [r7, #16]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	441a      	add	r2, r3
 8005b40:	8a3b      	ldrh	r3, [r7, #16]
 8005b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d020      	beq.n	8005ba0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b74:	81bb      	strh	r3, [r7, #12]
 8005b76:	89bb      	ldrh	r3, [r7, #12]
 8005b78:	f083 0320 	eor.w	r3, r3, #32
 8005b7c:	81bb      	strh	r3, [r7, #12]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	89bb      	ldrh	r3, [r7, #12]
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]
 8005b9e:	e2d5      	b.n	800614c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb6:	81fb      	strh	r3, [r7, #14]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	89fb      	ldrh	r3, [r7, #14]
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]
 8005bd8:	e2b8      	b.n	800614c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	4413      	add	r3, r2
 8005bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	011a      	lsls	r2, r3, #4
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	88db      	ldrh	r3, [r3, #6]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	4413      	add	r3, r2
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	011a      	lsls	r2, r3, #4
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c48:	d91d      	bls.n	8005c86 <USB_ActivateEndpoint+0x2aa>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <USB_ActivateEndpoint+0x288>
 8005c5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c60:	3b01      	subs	r3, #1
 8005c62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	029b      	lsls	r3, r3, #10
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4313      	orrs	r3, r2
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e026      	b.n	8005cd4 <USB_ActivateEndpoint+0x2f8>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <USB_ActivateEndpoint+0x2c8>
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	e017      	b.n	8005cd4 <USB_ActivateEndpoint+0x2f8>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <USB_ActivateEndpoint+0x2e2>
 8005cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cba:	3301      	adds	r3, #1
 8005cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	029b      	lsls	r3, r3, #10
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ce2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01b      	beq.n	8005d24 <USB_ActivateEndpoint+0x348>
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	843b      	strh	r3, [r7, #32]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	8c3b      	ldrh	r3, [r7, #32]
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d124      	bne.n	8005d76 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d42:	83bb      	strh	r3, [r7, #28]
 8005d44:	8bbb      	ldrh	r3, [r7, #28]
 8005d46:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d4a:	83bb      	strh	r3, [r7, #28]
 8005d4c:	8bbb      	ldrh	r3, [r7, #28]
 8005d4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d52:	83bb      	strh	r3, [r7, #28]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	8bbb      	ldrh	r3, [r7, #28]
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]
 8005d74:	e1ea      	b.n	800614c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8c:	83fb      	strh	r3, [r7, #30]
 8005d8e:	8bfb      	ldrh	r3, [r7, #30]
 8005d90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d94:	83fb      	strh	r3, [r7, #30]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	441a      	add	r2, r3
 8005da0:	8bfb      	ldrh	r3, [r7, #30]
 8005da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	8013      	strh	r3, [r2, #0]
 8005db6:	e1c9      	b.n	800614c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	78db      	ldrb	r3, [r3, #3]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d11e      	bne.n	8005dfe <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	8013      	strh	r3, [r2, #0]
 8005dfc:	e01d      	b.n	8005e3a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e14:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e4a:	4413      	add	r3, r2
 8005e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	011a      	lsls	r2, r3, #4
 8005e54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	891b      	ldrh	r3, [r3, #8]
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e7e:	4413      	add	r3, r2
 8005e80:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	011a      	lsls	r2, r3, #4
 8005e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	895b      	ldrh	r3, [r3, #10]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ea0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 8093 	bne.w	8005fd2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005ebc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01b      	beq.n	8005f00 <USB_ActivateEndpoint+0x524>
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ede:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005f0e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01b      	beq.n	8005f50 <USB_ActivateEndpoint+0x574>
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f66:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005f68:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005f6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f6e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005f70:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005f72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f76:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fae:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	441a      	add	r2, r3
 8005fba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	8013      	strh	r3, [r2, #0]
 8005fd0:	e0bc      	b.n	800614c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005fe2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01d      	beq.n	800602a <USB_ActivateEndpoint+0x64e>
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006004:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800601a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800601e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006026:	b29b      	uxth	r3, r3
 8006028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800603a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800603e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01d      	beq.n	8006082 <USB_ActivateEndpoint+0x6a6>
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	441a      	add	r2, r3
 800606a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800606e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800607a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800607e:	b29b      	uxth	r3, r3
 8006080:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	78db      	ldrb	r3, [r3, #3]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d024      	beq.n	80060d4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800609c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80060a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80060a8:	f083 0320 	eor.w	r3, r3, #32
 80060ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]
 80060d2:	e01d      	b.n	8006110 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	441a      	add	r2, r3
 80060f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80060fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006126:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	441a      	add	r2, r3
 8006134:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800613c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006148:	b29b      	uxth	r3, r3
 800614a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800614c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006150:	4618      	mov	r0, r3
 8006152:	3774      	adds	r7, #116	@ 0x74
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop

0800615c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800615c:	b480      	push	{r7}
 800615e:	b08d      	sub	sp, #52	@ 0x34
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	7b1b      	ldrb	r3, [r3, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f040 808e 	bne.w	800628c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d044      	beq.n	8006202 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	81bb      	strh	r3, [r7, #12]
 8006186:	89bb      	ldrh	r3, [r7, #12]
 8006188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01b      	beq.n	80061c8 <USB_DeactivateEndpoint+0x6c>
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a6:	817b      	strh	r3, [r7, #10]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	897b      	ldrh	r3, [r7, #10]
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061de:	813b      	strh	r3, [r7, #8]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	441a      	add	r2, r3
 80061ea:	893b      	ldrh	r3, [r7, #8]
 80061ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	8013      	strh	r3, [r2, #0]
 8006200:	e192      	b.n	8006528 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	827b      	strh	r3, [r7, #18]
 8006210:	8a7b      	ldrh	r3, [r7, #18]
 8006212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01b      	beq.n	8006252 <USB_DeactivateEndpoint+0xf6>
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800622c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006230:	823b      	strh	r3, [r7, #16]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	441a      	add	r2, r3
 800623c:	8a3b      	ldrh	r3, [r7, #16]
 800623e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006246:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800624a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800624e:	b29b      	uxth	r3, r3
 8006250:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006268:	81fb      	strh	r3, [r7, #14]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	441a      	add	r2, r3
 8006274:	89fb      	ldrh	r3, [r7, #14]
 8006276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800627a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800627e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006286:	b29b      	uxth	r3, r3
 8006288:	8013      	strh	r3, [r2, #0]
 800628a:	e14d      	b.n	8006528 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f040 80a5 	bne.w	80063e0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	843b      	strh	r3, [r7, #32]
 80062a4:	8c3b      	ldrh	r3, [r7, #32]
 80062a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d01b      	beq.n	80062e6 <USB_DeactivateEndpoint+0x18a>
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c4:	83fb      	strh	r3, [r7, #30]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	441a      	add	r2, r3
 80062d0:	8bfb      	ldrh	r3, [r7, #30]
 80062d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	83bb      	strh	r3, [r7, #28]
 80062f4:	8bbb      	ldrh	r3, [r7, #28]
 80062f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d01b      	beq.n	8006336 <USB_DeactivateEndpoint+0x1da>
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006314:	837b      	strh	r3, [r7, #26]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	441a      	add	r2, r3
 8006320:	8b7b      	ldrh	r3, [r7, #26]
 8006322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800632a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006332:	b29b      	uxth	r3, r3
 8006334:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634c:	833b      	strh	r3, [r7, #24]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	441a      	add	r2, r3
 8006358:	8b3b      	ldrh	r3, [r7, #24]
 800635a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800635e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006366:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800636a:	b29b      	uxth	r3, r3
 800636c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006384:	82fb      	strh	r3, [r7, #22]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	8afb      	ldrh	r3, [r7, #22]
 8006392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800639a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800639e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063bc:	82bb      	strh	r3, [r7, #20]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	441a      	add	r2, r3
 80063c8:	8abb      	ldrh	r3, [r7, #20]
 80063ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063da:	b29b      	uxth	r3, r3
 80063dc:	8013      	strh	r3, [r2, #0]
 80063de:	e0a3      	b.n	8006528 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80063ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80063f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01b      	beq.n	8006430 <USB_DeactivateEndpoint+0x2d4>
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800641c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006424:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800642c:	b29b      	uxth	r3, r3
 800642e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800643e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01b      	beq.n	8006480 <USB_DeactivateEndpoint+0x324>
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	441a      	add	r2, r3
 800646a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800646c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006478:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006496:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	441a      	add	r2, r3
 80064a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006506:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006514:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006518:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3734      	adds	r7, #52	@ 0x34
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b0c2      	sub	sp, #264	@ 0x108
 8006538:	af00      	add	r7, sp, #0
 800653a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006542:	6018      	str	r0, [r3, #0]
 8006544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800654e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	2b01      	cmp	r3, #1
 800655c:	f040 86b7 	bne.w	80072ce <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	429a      	cmp	r2, r3
 800657a:	d908      	bls.n	800658e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800657c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800658c:	e007      	b.n	800659e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800658e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	7b1b      	ldrb	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d13a      	bne.n	8006624 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6959      	ldr	r1, [r3, #20]
 80065ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	88da      	ldrh	r2, [r3, #6]
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065d4:	6800      	ldr	r0, [r0, #0]
 80065d6:	f001 fc9c 	bl	8007f12 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	011a      	lsls	r2, r3, #4
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4413      	add	r3, r2
 8006610:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	f000 be1f 	b.w	8007262 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	78db      	ldrb	r3, [r3, #3]
 8006630:	2b02      	cmp	r3, #2
 8006632:	f040 8462 	bne.w	8006efa <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6a1a      	ldr	r2, [r3, #32]
 8006642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	f240 83df 	bls.w	8006e12 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800667e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800669c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80066a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80066b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6a1a      	ldr	r2, [r3, #32]
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 81c7 	beq.w	8006a84 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30
 8006702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d177      	bne.n	8006802 <USB_EPStartXfer+0x2ce>
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800671e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	4413      	add	r3, r2
 8006734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	011a      	lsls	r2, r3, #4
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	4413      	add	r3, r2
 8006748:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006758:	b29a      	uxth	r2, r3
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006762:	2b3e      	cmp	r3, #62	@ 0x3e
 8006764:	d921      	bls.n	80067aa <USB_EPStartXfer+0x276>
 8006766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <USB_EPStartXfer+0x252>
 800677c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006780:	3b01      	subs	r3, #1
 8006782:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29a      	uxth	r2, r3
 800678c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006790:	b29b      	uxth	r3, r3
 8006792:	029b      	lsls	r3, r3, #10
 8006794:	b29b      	uxth	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b29b      	uxth	r3, r3
 800679a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e050      	b.n	800684c <USB_EPStartXfer+0x318>
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <USB_EPStartXfer+0x294>
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	801a      	strh	r2, [r3, #0]
 80067c6:	e041      	b.n	800684c <USB_EPStartXfer+0x318>
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <USB_EPStartXfer+0x2b4>
 80067de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80067e2:	3301      	adds	r3, #1
 80067e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	029b      	lsls	r3, r3, #10
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	4313      	orrs	r3, r2
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e024      	b.n	800684c <USB_EPStartXfer+0x318>
 8006802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d11c      	bne.n	800684c <USB_EPStartXfer+0x318>
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	4413      	add	r3, r2
 8006828:	633b      	str	r3, [r7, #48]	@ 0x30
 800682a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	011a      	lsls	r2, r3, #4
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	4413      	add	r3, r2
 800683c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	b29a      	uxth	r2, r3
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800684c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	895b      	ldrh	r3, [r3, #10]
 8006858:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6959      	ldr	r1, [r3, #20]
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	b29b      	uxth	r3, r3
 800686e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006872:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006876:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800687a:	6800      	ldr	r0, [r0, #0]
 800687c:	f001 fb49 	bl	8007f12 <USB_WritePMA>
            ep->xfer_buff += len;
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695a      	ldr	r2, [r3, #20]
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006890:	441a      	add	r2, r3
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800689e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d90f      	bls.n	80068da <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80068ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	621a      	str	r2, [r3, #32]
 80068d8:	e00e      	b.n	80068f8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80068da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80068ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2200      	movs	r2, #0
 80068f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d177      	bne.n	80069f8 <USB_EPStartXfer+0x4c4>
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006922:	b29b      	uxth	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	4413      	add	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	011a      	lsls	r2, r3, #4
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	4413      	add	r3, r2
 800693e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800694e:	b29a      	uxth	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006958:	2b3e      	cmp	r3, #62	@ 0x3e
 800695a:	d921      	bls.n	80069a0 <USB_EPStartXfer+0x46c>
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <USB_EPStartXfer+0x448>
 8006972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006976:	3b01      	subs	r3, #1
 8006978:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29a      	uxth	r2, r3
 8006982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006986:	b29b      	uxth	r3, r3
 8006988:	029b      	lsls	r3, r3, #10
 800698a:	b29b      	uxth	r3, r3
 800698c:	4313      	orrs	r3, r2
 800698e:	b29b      	uxth	r3, r3
 8006990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006998:	b29a      	uxth	r2, r3
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	801a      	strh	r2, [r3, #0]
 800699e:	e056      	b.n	8006a4e <USB_EPStartXfer+0x51a>
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <USB_EPStartXfer+0x48a>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e047      	b.n	8006a4e <USB_EPStartXfer+0x51a>
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <USB_EPStartXfer+0x4aa>
 80069d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069d8:	3301      	adds	r3, #1
 80069da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	029b      	lsls	r3, r3, #10
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	e02a      	b.n	8006a4e <USB_EPStartXfer+0x51a>
 80069f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d122      	bne.n	8006a4e <USB_EPStartXfer+0x51a>
 8006a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	4413      	add	r3, r2
 8006a2a:	623b      	str	r3, [r7, #32]
 8006a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	011a      	lsls	r2, r3, #4
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	891b      	ldrh	r3, [r3, #8]
 8006a5a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6959      	ldr	r1, [r3, #20]
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	f001 fa48 	bl	8007f12 <USB_WritePMA>
 8006a82:	e3ee      	b.n	8007262 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d177      	bne.n	8006b84 <USB_EPStartXfer+0x650>
 8006a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ab4:	4413      	add	r3, r2
 8006ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	011a      	lsls	r2, r3, #4
 8006ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac8:	4413      	add	r3, r2
 8006aca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ae6:	d921      	bls.n	8006b2c <USB_EPStartXfer+0x5f8>
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <USB_EPStartXfer+0x5d4>
 8006afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b02:	3b01      	subs	r3, #1
 8006b04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	029b      	lsls	r3, r3, #10
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	e056      	b.n	8006bda <USB_EPStartXfer+0x6a6>
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <USB_EPStartXfer+0x616>
 8006b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b46:	801a      	strh	r2, [r3, #0]
 8006b48:	e047      	b.n	8006bda <USB_EPStartXfer+0x6a6>
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4e:	085b      	lsrs	r3, r3, #1
 8006b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <USB_EPStartXfer+0x636>
 8006b60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b64:	3301      	adds	r3, #1
 8006b66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	029b      	lsls	r3, r3, #10
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b80:	801a      	strh	r2, [r3, #0]
 8006b82:	e02a      	b.n	8006bda <USB_EPStartXfer+0x6a6>
 8006b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d122      	bne.n	8006bda <USB_EPStartXfer+0x6a6>
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bb4:	4413      	add	r3, r2
 8006bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	011a      	lsls	r2, r3, #4
 8006bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	891b      	ldrh	r3, [r3, #8]
 8006be6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6959      	ldr	r1, [r3, #20]
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c00:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c04:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c08:	6800      	ldr	r0, [r0, #0]
 8006c0a:	f001 f982 	bl	8007f12 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695a      	ldr	r2, [r3, #20]
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	441a      	add	r2, r3
 8006c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d90f      	bls.n	8006c68 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	621a      	str	r2, [r3, #32]
 8006c66:	e00e      	b.n	8006c86 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d177      	bne.n	8006d92 <USB_EPStartXfer+0x85e>
 8006ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc2:	4413      	add	r3, r2
 8006cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	011a      	lsls	r2, r3, #4
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cf4:	d921      	bls.n	8006d3a <USB_EPStartXfer+0x806>
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <USB_EPStartXfer+0x7e2>
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d10:	3b01      	subs	r3, #1
 8006d12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	029b      	lsls	r3, r3, #10
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e050      	b.n	8006ddc <USB_EPStartXfer+0x8a8>
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <USB_EPStartXfer+0x824>
 8006d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e041      	b.n	8006ddc <USB_EPStartXfer+0x8a8>
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <USB_EPStartXfer+0x844>
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d72:	3301      	adds	r3, #1
 8006d74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e024      	b.n	8006ddc <USB_EPStartXfer+0x8a8>
 8006d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d11c      	bne.n	8006ddc <USB_EPStartXfer+0x8a8>
 8006da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db6:	4413      	add	r3, r2
 8006db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	011a      	lsls	r2, r3, #4
 8006dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dca:	4413      	add	r3, r2
 8006dcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	895b      	ldrh	r3, [r3, #10]
 8006de8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6959      	ldr	r1, [r3, #20]
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e0a:	6800      	ldr	r0, [r0, #0]
 8006e0c:	f001 f881 	bl	8007f12 <USB_WritePMA>
 8006e10:	e227      	b.n	8007262 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e48:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e9e:	4413      	add	r3, r2
 8006ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	011a      	lsls	r2, r3, #4
 8006eb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ec2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	891b      	ldrh	r3, [r3, #8]
 8006ed0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6959      	ldr	r1, [r3, #20]
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006eea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006eee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ef2:	6800      	ldr	r0, [r0, #0]
 8006ef4:	f001 f80d 	bl	8007f12 <USB_WritePMA>
 8006ef8:	e1b3      	b.n	8007262 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6a1a      	ldr	r2, [r3, #32]
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80c6 	beq.w	80070cc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d177      	bne.n	800704c <USB_EPStartXfer+0xb18>
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f7c:	4413      	add	r3, r2
 8006f7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	011a      	lsls	r2, r3, #4
 8006f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f90:	4413      	add	r3, r2
 8006f92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f96:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fae:	d921      	bls.n	8006ff4 <USB_EPStartXfer+0xac0>
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <USB_EPStartXfer+0xa9c>
 8006fc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006fd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e050      	b.n	8007096 <USB_EPStartXfer+0xb62>
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <USB_EPStartXfer+0xade>
 8006ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700a:	b29a      	uxth	r2, r3
 800700c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e041      	b.n	8007096 <USB_EPStartXfer+0xb62>
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <USB_EPStartXfer+0xafe>
 8007028:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800702c:	3301      	adds	r3, #1
 800702e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800703c:	b29b      	uxth	r3, r3
 800703e:	029b      	lsls	r3, r3, #10
 8007040:	b29b      	uxth	r3, r3
 8007042:	4313      	orrs	r3, r2
 8007044:	b29a      	uxth	r2, r3
 8007046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e024      	b.n	8007096 <USB_EPStartXfer+0xb62>
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d11c      	bne.n	8007096 <USB_EPStartXfer+0xb62>
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800706a:	b29b      	uxth	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007070:	4413      	add	r3, r2
 8007072:	673b      	str	r3, [r7, #112]	@ 0x70
 8007074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	011a      	lsls	r2, r3, #4
 8007082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007084:	4413      	add	r3, r2
 8007086:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800708a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007090:	b29a      	uxth	r2, r3
 8007092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007094:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	895b      	ldrh	r3, [r3, #10]
 80070a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6959      	ldr	r1, [r3, #20]
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070c4:	6800      	ldr	r0, [r0, #0]
 80070c6:	f000 ff24 	bl	8007f12 <USB_WritePMA>
 80070ca:	e0ca      	b.n	8007262 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d177      	bne.n	80071cc <USB_EPStartXfer+0xc98>
 80070dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80070fc:	4413      	add	r3, r2
 80070fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	011a      	lsls	r2, r3, #4
 800710e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007110:	4413      	add	r3, r2
 8007112:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007116:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007122:	b29a      	uxth	r2, r3
 8007124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712c:	2b3e      	cmp	r3, #62	@ 0x3e
 800712e:	d921      	bls.n	8007174 <USB_EPStartXfer+0xc40>
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <USB_EPStartXfer+0xc1c>
 8007146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800714a:	3b01      	subs	r3, #1
 800714c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b29a      	uxth	r2, r3
 8007156:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800715a:	b29b      	uxth	r3, r3
 800715c:	029b      	lsls	r3, r3, #10
 800715e:	b29b      	uxth	r3, r3
 8007160:	4313      	orrs	r3, r2
 8007162:	b29b      	uxth	r3, r3
 8007164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716c:	b29a      	uxth	r2, r3
 800716e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007170:	801a      	strh	r2, [r3, #0]
 8007172:	e05c      	b.n	800722e <USB_EPStartXfer+0xcfa>
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <USB_EPStartXfer+0xc5e>
 800717c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718a:	b29a      	uxth	r2, r3
 800718c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	e04d      	b.n	800722e <USB_EPStartXfer+0xcfa>
 8007192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <USB_EPStartXfer+0xc7e>
 80071a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80071ac:	3301      	adds	r3, #1
 80071ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80071bc:	b29b      	uxth	r3, r3
 80071be:	029b      	lsls	r3, r3, #10
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	4313      	orrs	r3, r2
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e030      	b.n	800722e <USB_EPStartXfer+0xcfa>
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d128      	bne.n	800722e <USB_EPStartXfer+0xcfa>
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007200:	4413      	add	r3, r2
 8007202:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	011a      	lsls	r2, r3, #4
 8007214:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007218:	4413      	add	r3, r2
 800721a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800721e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007226:	b29a      	uxth	r2, r3
 8007228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800722c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	891b      	ldrh	r3, [r3, #8]
 800723a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800723e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6959      	ldr	r1, [r3, #20]
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724e:	b29b      	uxth	r3, r3
 8007250:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007254:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007258:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f000 fe58 	bl	8007f12 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007288:	817b      	strh	r3, [r7, #10]
 800728a:	897b      	ldrh	r3, [r7, #10]
 800728c:	f083 0310 	eor.w	r3, r3, #16
 8007290:	817b      	strh	r3, [r7, #10]
 8007292:	897b      	ldrh	r3, [r7, #10]
 8007294:	f083 0320 	eor.w	r3, r3, #32
 8007298:	817b      	strh	r3, [r7, #10]
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	441a      	add	r2, r3
 80072b4:	897b      	ldrh	r3, [r7, #10]
 80072b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	8013      	strh	r3, [r2, #0]
 80072ca:	f000 bcde 	b.w	8007c8a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	7b1b      	ldrb	r3, [r3, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 80bb 	bne.w	8007456 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80072e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d917      	bls.n	800732c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80072fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800730c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731c:	1ad2      	subs	r2, r2, r3
 800731e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	619a      	str	r2, [r3, #24]
 800732a:	e00e      	b.n	800734a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800732c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800733c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2200      	movs	r2, #0
 8007348:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007366:	b29b      	uxth	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800736e:	4413      	add	r3, r2
 8007370:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	011a      	lsls	r2, r3, #4
 8007382:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007386:	4413      	add	r3, r2
 8007388:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800738c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80073aa:	d924      	bls.n	80073f6 <USB_EPStartXfer+0xec2>
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <USB_EPStartXfer+0xe98>
 80073c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073c6:	3b01      	subs	r3, #1
 80073c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073d8:	b29b      	uxth	r3, r3
 80073da:	029b      	lsls	r3, r3, #10
 80073dc:	b29b      	uxth	r3, r3
 80073de:	4313      	orrs	r3, r2
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073f0:	801a      	strh	r2, [r3, #0]
 80073f2:	f000 bc10 	b.w	8007c16 <USB_EPStartXfer+0x16e2>
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10c      	bne.n	8007418 <USB_EPStartXfer+0xee4>
 80073fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e3fe      	b.n	8007c16 <USB_EPStartXfer+0x16e2>
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <USB_EPStartXfer+0xf04>
 800742e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007432:	3301      	adds	r3, #1
 8007434:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29a      	uxth	r2, r3
 8007440:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007444:	b29b      	uxth	r3, r3
 8007446:	029b      	lsls	r3, r3, #10
 8007448:	b29b      	uxth	r3, r3
 800744a:	4313      	orrs	r3, r2
 800744c:	b29a      	uxth	r2, r3
 800744e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	e3df      	b.n	8007c16 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	78db      	ldrb	r3, [r3, #3]
 8007462:	2b02      	cmp	r3, #2
 8007464:	f040 8218 	bne.w	8007898 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f040 809d 	bne.w	80075b4 <USB_EPStartXfer+0x1080>
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007496:	b29b      	uxth	r3, r3
 8007498:	461a      	mov	r2, r3
 800749a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800749e:	4413      	add	r3, r2
 80074a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	011a      	lsls	r2, r3, #4
 80074b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074b6:	4413      	add	r3, r2
 80074b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80074e2:	d92b      	bls.n	800753c <USB_EPStartXfer+0x1008>
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 031f 	and.w	r3, r3, #31
 8007506:	2b00      	cmp	r3, #0
 8007508:	d104      	bne.n	8007514 <USB_EPStartXfer+0xfe0>
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750e:	3b01      	subs	r3, #1
 8007510:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29a      	uxth	r2, r3
 800751c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007520:	b29b      	uxth	r3, r3
 8007522:	029b      	lsls	r3, r3, #10
 8007524:	b29b      	uxth	r3, r3
 8007526:	4313      	orrs	r3, r2
 8007528:	b29b      	uxth	r3, r3
 800752a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007532:	b29a      	uxth	r2, r3
 8007534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	e070      	b.n	800761e <USB_EPStartXfer+0x10ea>
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10c      	bne.n	8007566 <USB_EPStartXfer+0x1032>
 800754c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755c:	b29a      	uxth	r2, r3
 800755e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	e05b      	b.n	800761e <USB_EPStartXfer+0x10ea>
 8007566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <USB_EPStartXfer+0x1062>
 800758c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007590:	3301      	adds	r3, #1
 8007592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29a      	uxth	r2, r3
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	029b      	lsls	r3, r3, #10
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4313      	orrs	r3, r2
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e034      	b.n	800761e <USB_EPStartXfer+0x10ea>
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d12c      	bne.n	800761e <USB_EPStartXfer+0x10ea>
 80075c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075e8:	4413      	add	r3, r2
 80075ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	011a      	lsls	r2, r3, #4
 80075fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007600:	4413      	add	r3, r2
 8007602:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007606:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800760a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	b29a      	uxth	r2, r3
 8007618:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800761c:	801a      	strh	r2, [r3, #0]
 800761e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800762c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f040 809d 	bne.w	8007778 <USB_EPStartXfer+0x1244>
 800763e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800764c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007662:	4413      	add	r3, r2
 8007664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	011a      	lsls	r2, r3, #4
 8007676:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800767a:	4413      	add	r3, r2
 800767c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007684:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007690:	b29a      	uxth	r2, r3
 8007692:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007696:	801a      	strh	r2, [r3, #0]
 8007698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80076a6:	d92b      	bls.n	8007700 <USB_EPStartXfer+0x11cc>
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	095b      	lsrs	r3, r3, #5
 80076b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 031f 	and.w	r3, r3, #31
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d104      	bne.n	80076d8 <USB_EPStartXfer+0x11a4>
 80076ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d2:	3b01      	subs	r3, #1
 80076d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	029b      	lsls	r3, r3, #10
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	4313      	orrs	r3, r2
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076fc:	801a      	strh	r2, [r3, #0]
 80076fe:	e069      	b.n	80077d4 <USB_EPStartXfer+0x12a0>
 8007700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10c      	bne.n	800772a <USB_EPStartXfer+0x11f6>
 8007710:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007720:	b29a      	uxth	r2, r3
 8007722:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e054      	b.n	80077d4 <USB_EPStartXfer+0x12a0>
 800772a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <USB_EPStartXfer+0x1226>
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007754:	3301      	adds	r3, #1
 8007756:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800775a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29a      	uxth	r2, r3
 8007762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007766:	b29b      	uxth	r3, r3
 8007768:	029b      	lsls	r3, r3, #10
 800776a:	b29b      	uxth	r3, r3
 800776c:	4313      	orrs	r3, r2
 800776e:	b29a      	uxth	r2, r3
 8007770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	e02d      	b.n	80077d4 <USB_EPStartXfer+0x12a0>
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	785b      	ldrb	r3, [r3, #1]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d125      	bne.n	80077d4 <USB_EPStartXfer+0x12a0>
 8007788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007796:	b29b      	uxth	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800779e:	4413      	add	r3, r2
 80077a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80077a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	011a      	lsls	r2, r3, #4
 80077b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80077b6:	4413      	add	r3, r2
 80077b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077d2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80077d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8218 	beq.w	8007c16 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80077e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007806:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800780a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <USB_EPStartXfer+0x12ea>
 8007812:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10d      	bne.n	800783a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800781e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007826:	2b00      	cmp	r3, #0
 8007828:	f040 81f5 	bne.w	8007c16 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800782c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 81ee 	bne.w	8007c16 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800783a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800785c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007860:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	441a      	add	r2, r3
 800787e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800788a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800788e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007892:	b29b      	uxth	r3, r3
 8007894:	8013      	strh	r3, [r2, #0]
 8007896:	e1be      	b.n	8007c16 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	78db      	ldrb	r3, [r3, #3]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	f040 81b4 	bne.w	8007c12 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d917      	bls.n	80078f6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80078d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699a      	ldr	r2, [r3, #24]
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e6:	1ad2      	subs	r2, r2, r3
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	619a      	str	r2, [r3, #24]
 80078f4:	e00e      	b.n	8007914 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80078f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2200      	movs	r2, #0
 8007912:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f040 8085 	bne.w	8007a30 <USB_EPStartXfer+0x14fc>
 8007926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007938:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007942:	b29b      	uxth	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800794a:	4413      	add	r3, r2
 800794c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	011a      	lsls	r2, r3, #4
 800795e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007962:	4413      	add	r3, r2
 8007964:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007968:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800796c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007984:	2b3e      	cmp	r3, #62	@ 0x3e
 8007986:	d923      	bls.n	80079d0 <USB_EPStartXfer+0x149c>
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798c:	095b      	lsrs	r3, r3, #5
 800798e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	f003 031f 	and.w	r3, r3, #31
 800799a:	2b00      	cmp	r3, #0
 800799c:	d104      	bne.n	80079a8 <USB_EPStartXfer+0x1474>
 800799e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079a2:	3b01      	subs	r3, #1
 80079a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	029b      	lsls	r3, r3, #10
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	4313      	orrs	r3, r2
 80079bc:	b29b      	uxth	r3, r3
 80079be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e060      	b.n	8007a92 <USB_EPStartXfer+0x155e>
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10c      	bne.n	80079f2 <USB_EPStartXfer+0x14be>
 80079d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	e04f      	b.n	8007a92 <USB_EPStartXfer+0x155e>
 80079f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <USB_EPStartXfer+0x14de>
 8007a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	029b      	lsls	r3, r3, #10
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	4313      	orrs	r3, r2
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	e030      	b.n	8007a92 <USB_EPStartXfer+0x155e>
 8007a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d128      	bne.n	8007a92 <USB_EPStartXfer+0x155e>
 8007a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a64:	4413      	add	r3, r2
 8007a66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	011a      	lsls	r2, r3, #4
 8007a78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 8085 	bne.w	8007bbc <USB_EPStartXfer+0x1688>
 8007ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	011a      	lsls	r2, r3, #4
 8007aea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007aee:	4413      	add	r3, r2
 8007af0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007af8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b10:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b12:	d923      	bls.n	8007b5c <USB_EPStartXfer+0x1628>
 8007b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b18:	095b      	lsrs	r3, r3, #5
 8007b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b22:	f003 031f 	and.w	r3, r3, #31
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <USB_EPStartXfer+0x1600>
 8007b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	029b      	lsls	r3, r3, #10
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	e05c      	b.n	8007c16 <USB_EPStartXfer+0x16e2>
 8007b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10c      	bne.n	8007b7e <USB_EPStartXfer+0x164a>
 8007b64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	e04b      	b.n	8007c16 <USB_EPStartXfer+0x16e2>
 8007b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <USB_EPStartXfer+0x166a>
 8007b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b98:	3301      	adds	r3, #1
 8007b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	029b      	lsls	r3, r3, #10
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	e02c      	b.n	8007c16 <USB_EPStartXfer+0x16e2>
 8007bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	785b      	ldrb	r3, [r3, #1]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d124      	bne.n	8007c16 <USB_EPStartXfer+0x16e2>
 8007bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007be2:	4413      	add	r3, r2
 8007be4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	011a      	lsls	r2, r3, #4
 8007bf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	e001      	b.n	8007c16 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e03a      	b.n	8007c8c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	441a      	add	r2, r3
 8007c72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d020      	beq.n	8007cea <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cbe:	81bb      	strh	r3, [r7, #12]
 8007cc0:	89bb      	ldrh	r3, [r7, #12]
 8007cc2:	f083 0310 	eor.w	r3, r3, #16
 8007cc6:	81bb      	strh	r3, [r7, #12]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	89bb      	ldrh	r3, [r7, #12]
 8007cd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	8013      	strh	r3, [r2, #0]
 8007ce8:	e01f      	b.n	8007d2a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d00:	81fb      	strh	r3, [r7, #14]
 8007d02:	89fb      	ldrh	r3, [r7, #14]
 8007d04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d08:	81fb      	strh	r3, [r7, #14]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	441a      	add	r2, r3
 8007d14:	89fb      	ldrh	r3, [r7, #14]
 8007d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b087      	sub	sp, #28
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	7b1b      	ldrb	r3, [r3, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f040 809d 	bne.w	8007e84 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	785b      	ldrb	r3, [r3, #1]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d04c      	beq.n	8007dec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	823b      	strh	r3, [r7, #16]
 8007d60:	8a3b      	ldrh	r3, [r7, #16]
 8007d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01b      	beq.n	8007da2 <USB_EPClearStall+0x6c>
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d80:	81fb      	strh	r3, [r7, #14]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	441a      	add	r2, r3
 8007d8c:	89fb      	ldrh	r3, [r7, #14]
 8007d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	78db      	ldrb	r3, [r3, #3]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d06c      	beq.n	8007e84 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc0:	81bb      	strh	r3, [r7, #12]
 8007dc2:	89bb      	ldrh	r3, [r7, #12]
 8007dc4:	f083 0320 	eor.w	r3, r3, #32
 8007dc8:	81bb      	strh	r3, [r7, #12]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	441a      	add	r2, r3
 8007dd4:	89bb      	ldrh	r3, [r7, #12]
 8007dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	8013      	strh	r3, [r2, #0]
 8007dea:	e04b      	b.n	8007e84 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	82fb      	strh	r3, [r7, #22]
 8007dfa:	8afb      	ldrh	r3, [r7, #22]
 8007dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d01b      	beq.n	8007e3c <USB_EPClearStall+0x106>
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1a:	82bb      	strh	r3, [r7, #20]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	441a      	add	r2, r3
 8007e26:	8abb      	ldrh	r3, [r7, #20]
 8007e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e52:	827b      	strh	r3, [r7, #18]
 8007e54:	8a7b      	ldrh	r3, [r7, #18]
 8007e56:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e5a:	827b      	strh	r3, [r7, #18]
 8007e5c:	8a7b      	ldrh	r3, [r7, #18]
 8007e5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e62:	827b      	strh	r3, [r7, #18]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	441a      	add	r2, r3
 8007e6e:	8a7b      	ldrh	r3, [r7, #18]
 8007e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr

08007e90 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2280      	movs	r2, #128	@ 0x80
 8007ea6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr

08007eb6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr

08007eca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr

08007ede <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr

08007efc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr

08007f12 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b08b      	sub	sp, #44	@ 0x2c
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	461a      	mov	r2, r3
 8007f20:	460b      	mov	r3, r1
 8007f22:	80fb      	strh	r3, [r7, #6]
 8007f24:	4613      	mov	r3, r2
 8007f26:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f28:	88bb      	ldrh	r3, [r7, #4]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	005a      	lsls	r2, r3, #1
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f44:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f4a:	e01e      	b.n	8007f8a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3301      	adds	r3, #1
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	b21a      	sxth	r2, r3
 8007f5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	b21b      	sxth	r3, r3
 8007f64:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	8a7a      	ldrh	r2, [r7, #18]
 8007f6a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	3302      	adds	r3, #2
 8007f70:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	3302      	adds	r3, #2
 8007f76:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	3301      	adds	r3, #1
 8007f82:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	3b01      	subs	r3, #1
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1dd      	bne.n	8007f4c <USB_WritePMA+0x3a>
  }
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	372c      	adds	r7, #44	@ 0x2c
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr

08007f9c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b08b      	sub	sp, #44	@ 0x2c
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	461a      	mov	r2, r3
 8007faa:	460b      	mov	r3, r1
 8007fac:	80fb      	strh	r3, [r7, #6]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007fb2:	88bb      	ldrh	r3, [r7, #4]
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	005a      	lsls	r2, r3, #1
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fd4:	e01b      	b.n	800800e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	0a1b      	lsrs	r3, r3, #8
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	3301      	adds	r3, #1
 8008000:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	3302      	adds	r3, #2
 8008006:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	3b01      	subs	r3, #1
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e0      	bne.n	8007fd6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008014:	88bb      	ldrh	r3, [r7, #4]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	b29b      	uxth	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	b2da      	uxtb	r2, r3
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	701a      	strb	r2, [r3, #0]
  }
}
 8008030:	bf00      	nop
 8008032:	372c      	adds	r7, #44	@ 0x2c
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr
	...

0800803c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <MX_FATFS_Init+0x18>)
 8008042:	4805      	ldr	r0, [pc, #20]	@ (8008058 <MX_FATFS_Init+0x1c>)
 8008044:	f005 fda0 	bl	800db88 <FATFS_LinkDriver>
 8008048:	4603      	mov	r3, r0
 800804a:	461a      	mov	r2, r3
 800804c:	4b03      	ldr	r3, [pc, #12]	@ (800805c <MX_FATFS_Init+0x20>)
 800804e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008050:	bf00      	nop
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000374 	.word	0x20000374
 8008058:	0800f5a8 	.word	0x0800f5a8
 800805c:	20000370 	.word	0x20000370

08008060 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008064:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008066:	4618      	mov	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr
	...

08008070 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800807a:	f000 f86b 	bl	8008154 <BSP_SD_IsDetected>
 800807e:	4603      	mov	r3, r0
 8008080:	2b01      	cmp	r3, #1
 8008082:	d001      	beq.n	8008088 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e005      	b.n	8008094 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008088:	4804      	ldr	r0, [pc, #16]	@ (800809c <BSP_SD_Init+0x2c>)
 800808a:	f7fb fd49 	bl	8003b20 <HAL_SD_Init>
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008092:	79fb      	ldrb	r3, [r7, #7]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	200002e4 	.word	0x200002e4

080080a0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	4806      	ldr	r0, [pc, #24]	@ (80080d8 <BSP_SD_ReadBlocks+0x38>)
 80080be:	f7fb fddf 	bl	8003c80 <HAL_SD_ReadBlocks>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	200002e4 	.word	0x200002e4

080080dc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	4806      	ldr	r0, [pc, #24]	@ (8008114 <BSP_SD_WriteBlocks+0x38>)
 80080fa:	f7fb ff9f 	bl	800403c <HAL_SD_WriteBlocks>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	200002e4 	.word	0x200002e4

08008118 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800811c:	4805      	ldr	r0, [pc, #20]	@ (8008134 <BSP_SD_GetCardState+0x1c>)
 800811e:	f7fc fb7d 	bl	800481c <HAL_SD_GetCardState>
 8008122:	4603      	mov	r3, r0
 8008124:	2b04      	cmp	r3, #4
 8008126:	bf14      	ite	ne
 8008128:	2301      	movne	r3, #1
 800812a:	2300      	moveq	r3, #0
 800812c:	b2db      	uxtb	r3, r3
}
 800812e:	4618      	mov	r0, r3
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200002e4 	.word	0x200002e4

08008138 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	4803      	ldr	r0, [pc, #12]	@ (8008150 <BSP_SD_GetCardInfo+0x18>)
 8008144:	f7fc faa4 	bl	8004690 <HAL_SD_GetCardInfo>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	200002e4 	.word	0x200002e4

08008154 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800815a:	2301      	movs	r3, #1
 800815c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	b2db      	uxtb	r3, r3
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr

0800816c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7c1b      	ldrb	r3, [r3, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d115      	bne.n	80081b0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008188:	2202      	movs	r2, #2
 800818a:	2181      	movs	r1, #129	@ 0x81
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f006 f98a 	bl	800e4a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800819c:	2202      	movs	r2, #2
 800819e:	2101      	movs	r1, #1
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f006 f980 	bl	800e4a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80081ae:	e012      	b.n	80081d6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081b0:	2340      	movs	r3, #64	@ 0x40
 80081b2:	2202      	movs	r2, #2
 80081b4:	2181      	movs	r1, #129	@ 0x81
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f006 f975 	bl	800e4a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081c2:	2340      	movs	r3, #64	@ 0x40
 80081c4:	2202      	movs	r2, #2
 80081c6:	2101      	movs	r1, #1
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f006 f96c 	bl	800e4a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081d6:	2308      	movs	r3, #8
 80081d8:	2203      	movs	r2, #3
 80081da:	2182      	movs	r1, #130	@ 0x82
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f006 f962 	bl	800e4a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80081ec:	f006 fa82 	bl	800e6f4 <USBD_static_malloc>
 80081f0:	4602      	mov	r2, r0
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008202:	2301      	movs	r3, #1
 8008204:	73fb      	strb	r3, [r7, #15]
 8008206:	e026      	b.n	8008256 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800820e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7c1b      	ldrb	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d109      	bne.n	8008246 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800823c:	2101      	movs	r1, #1
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f006 fa22 	bl	800e688 <USBD_LL_PrepareReceive>
 8008244:	e007      	b.n	8008256 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800824c:	2340      	movs	r3, #64	@ 0x40
 800824e:	2101      	movs	r1, #1
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f006 fa19 	bl	800e688 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008270:	2181      	movs	r1, #129	@ 0x81
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f006 f93d 	bl	800e4f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800827e:	2101      	movs	r1, #1
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f006 f936 	bl	800e4f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800828e:	2182      	movs	r1, #130	@ 0x82
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f006 f92e 	bl	800e4f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00e      	beq.n	80082c4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082b6:	4618      	mov	r0, r3
 80082b8:	f006 fa28 	bl	800e70c <USBD_static_free>
    pdev->pClassData = NULL;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b086      	sub	sp, #24
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082de:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d039      	beq.n	800836c <USBD_CDC_Setup+0x9e>
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	d17f      	bne.n	80083fc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	88db      	ldrh	r3, [r3, #6]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d029      	beq.n	8008358 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	b25b      	sxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	da11      	bge.n	8008332 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800831a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	88d2      	ldrh	r2, [r2, #6]
 8008320:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008322:	6939      	ldr	r1, [r7, #16]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	88db      	ldrh	r3, [r3, #6]
 8008328:	461a      	mov	r2, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 fa06 	bl	800973c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008330:	e06b      	b.n	800840a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	785a      	ldrb	r2, [r3, #1]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	88db      	ldrh	r3, [r3, #6]
 8008340:	b2da      	uxtb	r2, r3
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008348:	6939      	ldr	r1, [r7, #16]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	88db      	ldrh	r3, [r3, #6]
 800834e:	461a      	mov	r2, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 fa21 	bl	8009798 <USBD_CtlPrepareRx>
      break;
 8008356:	e058      	b.n	800840a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	7850      	ldrb	r0, [r2, #1]
 8008364:	2200      	movs	r2, #0
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	4798      	blx	r3
      break;
 800836a:	e04e      	b.n	800840a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	2b0b      	cmp	r3, #11
 8008372:	d02e      	beq.n	80083d2 <USBD_CDC_Setup+0x104>
 8008374:	2b0b      	cmp	r3, #11
 8008376:	dc38      	bgt.n	80083ea <USBD_CDC_Setup+0x11c>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <USBD_CDC_Setup+0xb4>
 800837c:	2b0a      	cmp	r3, #10
 800837e:	d014      	beq.n	80083aa <USBD_CDC_Setup+0xdc>
 8008380:	e033      	b.n	80083ea <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008388:	2b03      	cmp	r3, #3
 800838a:	d107      	bne.n	800839c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800838c:	f107 030c 	add.w	r3, r7, #12
 8008390:	2202      	movs	r2, #2
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 f9d1 	bl	800973c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800839a:	e02e      	b.n	80083fa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 f962 	bl	8009668 <USBD_CtlError>
            ret = USBD_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	75fb      	strb	r3, [r7, #23]
          break;
 80083a8:	e027      	b.n	80083fa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d107      	bne.n	80083c4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80083b4:	f107 030f 	add.w	r3, r7, #15
 80083b8:	2201      	movs	r2, #1
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f9bd 	bl	800973c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083c2:	e01a      	b.n	80083fa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 f94e 	bl	8009668 <USBD_CtlError>
            ret = USBD_FAIL;
 80083cc:	2302      	movs	r3, #2
 80083ce:	75fb      	strb	r3, [r7, #23]
          break;
 80083d0:	e013      	b.n	80083fa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d00d      	beq.n	80083f8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 f942 	bl	8009668 <USBD_CtlError>
            ret = USBD_FAIL;
 80083e4:	2302      	movs	r3, #2
 80083e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083e8:	e006      	b.n	80083f8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f93b 	bl	8009668 <USBD_CtlError>
          ret = USBD_FAIL;
 80083f2:	2302      	movs	r3, #2
 80083f4:	75fb      	strb	r3, [r7, #23]
          break;
 80083f6:	e000      	b.n	80083fa <USBD_CDC_Setup+0x12c>
          break;
 80083f8:	bf00      	nop
      }
      break;
 80083fa:	e006      	b.n	800840a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 f932 	bl	8009668 <USBD_CtlError>
      ret = USBD_FAIL;
 8008404:	2302      	movs	r3, #2
 8008406:	75fb      	strb	r3, [r7, #23]
      break;
 8008408:	bf00      	nop
  }

  return ret;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008426:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800842e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d03a      	beq.n	80084b0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	6879      	ldr	r1, [r7, #4]
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	331c      	adds	r3, #28
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d029      	beq.n	80084a4 <USBD_CDC_DataIn+0x90>
 8008450:	78fa      	ldrb	r2, [r7, #3]
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	331c      	adds	r3, #28
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	78f9      	ldrb	r1, [r7, #3]
 8008464:	68b8      	ldr	r0, [r7, #8]
 8008466:	460b      	mov	r3, r1
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	4403      	add	r3, r0
 8008470:	3338      	adds	r3, #56	@ 0x38
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	fbb2 f1f3 	udiv	r1, r2, r3
 8008478:	fb01 f303 	mul.w	r3, r1, r3
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d110      	bne.n	80084a4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	331c      	adds	r3, #28
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008496:	78f9      	ldrb	r1, [r7, #3]
 8008498:	2300      	movs	r3, #0
 800849a:	2200      	movs	r2, #0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f006 f8d0 	bl	800e642 <USBD_LL_Transmit>
 80084a2:	e003      	b.n	80084ac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	e000      	b.n	80084b2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80084b0:	2302      	movs	r3, #2
  }
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f006 f8fb 	bl	800e6ce <USBD_LL_GetRxDataSize>
 80084d8:	4602      	mov	r2, r0
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00d      	beq.n	8008506 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80084fe:	4611      	mov	r1, r2
 8008500:	4798      	blx	r3

    return USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	e000      	b.n	8008508 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008506:	2302      	movs	r3, #2
  }
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800851e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008526:	2b00      	cmp	r3, #0
 8008528:	d014      	beq.n	8008554 <USBD_CDC_EP0_RxReady+0x44>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008530:	2bff      	cmp	r3, #255	@ 0xff
 8008532:	d00f      	beq.n	8008554 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008542:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800854a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	22ff      	movs	r2, #255	@ 0xff
 8008550:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2243      	movs	r2, #67	@ 0x43
 800856c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800856e:	4b03      	ldr	r3, [pc, #12]	@ (800857c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008570:	4618      	mov	r0, r3
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20000094 	.word	0x20000094

08008580 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2243      	movs	r2, #67	@ 0x43
 800858c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800858e:	4b03      	ldr	r3, [pc, #12]	@ (800859c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	20000050 	.word	0x20000050

080085a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2243      	movs	r2, #67	@ 0x43
 80085ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80085ae:	4b03      	ldr	r3, [pc, #12]	@ (80085bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	200000d8 	.word	0x200000d8

080085c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	220a      	movs	r2, #10
 80085cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80085ce:	4b03      	ldr	r3, [pc, #12]	@ (80085dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	2000000c 	.word	0x2000000c

080085e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80085ea:	2302      	movs	r3, #2
 80085ec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	bc80      	pop	{r7}
 800860a:	4770      	bx	lr

0800860c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008620:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr

0800863e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800864e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	bc80      	pop	{r7}
 8008662:	4770      	bx	lr

08008664 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008672:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d01c      	beq.n	80086b8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008684:	2b00      	cmp	r3, #0
 8008686:	d115      	bne.n	80086b4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2181      	movs	r1, #129	@ 0x81
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f005 ffc9 	bl	800e642 <USBD_LL_Transmit>

      return USBD_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	e002      	b.n	80086ba <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80086b8:	2302      	movs	r3, #2
  }
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d017      	beq.n	800870c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	7c1b      	ldrb	r3, [r3, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086ee:	2101      	movs	r1, #1
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f005 ffc9 	bl	800e688 <USBD_LL_PrepareReceive>
 80086f6:	e007      	b.n	8008708 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086fe:	2340      	movs	r3, #64	@ 0x40
 8008700:	2101      	movs	r1, #1
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f005 ffc0 	bl	800e688 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	e000      	b.n	800870e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800870c:	2302      	movs	r3, #2
  }
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	4613      	mov	r3, r2
 8008722:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800872a:	2302      	movs	r3, #2
 800872c:	e01a      	b.n	8008764 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	79fa      	ldrb	r2, [r7, #7]
 800875a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f005 fe2d 	bl	800e3bc <USBD_LL_Init>

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]
 800878c:	e001      	b.n	8008792 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800878e:	2302      	movs	r3, #2
 8008790:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr

0800879e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f005 fe62 	bl	800e470 <USBD_LL_Start>

  return USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr

080087ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	460b      	mov	r3, r1
 80087d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80087d6:	2302      	movs	r3, #2
 80087d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00c      	beq.n	80087fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	4611      	mov	r1, r2
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	4611      	mov	r1, r2
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3

  return USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fed8 	bl	80095f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008854:	461a      	mov	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008862:	f003 031f 	and.w	r3, r3, #31
 8008866:	2b02      	cmp	r3, #2
 8008868:	d016      	beq.n	8008898 <USBD_LL_SetupStage+0x6a>
 800886a:	2b02      	cmp	r3, #2
 800886c:	d81c      	bhi.n	80088a8 <USBD_LL_SetupStage+0x7a>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d002      	beq.n	8008878 <USBD_LL_SetupStage+0x4a>
 8008872:	2b01      	cmp	r3, #1
 8008874:	d008      	beq.n	8008888 <USBD_LL_SetupStage+0x5a>
 8008876:	e017      	b.n	80088a8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f9cb 	bl	8008c1c <USBD_StdDevReq>
      break;
 8008886:	e01a      	b.n	80088be <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fa2d 	bl	8008cf0 <USBD_StdItfReq>
      break;
 8008896:	e012      	b.n	80088be <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fa6d 	bl	8008d80 <USBD_StdEPReq>
      break;
 80088a6:	e00a      	b.n	80088be <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80088ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f005 fe3a 	bl	800e530 <USBD_LL_StallEP>
      break;
 80088bc:	bf00      	nop
  }

  return USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	460b      	mov	r3, r1
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088d6:	7afb      	ldrb	r3, [r7, #11]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d14b      	bne.n	8008974 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80088e2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d134      	bne.n	8008958 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d919      	bls.n	800892e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	1ad2      	subs	r2, r2, r3
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008910:	429a      	cmp	r2, r3
 8008912:	d203      	bcs.n	800891c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008918:	b29b      	uxth	r3, r3
 800891a:	e002      	b.n	8008922 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008920:	b29b      	uxth	r3, r3
 8008922:	461a      	mov	r2, r3
 8008924:	6879      	ldr	r1, [r7, #4]
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 ff54 	bl	80097d4 <USBD_CtlContinueRx>
 800892c:	e038      	b.n	80089a0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008940:	2b03      	cmp	r3, #3
 8008942:	d105      	bne.n	8008950 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 ff51 	bl	80097f8 <USBD_CtlSendStatus>
 8008956:	e023      	b.n	80089a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800895e:	2b05      	cmp	r3, #5
 8008960:	d11e      	bne.n	80089a0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800896a:	2100      	movs	r1, #0
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f005 fddf 	bl	800e530 <USBD_LL_StallEP>
 8008972:	e015      	b.n	80089a0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00d      	beq.n	800899c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008986:	2b03      	cmp	r3, #3
 8008988:	d108      	bne.n	800899c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	7afa      	ldrb	r2, [r7, #11]
 8008994:	4611      	mov	r1, r2
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	4798      	blx	r3
 800899a:	e001      	b.n	80089a0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800899c:	2302      	movs	r3, #2
 800899e:	e000      	b.n	80089a2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b086      	sub	sp, #24
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	460b      	mov	r3, r1
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d17f      	bne.n	8008abe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3314      	adds	r3, #20
 80089c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d15c      	bne.n	8008a88 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d915      	bls.n	8008a06 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 febe 	bl	8009774 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089f8:	2300      	movs	r3, #0
 80089fa:	2200      	movs	r2, #0
 80089fc:	2100      	movs	r1, #0
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f005 fe42 	bl	800e688 <USBD_LL_PrepareReceive>
 8008a04:	e04e      	b.n	8008aa4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	6912      	ldr	r2, [r2, #16]
 8008a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a12:	fb01 f202 	mul.w	r2, r1, r2
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11c      	bne.n	8008a56 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d316      	bcc.n	8008a56 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d20f      	bcs.n	8008a56 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a36:	2200      	movs	r2, #0
 8008a38:	2100      	movs	r1, #0
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fe9a 	bl	8009774 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f005 fe1a 	bl	800e688 <USBD_LL_PrepareReceive>
 8008a54:	e026      	b.n	8008aa4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d105      	bne.n	8008a78 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008a78:	2180      	movs	r1, #128	@ 0x80
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f005 fd58 	bl	800e530 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fecc 	bl	800981e <USBD_CtlReceiveStatus>
 8008a86:	e00d      	b.n	8008aa4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d004      	beq.n	8008a9c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008a9c:	2180      	movs	r1, #128	@ 0x80
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f005 fd46 	bl	800e530 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d11d      	bne.n	8008aea <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f7ff fe81 	bl	80087b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008abc:	e015      	b.n	8008aea <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00d      	beq.n	8008ae6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d108      	bne.n	8008ae6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	7afa      	ldrb	r2, [r7, #11]
 8008ade:	4611      	mov	r1, r2
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	4798      	blx	r3
 8008ae4:	e001      	b.n	8008aea <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e000      	b.n	8008aec <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008afc:	2340      	movs	r3, #64	@ 0x40
 8008afe:	2200      	movs	r2, #0
 8008b00:	2100      	movs	r1, #0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f005 fccf 	bl	800e4a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2240      	movs	r2, #64	@ 0x40
 8008b14:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b18:	2340      	movs	r3, #64	@ 0x40
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2180      	movs	r1, #128	@ 0x80
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f005 fcc1 	bl	800e4a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2240      	movs	r2, #64	@ 0x40
 8008b2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d009      	beq.n	8008b6c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	6852      	ldr	r2, [r2, #4]
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	4611      	mov	r1, r2
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	4798      	blx	r3
  }

  return USBD_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	78fa      	ldrb	r2, [r7, #3]
 8008b86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2204      	movs	r2, #4
 8008bac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr

08008bbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	d105      	bne.n	8008bda <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr

08008be6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d10b      	bne.n	8008c10 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c32:	2b40      	cmp	r3, #64	@ 0x40
 8008c34:	d005      	beq.n	8008c42 <USBD_StdDevReq+0x26>
 8008c36:	2b40      	cmp	r3, #64	@ 0x40
 8008c38:	d84f      	bhi.n	8008cda <USBD_StdDevReq+0xbe>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <USBD_StdDevReq+0x36>
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d14b      	bne.n	8008cda <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
      break;
 8008c50:	e048      	b.n	8008ce4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b09      	cmp	r3, #9
 8008c58:	d839      	bhi.n	8008cce <USBD_StdDevReq+0xb2>
 8008c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c60 <USBD_StdDevReq+0x44>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008cb1 	.word	0x08008cb1
 8008c64:	08008cc5 	.word	0x08008cc5
 8008c68:	08008ccf 	.word	0x08008ccf
 8008c6c:	08008cbb 	.word	0x08008cbb
 8008c70:	08008ccf 	.word	0x08008ccf
 8008c74:	08008c93 	.word	0x08008c93
 8008c78:	08008c89 	.word	0x08008c89
 8008c7c:	08008ccf 	.word	0x08008ccf
 8008c80:	08008ca7 	.word	0x08008ca7
 8008c84:	08008c9d 	.word	0x08008c9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f9dc 	bl	8009048 <USBD_GetDescriptor>
          break;
 8008c90:	e022      	b.n	8008cd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fb3f 	bl	8009318 <USBD_SetAddress>
          break;
 8008c9a:	e01d      	b.n	8008cd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fb7e 	bl	80093a0 <USBD_SetConfig>
          break;
 8008ca4:	e018      	b.n	8008cd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fc07 	bl	80094bc <USBD_GetConfig>
          break;
 8008cae:	e013      	b.n	8008cd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fc37 	bl	8009526 <USBD_GetStatus>
          break;
 8008cb8:	e00e      	b.n	8008cd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fc65 	bl	800958c <USBD_SetFeature>
          break;
 8008cc2:	e009      	b.n	8008cd8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fc74 	bl	80095b4 <USBD_ClrFeature>
          break;
 8008ccc:	e004      	b.n	8008cd8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fcc9 	bl	8009668 <USBD_CtlError>
          break;
 8008cd6:	bf00      	nop
      }
      break;
 8008cd8:	e004      	b.n	8008ce4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fcc3 	bl	8009668 <USBD_CtlError>
      break;
 8008ce2:	bf00      	nop
  }

  return ret;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop

08008cf0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d06:	2b40      	cmp	r3, #64	@ 0x40
 8008d08:	d005      	beq.n	8008d16 <USBD_StdItfReq+0x26>
 8008d0a:	2b40      	cmp	r3, #64	@ 0x40
 8008d0c:	d82e      	bhi.n	8008d6c <USBD_StdItfReq+0x7c>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <USBD_StdItfReq+0x26>
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	d12a      	bne.n	8008d6c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d81d      	bhi.n	8008d5e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	889b      	ldrh	r3, [r3, #4]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d813      	bhi.n	8008d54 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	4798      	blx	r3
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	88db      	ldrh	r3, [r3, #6]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d110      	bne.n	8008d68 <USBD_StdItfReq+0x78>
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10d      	bne.n	8008d68 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fd53 	bl	80097f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d52:	e009      	b.n	8008d68 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fc86 	bl	8009668 <USBD_CtlError>
          break;
 8008d5c:	e004      	b.n	8008d68 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fc81 	bl	8009668 <USBD_CtlError>
          break;
 8008d66:	e000      	b.n	8008d6a <USBD_StdItfReq+0x7a>
          break;
 8008d68:	bf00      	nop
      }
      break;
 8008d6a:	e004      	b.n	8008d76 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fc7a 	bl	8009668 <USBD_CtlError>
      break;
 8008d74:	bf00      	nop
  }

  return USBD_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	889b      	ldrh	r3, [r3, #4]
 8008d92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d9c:	2b40      	cmp	r3, #64	@ 0x40
 8008d9e:	d007      	beq.n	8008db0 <USBD_StdEPReq+0x30>
 8008da0:	2b40      	cmp	r3, #64	@ 0x40
 8008da2:	f200 8146 	bhi.w	8009032 <USBD_StdEPReq+0x2b2>
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00a      	beq.n	8008dc0 <USBD_StdEPReq+0x40>
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	f040 8141 	bne.w	8009032 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
      break;
 8008dbe:	e13d      	b.n	800903c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dc8:	2b20      	cmp	r3, #32
 8008dca:	d10a      	bne.n	8008de2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	4798      	blx	r3
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	e12d      	b.n	800903e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d007      	beq.n	8008dfa <USBD_StdEPReq+0x7a>
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	f300 811b 	bgt.w	8009026 <USBD_StdEPReq+0x2a6>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d072      	beq.n	8008eda <USBD_StdEPReq+0x15a>
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d03a      	beq.n	8008e6e <USBD_StdEPReq+0xee>
 8008df8:	e115      	b.n	8009026 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d002      	beq.n	8008e0a <USBD_StdEPReq+0x8a>
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d015      	beq.n	8008e34 <USBD_StdEPReq+0xb4>
 8008e08:	e02b      	b.n	8008e62 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <USBD_StdEPReq+0xaa>
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b80      	cmp	r3, #128	@ 0x80
 8008e14:	d009      	beq.n	8008e2a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f005 fb88 	bl	800e530 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e20:	2180      	movs	r1, #128	@ 0x80
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f005 fb84 	bl	800e530 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e28:	e020      	b.n	8008e6c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fc1b 	bl	8009668 <USBD_CtlError>
              break;
 8008e32:	e01b      	b.n	8008e6c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	885b      	ldrh	r3, [r3, #2]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10e      	bne.n	8008e5a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <USBD_StdEPReq+0xda>
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b80      	cmp	r3, #128	@ 0x80
 8008e46:	d008      	beq.n	8008e5a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	88db      	ldrh	r3, [r3, #6]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d104      	bne.n	8008e5a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f005 fb6b 	bl	800e530 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fccc 	bl	80097f8 <USBD_CtlSendStatus>

              break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fbff 	bl	8009668 <USBD_CtlError>
              break;
 8008e6a:	bf00      	nop
          }
          break;
 8008e6c:	e0e0      	b.n	8009030 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d002      	beq.n	8008e7e <USBD_StdEPReq+0xfe>
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	d015      	beq.n	8008ea8 <USBD_StdEPReq+0x128>
 8008e7c:	e026      	b.n	8008ecc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00c      	beq.n	8008e9e <USBD_StdEPReq+0x11e>
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	2b80      	cmp	r3, #128	@ 0x80
 8008e88:	d009      	beq.n	8008e9e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f005 fb4e 	bl	800e530 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e94:	2180      	movs	r1, #128	@ 0x80
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f005 fb4a 	bl	800e530 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e9c:	e01c      	b.n	8008ed8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fbe1 	bl	8009668 <USBD_CtlError>
              break;
 8008ea6:	e017      	b.n	8008ed8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	885b      	ldrh	r3, [r3, #2]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d112      	bne.n	8008ed6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008eb0:	7bbb      	ldrb	r3, [r7, #14]
 8008eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f005 fb55 	bl	800e56e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fc97 	bl	80097f8 <USBD_CtlSendStatus>
              }
              break;
 8008eca:	e004      	b.n	8008ed6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fbca 	bl	8009668 <USBD_CtlError>
              break;
 8008ed4:	e000      	b.n	8008ed8 <USBD_StdEPReq+0x158>
              break;
 8008ed6:	bf00      	nop
          }
          break;
 8008ed8:	e0aa      	b.n	8009030 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d002      	beq.n	8008eea <USBD_StdEPReq+0x16a>
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d032      	beq.n	8008f4e <USBD_StdEPReq+0x1ce>
 8008ee8:	e097      	b.n	800901a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <USBD_StdEPReq+0x180>
 8008ef0:	7bbb      	ldrb	r3, [r7, #14]
 8008ef2:	2b80      	cmp	r3, #128	@ 0x80
 8008ef4:	d004      	beq.n	8008f00 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fbb5 	bl	8009668 <USBD_CtlError>
                break;
 8008efe:	e091      	b.n	8009024 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	da0b      	bge.n	8008f20 <USBD_StdEPReq+0x1a0>
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	3310      	adds	r3, #16
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	e00b      	b.n	8008f38 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4413      	add	r3, r2
 8008f36:	3304      	adds	r3, #4
 8008f38:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2202      	movs	r2, #2
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fbf8 	bl	800973c <USBD_CtlSendData>
              break;
 8008f4c:	e06a      	b.n	8009024 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da11      	bge.n	8008f7a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	f003 020f 	and.w	r2, r3, #15
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	3318      	adds	r3, #24
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d117      	bne.n	8008fa0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fb78 	bl	8009668 <USBD_CtlError>
                  break;
 8008f78:	e054      	b.n	8009024 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	f003 020f 	and.w	r2, r3, #15
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	440b      	add	r3, r1
 8008f8c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d104      	bne.n	8008fa0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fb65 	bl	8009668 <USBD_CtlError>
                  break;
 8008f9e:	e041      	b.n	8009024 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da0b      	bge.n	8008fc0 <USBD_StdEPReq+0x240>
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	3310      	adds	r3, #16
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	e00b      	b.n	8008fd8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d002      	beq.n	8008fe6 <USBD_StdEPReq+0x266>
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b80      	cmp	r3, #128	@ 0x80
 8008fe4:	d103      	bne.n	8008fee <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	e00e      	b.n	800900c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f005 fada 	bl	800e5ac <USBD_LL_IsStallEP>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2201      	movs	r2, #1
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	e002      	b.n	800900c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2202      	movs	r2, #2
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fb92 	bl	800973c <USBD_CtlSendData>
              break;
 8009018:	e004      	b.n	8009024 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fb23 	bl	8009668 <USBD_CtlError>
              break;
 8009022:	bf00      	nop
          }
          break;
 8009024:	e004      	b.n	8009030 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fb1d 	bl	8009668 <USBD_CtlError>
          break;
 800902e:	bf00      	nop
      }
      break;
 8009030:	e004      	b.n	800903c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fb17 	bl	8009668 <USBD_CtlError>
      break;
 800903a:	bf00      	nop
  }

  return ret;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	885b      	ldrh	r3, [r3, #2]
 8009062:	0a1b      	lsrs	r3, r3, #8
 8009064:	b29b      	uxth	r3, r3
 8009066:	3b01      	subs	r3, #1
 8009068:	2b06      	cmp	r3, #6
 800906a:	f200 8128 	bhi.w	80092be <USBD_GetDescriptor+0x276>
 800906e:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <USBD_GetDescriptor+0x2c>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	08009091 	.word	0x08009091
 8009078:	080090a9 	.word	0x080090a9
 800907c:	080090e9 	.word	0x080090e9
 8009080:	080092bf 	.word	0x080092bf
 8009084:	080092bf 	.word	0x080092bf
 8009088:	0800925f 	.word	0x0800925f
 800908c:	0800928b 	.word	0x0800928b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
      break;
 80090a6:	e112      	b.n	80092ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7c1b      	ldrb	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10d      	bne.n	80090cc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	f107 0208 	add.w	r2, r7, #8
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3301      	adds	r3, #1
 80090c6:	2202      	movs	r2, #2
 80090c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090ca:	e100      	b.n	80092ce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	f107 0208 	add.w	r2, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	2202      	movs	r2, #2
 80090e4:	701a      	strb	r2, [r3, #0]
      break;
 80090e6:	e0f2      	b.n	80092ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	885b      	ldrh	r3, [r3, #2]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b05      	cmp	r3, #5
 80090f0:	f200 80ac 	bhi.w	800924c <USBD_GetDescriptor+0x204>
 80090f4:	a201      	add	r2, pc, #4	@ (adr r2, 80090fc <USBD_GetDescriptor+0xb4>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009115 	.word	0x08009115
 8009100:	08009149 	.word	0x08009149
 8009104:	0800917d 	.word	0x0800917d
 8009108:	080091b1 	.word	0x080091b1
 800910c:	080091e5 	.word	0x080091e5
 8009110:	08009219 	.word	0x08009219
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	7c12      	ldrb	r2, [r2, #16]
 800912c:	f107 0108 	add.w	r1, r7, #8
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
 8009134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009136:	e091      	b.n	800925c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fa94 	bl	8009668 <USBD_CtlError>
            err++;
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	3301      	adds	r3, #1
 8009144:	72fb      	strb	r3, [r7, #11]
          break;
 8009146:	e089      	b.n	800925c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	7c12      	ldrb	r2, [r2, #16]
 8009160:	f107 0108 	add.w	r1, r7, #8
 8009164:	4610      	mov	r0, r2
 8009166:	4798      	blx	r3
 8009168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800916a:	e077      	b.n	800925c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa7a 	bl	8009668 <USBD_CtlError>
            err++;
 8009174:	7afb      	ldrb	r3, [r7, #11]
 8009176:	3301      	adds	r3, #1
 8009178:	72fb      	strb	r3, [r7, #11]
          break;
 800917a:	e06f      	b.n	800925c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00b      	beq.n	80091a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	7c12      	ldrb	r2, [r2, #16]
 8009194:	f107 0108 	add.w	r1, r7, #8
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800919e:	e05d      	b.n	800925c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fa60 	bl	8009668 <USBD_CtlError>
            err++;
 80091a8:	7afb      	ldrb	r3, [r7, #11]
 80091aa:	3301      	adds	r3, #1
 80091ac:	72fb      	strb	r3, [r7, #11]
          break;
 80091ae:	e055      	b.n	800925c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	7c12      	ldrb	r2, [r2, #16]
 80091c8:	f107 0108 	add.w	r1, r7, #8
 80091cc:	4610      	mov	r0, r2
 80091ce:	4798      	blx	r3
 80091d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091d2:	e043      	b.n	800925c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa46 	bl	8009668 <USBD_CtlError>
            err++;
 80091dc:	7afb      	ldrb	r3, [r7, #11]
 80091de:	3301      	adds	r3, #1
 80091e0:	72fb      	strb	r3, [r7, #11]
          break;
 80091e2:	e03b      	b.n	800925c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 0108 	add.w	r1, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009206:	e029      	b.n	800925c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa2c 	bl	8009668 <USBD_CtlError>
            err++;
 8009210:	7afb      	ldrb	r3, [r7, #11]
 8009212:	3301      	adds	r3, #1
 8009214:	72fb      	strb	r3, [r7, #11]
          break;
 8009216:	e021      	b.n	800925c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	7c12      	ldrb	r2, [r2, #16]
 8009230:	f107 0108 	add.w	r1, r7, #8
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800923a:	e00f      	b.n	800925c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa12 	bl	8009668 <USBD_CtlError>
            err++;
 8009244:	7afb      	ldrb	r3, [r7, #11]
 8009246:	3301      	adds	r3, #1
 8009248:	72fb      	strb	r3, [r7, #11]
          break;
 800924a:	e007      	b.n	800925c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fa0a 	bl	8009668 <USBD_CtlError>
          err++;
 8009254:	7afb      	ldrb	r3, [r7, #11]
 8009256:	3301      	adds	r3, #1
 8009258:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800925a:	e038      	b.n	80092ce <USBD_GetDescriptor+0x286>
 800925c:	e037      	b.n	80092ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	7c1b      	ldrb	r3, [r3, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800926c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800926e:	f107 0208 	add.w	r2, r7, #8
 8009272:	4610      	mov	r0, r2
 8009274:	4798      	blx	r3
 8009276:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009278:	e029      	b.n	80092ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f9f3 	bl	8009668 <USBD_CtlError>
        err++;
 8009282:	7afb      	ldrb	r3, [r7, #11]
 8009284:	3301      	adds	r3, #1
 8009286:	72fb      	strb	r3, [r7, #11]
      break;
 8009288:	e021      	b.n	80092ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	7c1b      	ldrb	r3, [r3, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10d      	bne.n	80092ae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929a:	f107 0208 	add.w	r2, r7, #8
 800929e:	4610      	mov	r0, r2
 80092a0:	4798      	blx	r3
 80092a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	2207      	movs	r2, #7
 80092aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092ac:	e00f      	b.n	80092ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f9d9 	bl	8009668 <USBD_CtlError>
        err++;
 80092b6:	7afb      	ldrb	r3, [r7, #11]
 80092b8:	3301      	adds	r3, #1
 80092ba:	72fb      	strb	r3, [r7, #11]
      break;
 80092bc:	e007      	b.n	80092ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f9d1 	bl	8009668 <USBD_CtlError>
      err++;
 80092c6:	7afb      	ldrb	r3, [r7, #11]
 80092c8:	3301      	adds	r3, #1
 80092ca:	72fb      	strb	r3, [r7, #11]
      break;
 80092cc:	bf00      	nop
  }

  if (err != 0U)
 80092ce:	7afb      	ldrb	r3, [r7, #11]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11c      	bne.n	800930e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80092d4:	893b      	ldrh	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d011      	beq.n	80092fe <USBD_GetDescriptor+0x2b6>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00d      	beq.n	80092fe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	88da      	ldrh	r2, [r3, #6]
 80092e6:	893b      	ldrh	r3, [r7, #8]
 80092e8:	4293      	cmp	r3, r2
 80092ea:	bf28      	it	cs
 80092ec:	4613      	movcs	r3, r2
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092f2:	893b      	ldrh	r3, [r7, #8]
 80092f4:	461a      	mov	r2, r3
 80092f6:	68f9      	ldr	r1, [r7, #12]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa1f 	bl	800973c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	88db      	ldrh	r3, [r3, #6]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d104      	bne.n	8009310 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fa76 	bl	80097f8 <USBD_CtlSendStatus>
 800930c:	e000      	b.n	8009310 <USBD_GetDescriptor+0x2c8>
    return;
 800930e:	bf00      	nop
    }
  }
}
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop

08009318 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	889b      	ldrh	r3, [r3, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d130      	bne.n	800938c <USBD_SetAddress+0x74>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	88db      	ldrh	r3, [r3, #6]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d12c      	bne.n	800938c <USBD_SetAddress+0x74>
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	885b      	ldrh	r3, [r3, #2]
 8009336:	2b7f      	cmp	r3, #127	@ 0x7f
 8009338:	d828      	bhi.n	800938c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	885b      	ldrh	r3, [r3, #2]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009344:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800934c:	2b03      	cmp	r3, #3
 800934e:	d104      	bne.n	800935a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f988 	bl	8009668 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009358:	e01d      	b.n	8009396 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7bfa      	ldrb	r2, [r7, #15]
 800935e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f005 f94c 	bl	800e604 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fa43 	bl	80097f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d004      	beq.n	8009382 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009380:	e009      	b.n	8009396 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800938a:	e004      	b.n	8009396 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f96a 	bl	8009668 <USBD_CtlError>
  }
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	885b      	ldrh	r3, [r3, #2]
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	4b41      	ldr	r3, [pc, #260]	@ (80094b8 <USBD_SetConfig+0x118>)
 80093b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093b4:	4b40      	ldr	r3, [pc, #256]	@ (80094b8 <USBD_SetConfig+0x118>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d904      	bls.n	80093c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f952 	bl	8009668 <USBD_CtlError>
 80093c4:	e075      	b.n	80094b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d002      	beq.n	80093d6 <USBD_SetConfig+0x36>
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d023      	beq.n	800941c <USBD_SetConfig+0x7c>
 80093d4:	e062      	b.n	800949c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80093d6:	4b38      	ldr	r3, [pc, #224]	@ (80094b8 <USBD_SetConfig+0x118>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01a      	beq.n	8009414 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80093de:	4b36      	ldr	r3, [pc, #216]	@ (80094b8 <USBD_SetConfig+0x118>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2203      	movs	r2, #3
 80093ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093f0:	4b31      	ldr	r3, [pc, #196]	@ (80094b8 <USBD_SetConfig+0x118>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff f9e7 	bl	80087ca <USBD_SetClassConfig>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d104      	bne.n	800940c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f92f 	bl	8009668 <USBD_CtlError>
            return;
 800940a:	e052      	b.n	80094b2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f9f3 	bl	80097f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009412:	e04e      	b.n	80094b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f9ef 	bl	80097f8 <USBD_CtlSendStatus>
        break;
 800941a:	e04a      	b.n	80094b2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800941c:	4b26      	ldr	r3, [pc, #152]	@ (80094b8 <USBD_SetConfig+0x118>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d112      	bne.n	800944a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2202      	movs	r2, #2
 8009428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800942c:	4b22      	ldr	r3, [pc, #136]	@ (80094b8 <USBD_SetConfig+0x118>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009436:	4b20      	ldr	r3, [pc, #128]	@ (80094b8 <USBD_SetConfig+0x118>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff f9e3 	bl	8008808 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f9d8 	bl	80097f8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009448:	e033      	b.n	80094b2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800944a:	4b1b      	ldr	r3, [pc, #108]	@ (80094b8 <USBD_SetConfig+0x118>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	429a      	cmp	r2, r3
 8009456:	d01d      	beq.n	8009494 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	b2db      	uxtb	r3, r3
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff f9d1 	bl	8008808 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009466:	4b14      	ldr	r3, [pc, #80]	@ (80094b8 <USBD_SetConfig+0x118>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009470:	4b11      	ldr	r3, [pc, #68]	@ (80094b8 <USBD_SetConfig+0x118>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7ff f9a7 	bl	80087ca <USBD_SetClassConfig>
 800947c:	4603      	mov	r3, r0
 800947e:	2b02      	cmp	r3, #2
 8009480:	d104      	bne.n	800948c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f8ef 	bl	8009668 <USBD_CtlError>
            return;
 800948a:	e012      	b.n	80094b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f9b3 	bl	80097f8 <USBD_CtlSendStatus>
        break;
 8009492:	e00e      	b.n	80094b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f9af 	bl	80097f8 <USBD_CtlSendStatus>
        break;
 800949a:	e00a      	b.n	80094b2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f8e2 	bl	8009668 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80094a4:	4b04      	ldr	r3, [pc, #16]	@ (80094b8 <USBD_SetConfig+0x118>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7ff f9ac 	bl	8008808 <USBD_ClrClassConfig>
        break;
 80094b0:	bf00      	nop
    }
  }
}
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20000378 	.word	0x20000378

080094bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	88db      	ldrh	r3, [r3, #6]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d004      	beq.n	80094d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f8c9 	bl	8009668 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094d6:	e022      	b.n	800951e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094de:	2b02      	cmp	r3, #2
 80094e0:	dc02      	bgt.n	80094e8 <USBD_GetConfig+0x2c>
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	dc03      	bgt.n	80094ee <USBD_GetConfig+0x32>
 80094e6:	e015      	b.n	8009514 <USBD_GetConfig+0x58>
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d00b      	beq.n	8009504 <USBD_GetConfig+0x48>
 80094ec:	e012      	b.n	8009514 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3308      	adds	r3, #8
 80094f8:	2201      	movs	r2, #1
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f91d 	bl	800973c <USBD_CtlSendData>
        break;
 8009502:	e00c      	b.n	800951e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3304      	adds	r3, #4
 8009508:	2201      	movs	r2, #1
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f915 	bl	800973c <USBD_CtlSendData>
        break;
 8009512:	e004      	b.n	800951e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f8a6 	bl	8009668 <USBD_CtlError>
        break;
 800951c:	bf00      	nop
}
 800951e:	bf00      	nop
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009536:	3b01      	subs	r3, #1
 8009538:	2b02      	cmp	r3, #2
 800953a:	d81e      	bhi.n	800957a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	88db      	ldrh	r3, [r3, #6]
 8009540:	2b02      	cmp	r3, #2
 8009542:	d004      	beq.n	800954e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f88e 	bl	8009668 <USBD_CtlError>
        break;
 800954c:	e01a      	b.n	8009584 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f043 0202 	orr.w	r2, r3, #2
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	330c      	adds	r3, #12
 800956e:	2202      	movs	r2, #2
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f8e2 	bl	800973c <USBD_CtlSendData>
      break;
 8009578:	e004      	b.n	8009584 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f873 	bl	8009668 <USBD_CtlError>
      break;
 8009582:	bf00      	nop
  }
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	885b      	ldrh	r3, [r3, #2]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d106      	bne.n	80095ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f926 	bl	80097f8 <USBD_CtlSendStatus>
  }
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095c4:	3b01      	subs	r3, #1
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d80b      	bhi.n	80095e2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	885b      	ldrh	r3, [r3, #2]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d10c      	bne.n	80095ec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f90c 	bl	80097f8 <USBD_CtlSendStatus>
      }
      break;
 80095e0:	e004      	b.n	80095ec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f83f 	bl	8009668 <USBD_CtlError>
      break;
 80095ea:	e000      	b.n	80095ee <USBD_ClrFeature+0x3a>
      break;
 80095ec:	bf00      	nop
  }
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781a      	ldrb	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	785a      	ldrb	r2, [r3, #1]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	3302      	adds	r3, #2
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	3303      	adds	r3, #3
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	021b      	lsls	r3, r3, #8
 8009620:	b29b      	uxth	r3, r3
 8009622:	4413      	add	r3, r2
 8009624:	b29a      	uxth	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	3304      	adds	r3, #4
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	3305      	adds	r3, #5
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	b29b      	uxth	r3, r3
 800963c:	4413      	add	r3, r2
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	3306      	adds	r3, #6
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	3307      	adds	r3, #7
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	b29b      	uxth	r3, r3
 8009656:	4413      	add	r3, r2
 8009658:	b29a      	uxth	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	80da      	strh	r2, [r3, #6]

}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	bc80      	pop	{r7}
 8009666:	4770      	bx	lr

08009668 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009672:	2180      	movs	r1, #128	@ 0x80
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f004 ff5b 	bl	800e530 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f004 ff57 	bl	800e530 <USBD_LL_StallEP>
}
 8009682:	bf00      	nop
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b086      	sub	sp, #24
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d032      	beq.n	8009706 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 f834 	bl	800970e <USBD_GetLen>
 80096a6:	4603      	mov	r3, r0
 80096a8:	3301      	adds	r3, #1
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	75fa      	strb	r2, [r7, #23]
 80096ba:	461a      	mov	r2, r3
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4413      	add	r3, r2
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	75fa      	strb	r2, [r7, #23]
 80096cc:	461a      	mov	r2, r3
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4413      	add	r3, r2
 80096d2:	2203      	movs	r2, #3
 80096d4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096d6:	e012      	b.n	80096fe <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	60fa      	str	r2, [r7, #12]
 80096de:	7dfa      	ldrb	r2, [r7, #23]
 80096e0:	1c51      	adds	r1, r2, #1
 80096e2:	75f9      	strb	r1, [r7, #23]
 80096e4:	4611      	mov	r1, r2
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	440a      	add	r2, r1
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	75fa      	strb	r2, [r7, #23]
 80096f4:	461a      	mov	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	2200      	movs	r2, #0
 80096fc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e8      	bne.n	80096d8 <USBD_GetString+0x4e>
    }
  }
}
 8009706:	bf00      	nop
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800970e:	b480      	push	{r7}
 8009710:	b085      	sub	sp, #20
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800971a:	e005      	b.n	8009728 <USBD_GetLen+0x1a>
  {
    len++;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	3301      	adds	r3, #1
 8009720:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3301      	adds	r3, #1
 8009726:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1f5      	bne.n	800971c <USBD_GetLen+0xe>
  }

  return len;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	bc80      	pop	{r7}
 800973a:	4770      	bx	lr

0800973c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2202      	movs	r2, #2
 800974e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009752:	88fa      	ldrh	r2, [r7, #6]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009758:	88fa      	ldrh	r2, [r7, #6]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800975e:	88fb      	ldrh	r3, [r7, #6]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	2100      	movs	r1, #0
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f004 ff6c 	bl	800e642 <USBD_LL_Transmit>

  return USBD_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	4613      	mov	r3, r2
 8009780:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	2100      	movs	r1, #0
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f004 ff5a 	bl	800e642 <USBD_LL_Transmit>

  return USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	4613      	mov	r3, r2
 80097a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2203      	movs	r2, #3
 80097aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80097b6:	88fa      	ldrh	r2, [r7, #6]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097be:	88fb      	ldrh	r3, [r7, #6]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	2100      	movs	r1, #0
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f004 ff5f 	bl	800e688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	4613      	mov	r3, r2
 80097e0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097e2:	88fb      	ldrh	r3, [r7, #6]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	2100      	movs	r1, #0
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f004 ff4d 	bl	800e688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2204      	movs	r2, #4
 8009804:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009808:	2300      	movs	r3, #0
 800980a:	2200      	movs	r2, #0
 800980c:	2100      	movs	r1, #0
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f004 ff17 	bl	800e642 <USBD_LL_Transmit>

  return USBD_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2205      	movs	r2, #5
 800982a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800982e:	2300      	movs	r3, #0
 8009830:	2200      	movs	r2, #0
 8009832:	2100      	movs	r1, #0
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f004 ff27 	bl	800e688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	4a08      	ldr	r2, [pc, #32]	@ (8009874 <disk_status+0x30>)
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	79fa      	ldrb	r2, [r7, #7]
 800985c:	4905      	ldr	r1, [pc, #20]	@ (8009874 <disk_status+0x30>)
 800985e:	440a      	add	r2, r1
 8009860:	7a12      	ldrb	r2, [r2, #8]
 8009862:	4610      	mov	r0, r2
 8009864:	4798      	blx	r3
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
  return stat;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	2000059c 	.word	0x2000059c

08009878 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009886:	79fb      	ldrb	r3, [r7, #7]
 8009888:	4a0d      	ldr	r2, [pc, #52]	@ (80098c0 <disk_initialize+0x48>)
 800988a:	5cd3      	ldrb	r3, [r2, r3]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d111      	bne.n	80098b4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009890:	79fb      	ldrb	r3, [r7, #7]
 8009892:	4a0b      	ldr	r2, [pc, #44]	@ (80098c0 <disk_initialize+0x48>)
 8009894:	2101      	movs	r1, #1
 8009896:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	4a09      	ldr	r2, [pc, #36]	@ (80098c0 <disk_initialize+0x48>)
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	79fa      	ldrb	r2, [r7, #7]
 80098a6:	4906      	ldr	r1, [pc, #24]	@ (80098c0 <disk_initialize+0x48>)
 80098a8:	440a      	add	r2, r1
 80098aa:	7a12      	ldrb	r2, [r2, #8]
 80098ac:	4610      	mov	r0, r2
 80098ae:	4798      	blx	r3
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	2000059c 	.word	0x2000059c

080098c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80098c4:	b590      	push	{r4, r7, lr}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	607a      	str	r2, [r7, #4]
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009900 <disk_read+0x3c>)
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	689c      	ldr	r4, [r3, #8]
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	4a07      	ldr	r2, [pc, #28]	@ (8009900 <disk_read+0x3c>)
 80098e4:	4413      	add	r3, r2
 80098e6:	7a18      	ldrb	r0, [r3, #8]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	47a0      	blx	r4
 80098f0:	4603      	mov	r3, r0
 80098f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd90      	pop	{r4, r7, pc}
 80098fe:	bf00      	nop
 8009900:	2000059c 	.word	0x2000059c

08009904 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009904:	b590      	push	{r4, r7, lr}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	4a0a      	ldr	r2, [pc, #40]	@ (8009940 <disk_write+0x3c>)
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	68dc      	ldr	r4, [r3, #12]
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	4a07      	ldr	r2, [pc, #28]	@ (8009940 <disk_write+0x3c>)
 8009924:	4413      	add	r3, r2
 8009926:	7a18      	ldrb	r0, [r3, #8]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	68b9      	ldr	r1, [r7, #8]
 800992e:	47a0      	blx	r4
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]
  return res;
 8009934:	7dfb      	ldrb	r3, [r7, #23]
}
 8009936:	4618      	mov	r0, r3
 8009938:	371c      	adds	r7, #28
 800993a:	46bd      	mov	sp, r7
 800993c:	bd90      	pop	{r4, r7, pc}
 800993e:	bf00      	nop
 8009940:	2000059c 	.word	0x2000059c

08009944 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	603a      	str	r2, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
 8009950:	460b      	mov	r3, r1
 8009952:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	4a09      	ldr	r2, [pc, #36]	@ (800997c <disk_ioctl+0x38>)
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	79fa      	ldrb	r2, [r7, #7]
 8009962:	4906      	ldr	r1, [pc, #24]	@ (800997c <disk_ioctl+0x38>)
 8009964:	440a      	add	r2, r1
 8009966:	7a10      	ldrb	r0, [r2, #8]
 8009968:	79b9      	ldrb	r1, [r7, #6]
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	4798      	blx	r3
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
  return res;
 8009972:	7bfb      	ldrb	r3, [r7, #15]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	2000059c 	.word	0x2000059c

08009980 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009994:	e007      	b.n	80099a6 <mem_cpy+0x26>
		*d++ = *s++;
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	1c53      	adds	r3, r2, #1
 800999a:	613b      	str	r3, [r7, #16]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	1c59      	adds	r1, r3, #1
 80099a0:	6179      	str	r1, [r7, #20]
 80099a2:	7812      	ldrb	r2, [r2, #0]
 80099a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	1e5a      	subs	r2, r3, #1
 80099aa:	607a      	str	r2, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1f2      	bne.n	8009996 <mem_cpy+0x16>
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bc80      	pop	{r7}
 80099ba:	4770      	bx	lr

080099bc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80099cc:	e005      	b.n	80099da <mem_set+0x1e>
		*d++ = (BYTE)val;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	617a      	str	r2, [r7, #20]
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	1e5a      	subs	r2, r3, #1
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1f4      	bne.n	80099ce <mem_set+0x12>
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bc80      	pop	{r7}
 80099ee:	4770      	bx	lr

080099f0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80099f0:	b480      	push	{r7}
 80099f2:	b089      	sub	sp, #36	@ 0x24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	61fb      	str	r3, [r7, #28]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009a08:	bf00      	nop
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	1e5a      	subs	r2, r3, #1
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00d      	beq.n	8009a30 <mem_cmp+0x40>
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	61fa      	str	r2, [r7, #28]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	61ba      	str	r2, [r7, #24]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	1acb      	subs	r3, r1, r3
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0ec      	beq.n	8009a0a <mem_cmp+0x1a>
	return r;
 8009a30:	697b      	ldr	r3, [r7, #20]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3724      	adds	r7, #36	@ 0x24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr

08009a3c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009a46:	e002      	b.n	8009a4e <chk_chr+0x12>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <chk_chr+0x26>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d1f2      	bne.n	8009a48 <chk_chr+0xc>
	return *str;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	781b      	ldrb	r3, [r3, #0]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bc80      	pop	{r7}
 8009a6e:	4770      	bx	lr

08009a70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60bb      	str	r3, [r7, #8]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	60fb      	str	r3, [r7, #12]
 8009a82:	e03b      	b.n	8009afc <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8009a84:	4931      	ldr	r1, [pc, #196]	@ (8009b4c <chk_lock+0xdc>)
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	440b      	add	r3, r1
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d02c      	beq.n	8009af2 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009a98:	492c      	ldr	r1, [pc, #176]	@ (8009b4c <chk_lock+0xdc>)
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	440b      	add	r3, r1
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d120      	bne.n	8009af6 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8009ab4:	4925      	ldr	r1, [pc, #148]	@ (8009b4c <chk_lock+0xdc>)
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	005b      	lsls	r3, r3, #1
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009acc:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d111      	bne.n	8009af6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8009ad2:	491e      	ldr	r1, [pc, #120]	@ (8009b4c <chk_lock+0xdc>)
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	881a      	ldrh	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009aea:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d102      	bne.n	8009af6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8009af0:	e007      	b.n	8009b02 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8009af2:	2301      	movs	r3, #1
 8009af4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d9c0      	bls.n	8009a84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d109      	bne.n	8009b1c <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <chk_lock+0xa4>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d101      	bne.n	8009b18 <chk_lock+0xa8>
 8009b14:	2300      	movs	r3, #0
 8009b16:	e013      	b.n	8009b40 <chk_lock+0xd0>
 8009b18:	2312      	movs	r3, #18
 8009b1a:	e011      	b.n	8009b40 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <chk_lock+0xca>
 8009b22:	490a      	ldr	r1, [pc, #40]	@ (8009b4c <chk_lock+0xdc>)
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4613      	mov	r3, r2
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	330a      	adds	r3, #10
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b38:	d101      	bne.n	8009b3e <chk_lock+0xce>
 8009b3a:	2310      	movs	r3, #16
 8009b3c:	e000      	b.n	8009b40 <chk_lock+0xd0>
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bc80      	pop	{r7}
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	20000384 	.word	0x20000384

08009b50 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b56:	2300      	movs	r3, #0
 8009b58:	607b      	str	r3, [r7, #4]
 8009b5a:	e002      	b.n	8009b62 <enq_lock+0x12>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	607b      	str	r3, [r7, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d809      	bhi.n	8009b7c <enq_lock+0x2c>
 8009b68:	490a      	ldr	r1, [pc, #40]	@ (8009b94 <enq_lock+0x44>)
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	440b      	add	r3, r1
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1ef      	bne.n	8009b5c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	bf14      	ite	ne
 8009b82:	2301      	movne	r3, #1
 8009b84:	2300      	moveq	r3, #0
 8009b86:	b2db      	uxtb	r3, r3
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bc80      	pop	{r7}
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20000384 	.word	0x20000384

08009b98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	e02e      	b.n	8009c06 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8009ba8:	4958      	ldr	r1, [pc, #352]	@ (8009d0c <inc_lock+0x174>)
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	4613      	mov	r3, r2
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	4413      	add	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d11d      	bne.n	8009c00 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8009bc4:	4951      	ldr	r1, [pc, #324]	@ (8009d0c <inc_lock+0x174>)
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bdc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d10e      	bne.n	8009c00 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8009be2:	494a      	ldr	r1, [pc, #296]	@ (8009d0c <inc_lock+0x174>)
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	4613      	mov	r3, r2
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	4413      	add	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	440b      	add	r3, r1
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	881a      	ldrh	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bfa:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d006      	beq.n	8009c0e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3301      	adds	r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d9cd      	bls.n	8009ba8 <inc_lock+0x10>
 8009c0c:	e000      	b.n	8009c10 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8009c0e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d148      	bne.n	8009ca8 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c16:	2300      	movs	r3, #0
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	e002      	b.n	8009c22 <inc_lock+0x8a>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d809      	bhi.n	8009c3c <inc_lock+0xa4>
 8009c28:	4938      	ldr	r1, [pc, #224]	@ (8009d0c <inc_lock+0x174>)
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1ef      	bne.n	8009c1c <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d101      	bne.n	8009c46 <inc_lock+0xae>
 8009c42:	2300      	movs	r3, #0
 8009c44:	e05d      	b.n	8009d02 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c4c:	6819      	ldr	r1, [r3, #0]
 8009c4e:	482f      	ldr	r0, [pc, #188]	@ (8009d0c <inc_lock+0x174>)
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4613      	mov	r3, r2
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4403      	add	r3, r0
 8009c5c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c64:	6899      	ldr	r1, [r3, #8]
 8009c66:	4829      	ldr	r0, [pc, #164]	@ (8009d0c <inc_lock+0x174>)
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4403      	add	r3, r0
 8009c74:	3304      	adds	r3, #4
 8009c76:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c7e:	88d8      	ldrh	r0, [r3, #6]
 8009c80:	4922      	ldr	r1, [pc, #136]	@ (8009d0c <inc_lock+0x174>)
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4613      	mov	r3, r2
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	4413      	add	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	440b      	add	r3, r1
 8009c8e:	3308      	adds	r3, #8
 8009c90:	4602      	mov	r2, r0
 8009c92:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009c94:	491d      	ldr	r1, [pc, #116]	@ (8009d0c <inc_lock+0x174>)
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	440b      	add	r3, r1
 8009ca2:	330a      	adds	r3, #10
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00c      	beq.n	8009cc8 <inc_lock+0x130>
 8009cae:	4917      	ldr	r1, [pc, #92]	@ (8009d0c <inc_lock+0x174>)
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	440b      	add	r3, r1
 8009cbc:	330a      	adds	r3, #10
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <inc_lock+0x130>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e01c      	b.n	8009d02 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10b      	bne.n	8009ce6 <inc_lock+0x14e>
 8009cce:	490f      	ldr	r1, [pc, #60]	@ (8009d0c <inc_lock+0x174>)
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	330a      	adds	r3, #10
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	b299      	uxth	r1, r3
 8009ce4:	e001      	b.n	8009cea <inc_lock+0x152>
 8009ce6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009cea:	4808      	ldr	r0, [pc, #32]	@ (8009d0c <inc_lock+0x174>)
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	005b      	lsls	r3, r3, #1
 8009cf2:	4413      	add	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4403      	add	r3, r0
 8009cf8:	330a      	adds	r3, #10
 8009cfa:	460a      	mov	r2, r1
 8009cfc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3301      	adds	r3, #1
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bc80      	pop	{r7}
 8009d0a:	4770      	bx	lr
 8009d0c:	20000384 	.word	0x20000384

08009d10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	607b      	str	r3, [r7, #4]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d82e      	bhi.n	8009d82 <dec_lock+0x72>
		n = Files[i].ctr;
 8009d24:	491b      	ldr	r1, [pc, #108]	@ (8009d94 <dec_lock+0x84>)
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	005b      	lsls	r3, r3, #1
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	440b      	add	r3, r1
 8009d32:	330a      	adds	r3, #10
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009d38:	89fb      	ldrh	r3, [r7, #14]
 8009d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d3e:	d101      	bne.n	8009d44 <dec_lock+0x34>
 8009d40:	2300      	movs	r3, #0
 8009d42:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009d44:	89fb      	ldrh	r3, [r7, #14]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <dec_lock+0x40>
 8009d4a:	89fb      	ldrh	r3, [r7, #14]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009d50:	4910      	ldr	r1, [pc, #64]	@ (8009d94 <dec_lock+0x84>)
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	4613      	mov	r3, r2
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	330a      	adds	r3, #10
 8009d60:	89fa      	ldrh	r2, [r7, #14]
 8009d62:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009d64:	89fb      	ldrh	r3, [r7, #14]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d108      	bne.n	8009d7c <dec_lock+0x6c>
 8009d6a:	490a      	ldr	r1, [pc, #40]	@ (8009d94 <dec_lock+0x84>)
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	4413      	add	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	440b      	add	r3, r1
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	737b      	strb	r3, [r7, #13]
 8009d80:	e001      	b.n	8009d86 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009d82:	2302      	movs	r3, #2
 8009d84:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009d86:	7b7b      	ldrb	r3, [r7, #13]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bc80      	pop	{r7}
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20000384 	.word	0x20000384

08009d98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e016      	b.n	8009dd4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009da6:	4910      	ldr	r1, [pc, #64]	@ (8009de8 <clear_lock+0x50>)
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	4613      	mov	r3, r2
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	4413      	add	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	440b      	add	r3, r1
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d108      	bne.n	8009dce <clear_lock+0x36>
 8009dbc:	490a      	ldr	r1, [pc, #40]	@ (8009de8 <clear_lock+0x50>)
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d9e5      	bls.n	8009da6 <clear_lock+0xe>
	}
}
 8009dda:	bf00      	nop
 8009ddc:	bf00      	nop
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bc80      	pop	{r7}
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20000384 	.word	0x20000384

08009dec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dfe:	791b      	ldrb	r3, [r3, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d040      	beq.n	8009e86 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e14:	7858      	ldrb	r0, [r3, #1]
 8009e16:	6879      	ldr	r1, [r7, #4]
 8009e18:	2301      	movs	r3, #1
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	f7ff fd72 	bl	8009904 <disk_write>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <sync_window+0x40>
			res = FR_DISK_ERR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	73fb      	strb	r3, [r7, #15]
 8009e2a:	e02c      	b.n	8009e86 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e32:	2200      	movs	r2, #0
 8009e34:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	1ad2      	subs	r2, r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d21b      	bcs.n	8009e86 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e54:	78db      	ldrb	r3, [r3, #3]
 8009e56:	613b      	str	r3, [r7, #16]
 8009e58:	e012      	b.n	8009e80 <sync_window+0x94>
					wsect += fs->fsize;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	4413      	add	r3, r2
 8009e66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e6e:	7858      	ldrb	r0, [r3, #1]
 8009e70:	6879      	ldr	r1, [r7, #4]
 8009e72:	2301      	movs	r3, #1
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	f7ff fd45 	bl	8009904 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	613b      	str	r3, [r7, #16]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d8e9      	bhi.n	8009e5a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d01e      	beq.n	8009eea <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff ff9d 	bl	8009dec <sync_window>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d116      	bne.n	8009eea <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec2:	7858      	ldrb	r0, [r3, #1]
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	f7ff fcfb 	bl	80098c4 <disk_read>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d004      	beq.n	8009ede <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7ff ff75 	bl	8009dec <sync_window>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 80ad 	bne.w	800a068 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	f040 8098 	bne.w	800a04c <sync_fs+0x158>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f22:	795b      	ldrb	r3, [r3, #5]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	f040 8091 	bne.w	800a04c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f32:	895b      	ldrh	r3, [r3, #10]
 8009f34:	461a      	mov	r2, r3
 8009f36:	2100      	movs	r1, #0
 8009f38:	f7ff fd40 	bl	80099bc <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2255      	movs	r2, #85	@ 0x55
 8009f40:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	22aa      	movs	r2, #170	@ 0xaa
 8009f48:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2252      	movs	r2, #82	@ 0x52
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2252      	movs	r2, #82	@ 0x52
 8009f56:	705a      	strb	r2, [r3, #1]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2261      	movs	r2, #97	@ 0x61
 8009f5c:	709a      	strb	r2, [r3, #2]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2241      	movs	r2, #65	@ 0x41
 8009f62:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2272      	movs	r2, #114	@ 0x72
 8009f68:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2272      	movs	r2, #114	@ 0x72
 8009f70:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2241      	movs	r2, #65	@ 0x41
 8009f78:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2261      	movs	r2, #97	@ 0x61
 8009f80:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	0a1b      	lsrs	r3, r3, #8
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	0c1b      	lsrs	r3, r3, #16
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	0e1b      	lsrs	r3, r3, #24
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	0a1b      	lsrs	r3, r3, #8
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	0c1b      	lsrs	r3, r3, #16
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	0e1b      	lsrs	r3, r3, #24
 800a010:	b2da      	uxtb	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	3301      	adds	r3, #1
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a028:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a030:	7858      	ldrb	r0, [r3, #1]
 800a032:	6879      	ldr	r1, [r7, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a03a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03c:	2301      	movs	r3, #1
 800a03e:	f7ff fc61 	bl	8009904 <disk_write>
			fs->fsi_flag = 0;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a048:	2200      	movs	r2, #0
 800a04a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a052:	785b      	ldrb	r3, [r3, #1]
 800a054:	2200      	movs	r2, #0
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fc73 	bl	8009944 <disk_ioctl>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a072:	b480      	push	{r7}
 800a074:	b083      	sub	sp, #12
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	3b02      	subs	r3, #2
 800a080:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	3b02      	subs	r3, #2
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d301      	bcc.n	800a096 <clust2sect+0x24>
 800a092:	2300      	movs	r3, #0
 800a094:	e00c      	b.n	800a0b0 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a09c:	789b      	ldrb	r3, [r3, #2]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	fb03 f202 	mul.w	r2, r3, r2
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ae:	4413      	add	r3, r2
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bc80      	pop	{r7}
 800a0b8:	4770      	bx	lr

0800a0ba <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b086      	sub	sp, #24
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d906      	bls.n	800a0d8 <get_fat+0x1e>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d302      	bcc.n	800a0de <get_fat+0x24>
		val = 1;	/* Internal error */
 800a0d8:	2301      	movs	r3, #1
 800a0da:	617b      	str	r3, [r7, #20]
 800a0dc:	e0e3      	b.n	800a2a6 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a0de:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	f000 8097 	beq.w	800a220 <get_fat+0x166>
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	f300 80cd 	bgt.w	800a292 <get_fat+0x1d8>
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d002      	beq.n	800a102 <get_fat+0x48>
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d05e      	beq.n	800a1be <get_fat+0x104>
 800a100:	e0c7      	b.n	800a292 <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4413      	add	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a116:	6a1a      	ldr	r2, [r3, #32]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a11e:	895b      	ldrh	r3, [r3, #10]
 800a120:	4619      	mov	r1, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	fbb3 f3f1 	udiv	r3, r3, r1
 800a128:	4413      	add	r3, r2
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff feaf 	bl	8009e90 <move_window>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	f040 80af 	bne.w	800a298 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	1c5a      	adds	r2, r3, #1
 800a13e:	60fa      	str	r2, [r7, #12]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a146:	8952      	ldrh	r2, [r2, #10]
 800a148:	fbb3 f1f2 	udiv	r1, r3, r2
 800a14c:	fb01 f202 	mul.w	r2, r1, r2
 800a150:	1a9b      	subs	r3, r3, r2
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	5cd3      	ldrb	r3, [r2, r3]
 800a156:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a15e:	6a1a      	ldr	r2, [r3, #32]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a166:	895b      	ldrh	r3, [r3, #10]
 800a168:	4619      	mov	r1, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a170:	4413      	add	r3, r2
 800a172:	4619      	mov	r1, r3
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff fe8b 	bl	8009e90 <move_window>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f040 808d 	bne.w	800a29c <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a188:	895b      	ldrh	r3, [r3, #10]
 800a18a:	461a      	mov	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a192:	fb01 f202 	mul.w	r2, r1, r2
 800a196:	1a9b      	subs	r3, r3, r2
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	5cd3      	ldrb	r3, [r2, r3]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <get_fat+0xfa>
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	091b      	lsrs	r3, r3, #4
 800a1b2:	e002      	b.n	800a1ba <get_fat+0x100>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1ba:	617b      	str	r3, [r7, #20]
			break;
 800a1bc:	e073      	b.n	800a2a6 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1c4:	6a1a      	ldr	r2, [r3, #32]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1cc:	895b      	ldrh	r3, [r3, #10]
 800a1ce:	085b      	lsrs	r3, r3, #1
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1da:	4413      	add	r3, r2
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff fe56 	bl	8009e90 <move_window>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d15a      	bne.n	800a2a0 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1f4:	8952      	ldrh	r2, [r2, #10]
 800a1f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1fa:	fb01 f202 	mul.w	r2, r1, r2
 800a1fe:	1a9b      	subs	r3, r3, r2
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	4413      	add	r3, r2
 800a204:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	3301      	adds	r3, #1
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	b21a      	sxth	r2, r3
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	b21b      	sxth	r3, r3
 800a216:	4313      	orrs	r3, r2
 800a218:	b21b      	sxth	r3, r3
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	617b      	str	r3, [r7, #20]
			break;
 800a21e:	e042      	b.n	800a2a6 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a226:	6a1a      	ldr	r2, [r3, #32]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a22e:	895b      	ldrh	r3, [r3, #10]
 800a230:	089b      	lsrs	r3, r3, #2
 800a232:	b29b      	uxth	r3, r3
 800a234:	4619      	mov	r1, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	fbb3 f3f1 	udiv	r3, r3, r1
 800a23c:	4413      	add	r3, r2
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7ff fe25 	bl	8009e90 <move_window>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d12b      	bne.n	800a2a4 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a256:	8952      	ldrh	r2, [r2, #10]
 800a258:	fbb3 f1f2 	udiv	r1, r3, r2
 800a25c:	fb01 f202 	mul.w	r2, r1, r2
 800a260:	1a9b      	subs	r3, r3, r2
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	4413      	add	r3, r2
 800a266:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	3303      	adds	r3, #3
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	061a      	lsls	r2, r3, #24
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	3302      	adds	r3, #2
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	041b      	lsls	r3, r3, #16
 800a278:	431a      	orrs	r2, r3
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	3301      	adds	r3, #1
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	021b      	lsls	r3, r3, #8
 800a282:	4313      	orrs	r3, r2
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	7812      	ldrb	r2, [r2, #0]
 800a288:	4313      	orrs	r3, r2
 800a28a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a28e:	617b      	str	r3, [r7, #20]
			break;
 800a290:	e009      	b.n	800a2a6 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 800a292:	2301      	movs	r3, #1
 800a294:	617b      	str	r3, [r7, #20]
 800a296:	e006      	b.n	800a2a6 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a298:	bf00      	nop
 800a29a:	e004      	b.n	800a2a6 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a29c:	bf00      	nop
 800a29e:	e002      	b.n	800a2a6 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2a0:	bf00      	nop
 800a2a2:	e000      	b.n	800a2a6 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2a4:	bf00      	nop
		}
	}

	return val;
 800a2a6:	697b      	ldr	r3, [r7, #20]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d906      	bls.n	800a2d0 <put_fat+0x20>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d302      	bcc.n	800a2d6 <put_fat+0x26>
		res = FR_INT_ERR;
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	77fb      	strb	r3, [r7, #31]
 800a2d4:	e13a      	b.n	800a54c <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	f000 80d0 	beq.w	800a484 <put_fat+0x1d4>
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	f300 8127 	bgt.w	800a538 <put_fat+0x288>
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d003      	beq.n	800a2f6 <put_fat+0x46>
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	f000 808f 	beq.w	800a412 <put_fat+0x162>
 800a2f4:	e120      	b.n	800a538 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	085b      	lsrs	r3, r3, #1
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4413      	add	r3, r2
 800a302:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a30a:	6a1a      	ldr	r2, [r3, #32]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a312:	895b      	ldrh	r3, [r3, #10]
 800a314:	4619      	mov	r1, r3
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	fbb3 f3f1 	udiv	r3, r3, r1
 800a31c:	4413      	add	r3, r2
 800a31e:	4619      	mov	r1, r3
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f7ff fdb5 	bl	8009e90 <move_window>
 800a326:	4603      	mov	r3, r0
 800a328:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a32a:	7ffb      	ldrb	r3, [r7, #31]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f040 8106 	bne.w	800a53e <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	617a      	str	r2, [r7, #20]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a33e:	8952      	ldrh	r2, [r2, #10]
 800a340:	fbb3 f1f2 	udiv	r1, r3, r2
 800a344:	fb01 f202 	mul.w	r2, r1, r2
 800a348:	1a9b      	subs	r3, r3, r2
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	4413      	add	r3, r2
 800a34e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00d      	beq.n	800a376 <put_fat+0xc6>
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	b25b      	sxtb	r3, r3
 800a360:	f003 030f 	and.w	r3, r3, #15
 800a364:	b25a      	sxtb	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	011b      	lsls	r3, r3, #4
 800a36c:	b25b      	sxtb	r3, r3
 800a36e:	4313      	orrs	r3, r2
 800a370:	b25b      	sxtb	r3, r3
 800a372:	b2db      	uxtb	r3, r3
 800a374:	e001      	b.n	800a37a <put_fat+0xca>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a384:	2201      	movs	r2, #1
 800a386:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a38e:	6a1a      	ldr	r2, [r3, #32]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a396:	895b      	ldrh	r3, [r3, #10]
 800a398:	4619      	mov	r1, r3
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3a0:	4413      	add	r3, r2
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f7ff fd73 	bl	8009e90 <move_window>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3ae:	7ffb      	ldrb	r3, [r7, #31]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f040 80c6 	bne.w	800a542 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3bc:	895b      	ldrh	r3, [r3, #10]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3c6:	fb01 f202 	mul.w	r2, r1, r2
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <put_fat+0x134>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	091b      	lsrs	r3, r3, #4
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	e00e      	b.n	800a402 <put_fat+0x152>
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	b25b      	sxtb	r3, r3
 800a3ea:	f023 030f 	bic.w	r3, r3, #15
 800a3ee:	b25a      	sxtb	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	0a1b      	lsrs	r3, r3, #8
 800a3f4:	b25b      	sxtb	r3, r3
 800a3f6:	f003 030f 	and.w	r3, r3, #15
 800a3fa:	b25b      	sxtb	r3, r3
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	b25b      	sxtb	r3, r3
 800a400:	b2db      	uxtb	r3, r3
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a40c:	2201      	movs	r2, #1
 800a40e:	711a      	strb	r2, [r3, #4]
			break;
 800a410:	e09c      	b.n	800a54c <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a418:	6a1a      	ldr	r2, [r3, #32]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a420:	895b      	ldrh	r3, [r3, #10]
 800a422:	085b      	lsrs	r3, r3, #1
 800a424:	b29b      	uxth	r3, r3
 800a426:	4619      	mov	r1, r3
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a42e:	4413      	add	r3, r2
 800a430:	4619      	mov	r1, r3
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f7ff fd2c 	bl	8009e90 <move_window>
 800a438:	4603      	mov	r3, r0
 800a43a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a43c:	7ffb      	ldrb	r3, [r7, #31]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f040 8081 	bne.w	800a546 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a44e:	8952      	ldrh	r2, [r2, #10]
 800a450:	fbb3 f1f2 	udiv	r1, r3, r2
 800a454:	fb01 f202 	mul.w	r2, r1, r2
 800a458:	1a9b      	subs	r3, r3, r2
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	4413      	add	r3, r2
 800a45e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	b2da      	uxtb	r2, r3
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	0a1b      	lsrs	r3, r3, #8
 800a46e:	b29a      	uxth	r2, r3
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	3301      	adds	r3, #1
 800a474:	b2d2      	uxtb	r2, r2
 800a476:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a47e:	2201      	movs	r2, #1
 800a480:	711a      	strb	r2, [r3, #4]
			break;
 800a482:	e063      	b.n	800a54c <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a48a:	6a1a      	ldr	r2, [r3, #32]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a492:	895b      	ldrh	r3, [r3, #10]
 800a494:	089b      	lsrs	r3, r3, #2
 800a496:	b29b      	uxth	r3, r3
 800a498:	4619      	mov	r1, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4a0:	4413      	add	r3, r2
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7ff fcf3 	bl	8009e90 <move_window>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4ae:	7ffb      	ldrb	r3, [r7, #31]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d14a      	bne.n	800a54a <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4be:	8952      	ldrh	r2, [r2, #10]
 800a4c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4c4:	fb01 f202 	mul.w	r2, r1, r2
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	3303      	adds	r3, #3
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	061a      	lsls	r2, r3, #24
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	3302      	adds	r3, #2
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	041b      	lsls	r3, r3, #16
 800a4e0:	431a      	orrs	r2, r3
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	021b      	lsls	r3, r3, #8
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	7812      	ldrb	r2, [r2, #0]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	701a      	strb	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	b29b      	uxth	r3, r3
 800a508:	0a1b      	lsrs	r3, r3, #8
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	3301      	adds	r3, #1
 800a510:	b2d2      	uxtb	r2, r2
 800a512:	701a      	strb	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	0c1a      	lsrs	r2, r3, #16
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	3302      	adds	r3, #2
 800a51c:	b2d2      	uxtb	r2, r2
 800a51e:	701a      	strb	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	0e1a      	lsrs	r2, r3, #24
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	3303      	adds	r3, #3
 800a528:	b2d2      	uxtb	r2, r2
 800a52a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a532:	2201      	movs	r2, #1
 800a534:	711a      	strb	r2, [r3, #4]
			break;
 800a536:	e009      	b.n	800a54c <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800a538:	2302      	movs	r3, #2
 800a53a:	77fb      	strb	r3, [r7, #31]
 800a53c:	e006      	b.n	800a54c <put_fat+0x29c>
			if (res != FR_OK) break;
 800a53e:	bf00      	nop
 800a540:	e004      	b.n	800a54c <put_fat+0x29c>
			if (res != FR_OK) break;
 800a542:	bf00      	nop
 800a544:	e002      	b.n	800a54c <put_fat+0x29c>
			if (res != FR_OK) break;
 800a546:	bf00      	nop
 800a548:	e000      	b.n	800a54c <put_fat+0x29c>
			if (res != FR_OK) break;
 800a54a:	bf00      	nop
		}
	}

	return res;
 800a54c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3720      	adds	r7, #32
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d906      	bls.n	800a574 <remove_chain+0x1e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d302      	bcc.n	800a57a <remove_chain+0x24>
		res = FR_INT_ERR;
 800a574:	2302      	movs	r3, #2
 800a576:	73fb      	strb	r3, [r7, #15]
 800a578:	e049      	b.n	800a60e <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a57e:	e03b      	b.n	800a5f8 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fd99 	bl	800a0ba <get_fat>
 800a588:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d03b      	beq.n	800a608 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d102      	bne.n	800a59c <remove_chain+0x46>
 800a596:	2302      	movs	r3, #2
 800a598:	73fb      	strb	r3, [r7, #15]
 800a59a:	e038      	b.n	800a60e <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a2:	d102      	bne.n	800a5aa <remove_chain+0x54>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
 800a5a8:	e031      	b.n	800a60e <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff fe7e 	bl	800a2b0 <put_fat>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d126      	bne.n	800a60c <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d013      	beq.n	800a5f4 <remove_chain+0x9e>
				fs->free_clust++;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a5dc:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e4:	795b      	ldrb	r3, [r3, #5]
 800a5e6:	f043 0301 	orr.w	r3, r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5f2:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d3bc      	bcc.n	800a580 <remove_chain+0x2a>
 800a606:	e002      	b.n	800a60e <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800a608:	bf00      	nop
 800a60a:	e000      	b.n	800a60e <remove_chain+0xb8>
			if (res != FR_OK) break;
 800a60c:	bf00      	nop
		}
	}

	return res;
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d111      	bne.n	800a64c <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d006      	beq.n	800a646 <create_chain+0x2e>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	429a      	cmp	r2, r3
 800a644:	d31d      	bcc.n	800a682 <create_chain+0x6a>
 800a646:	2301      	movs	r3, #1
 800a648:	613b      	str	r3, [r7, #16]
 800a64a:	e01a      	b.n	800a682 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff fd33 	bl	800a0ba <get_fat>
 800a654:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d801      	bhi.n	800a660 <create_chain+0x48>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e07f      	b.n	800a760 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a666:	d101      	bne.n	800a66c <create_chain+0x54>
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	e079      	b.n	800a760 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	429a      	cmp	r2, r3
 800a678:	d201      	bcs.n	800a67e <create_chain+0x66>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	e070      	b.n	800a760 <create_chain+0x148>
		scl = clst;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	3301      	adds	r3, #1
 800a68a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	429a      	cmp	r2, r3
 800a698:	d307      	bcc.n	800a6aa <create_chain+0x92>
			ncl = 2;
 800a69a:	2302      	movs	r3, #2
 800a69c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d901      	bls.n	800a6aa <create_chain+0x92>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e05a      	b.n	800a760 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a6aa:	6979      	ldr	r1, [r7, #20]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff fd04 	bl	800a0ba <get_fat>
 800a6b2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00e      	beq.n	800a6d8 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c0:	d002      	beq.n	800a6c8 <create_chain+0xb0>
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <create_chain+0xb4>
			return cs;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	e049      	b.n	800a760 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d1d8      	bne.n	800a686 <create_chain+0x6e>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e043      	b.n	800a760 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800a6d8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a6da:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800a6de:	6979      	ldr	r1, [r7, #20]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff fde5 	bl	800a2b0 <put_fat>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d109      	bne.n	800a704 <create_chain+0xec>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d006      	beq.n	800a704 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7ff fdd8 	bl	800a2b0 <put_fat>
 800a700:	4603      	mov	r3, r0
 800a702:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d121      	bne.n	800a74e <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a710:	461a      	mov	r2, r3
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a722:	d01c      	beq.n	800a75e <create_chain+0x146>
			fs->free_clust--;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a734:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a73c:	795b      	ldrb	r3, [r3, #5]
 800a73e:	f043 0301 	orr.w	r3, r3, #1
 800a742:	b2da      	uxtb	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a74a:	715a      	strb	r2, [r3, #5]
 800a74c:	e007      	b.n	800a75e <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d102      	bne.n	800a75a <create_chain+0x142>
 800a754:	f04f 33ff 	mov.w	r3, #4294967295
 800a758:	e000      	b.n	800a75c <create_chain+0x144>
 800a75a:	2301      	movs	r3, #1
 800a75c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a75e:	697b      	ldr	r3, [r7, #20]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a768:	b480      	push	{r7}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77a:	3304      	adds	r3, #4
 800a77c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a78a:	895b      	ldrh	r3, [r3, #10]
 800a78c:	461a      	mov	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	fbb3 f3f2 	udiv	r3, r3, r2
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a79a:	6812      	ldr	r2, [r2, #0]
 800a79c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a7a0:	7892      	ldrb	r2, [r2, #2]
 800a7a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	1d1a      	adds	r2, r3, #4
 800a7ac:	613a      	str	r2, [r7, #16]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <clmt_clust+0x54>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e010      	b.n	800a7de <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d307      	bcc.n	800a7d4 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7d2:	e7e9      	b.n	800a7a8 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800a7d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	4413      	add	r3, r2
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bc80      	pop	{r7}
 800a7e6:	4770      	bx	lr

0800a7e8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7fc:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d009      	beq.n	800a822 <dir_sdi+0x3a>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d301      	bcc.n	800a826 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800a822:	2302      	movs	r3, #2
 800a824:	e0aa      	b.n	800a97c <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d110      	bne.n	800a84e <dir_sdi+0x66>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d107      	bne.n	800a84e <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d115      	bne.n	800a880 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a860:	891b      	ldrh	r3, [r3, #8]
 800a862:	461a      	mov	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	4293      	cmp	r3, r2
 800a868:	d301      	bcc.n	800a86e <dir_sdi+0x86>
			return FR_INT_ERR;
 800a86a:	2302      	movs	r3, #2
 800a86c:	e086      	b.n	800a97c <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87c:	613b      	str	r3, [r7, #16]
 800a87e:	e043      	b.n	800a908 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a88c:	895b      	ldrh	r3, [r3, #10]
 800a88e:	095b      	lsrs	r3, r3, #5
 800a890:	b29b      	uxth	r3, r3
 800a892:	461a      	mov	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8a0:	789b      	ldrb	r3, [r3, #2]
 800a8a2:	fb02 f303 	mul.w	r3, r2, r3
 800a8a6:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a8a8:	e021      	b.n	800a8ee <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6979      	ldr	r1, [r7, #20]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fc00 	bl	800a0ba <get_fat>
 800a8ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c2:	d101      	bne.n	800a8c8 <dir_sdi+0xe0>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e059      	b.n	800a97c <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d909      	bls.n	800a8e2 <dir_sdi+0xfa>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d301      	bcc.n	800a8e6 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e04a      	b.n	800a97c <dir_sdi+0x194>
			idx -= ic;
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d2d9      	bcs.n	800a8aa <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6979      	ldr	r1, [r7, #20]
 800a900:	4618      	mov	r0, r3
 800a902:	f7ff fbb6 	bl	800a072 <clust2sect>
 800a906:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a90e:	461a      	mov	r2, r3
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <dir_sdi+0x136>
 800a91a:	2302      	movs	r3, #2
 800a91c:	e02e      	b.n	800a97c <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a92a:	895b      	ldrh	r3, [r3, #10]
 800a92c:	095b      	lsrs	r3, r3, #5
 800a92e:	b29b      	uxth	r3, r3
 800a930:	461a      	mov	r2, r3
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	fbb3 f2f2 	udiv	r2, r3, r2
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	4413      	add	r3, r2
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a942:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4618      	mov	r0, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a95a:	895b      	ldrh	r3, [r3, #10]
 800a95c:	095b      	lsrs	r3, r3, #5
 800a95e:	b29b      	uxth	r3, r3
 800a960:	461a      	mov	r2, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	fbb3 f1f2 	udiv	r1, r3, r2
 800a968:	fb01 f202 	mul.w	r2, r1, r2
 800a96c:	1a9b      	subs	r3, r3, r2
 800a96e:	015b      	lsls	r3, r3, #5
 800a970:	4403      	add	r3, r0
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a978:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a984:	b590      	push	{r4, r7, lr}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a994:	88db      	ldrh	r3, [r3, #6]
 800a996:	3301      	adds	r3, #1
 800a998:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d005      	beq.n	800a9ae <dir_next+0x2a>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <dir_next+0x2e>
		return FR_NO_FILE;
 800a9ae:	2304      	movs	r3, #4
 800a9b0:	e12e      	b.n	800ac10 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9be:	895b      	ldrh	r3, [r3, #10]
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9cc:	fb01 f202 	mul.w	r2, r1, r2
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f040 80fa 	bne.w	800abcc <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a9e8:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10d      	bne.n	800aa12 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa02:	891b      	ldrh	r3, [r3, #8]
 800aa04:	461a      	mov	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	f0c0 80df 	bcc.w	800abcc <dir_next+0x248>
				return FR_NO_FILE;
 800aa0e:	2304      	movs	r3, #4
 800aa10:	e0fe      	b.n	800ac10 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa1e:	895b      	ldrh	r3, [r3, #10]
 800aa20:	095b      	lsrs	r3, r3, #5
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aa32:	6812      	ldr	r2, [r2, #0]
 800aa34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aa38:	7892      	ldrb	r2, [r2, #2]
 800aa3a:	3a01      	subs	r2, #1
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f040 80c4 	bne.w	800abcc <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	4619      	mov	r1, r3
 800aa56:	4610      	mov	r0, r2
 800aa58:	f7ff fb2f 	bl	800a0ba <get_fat>
 800aa5c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d801      	bhi.n	800aa68 <dir_next+0xe4>
 800aa64:	2302      	movs	r3, #2
 800aa66:	e0d3      	b.n	800ac10 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6e:	d101      	bne.n	800aa74 <dir_next+0xf0>
 800aa70:	2301      	movs	r3, #1
 800aa72:	e0cd      	b.n	800ac10 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	f0c0 808e 	bcc.w	800aba6 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <dir_next+0x110>
 800aa90:	2304      	movs	r3, #4
 800aa92:	e0bd      	b.n	800ac10 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7ff fdb6 	bl	800a618 <create_chain>
 800aaac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <dir_next+0x134>
 800aab4:	2307      	movs	r3, #7
 800aab6:	e0ab      	b.n	800ac10 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <dir_next+0x13e>
 800aabe:	2302      	movs	r3, #2
 800aac0:	e0a6      	b.n	800ac10 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac8:	d101      	bne.n	800aace <dir_next+0x14a>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e0a0      	b.n	800ac10 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff f988 	bl	8009dec <sync_window>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <dir_next+0x162>
 800aae2:	2301      	movs	r3, #1
 800aae4:	e094      	b.n	800ac10 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aafc:	895b      	ldrh	r3, [r3, #10]
 800aafe:	461a      	mov	r2, r3
 800ab00:	2100      	movs	r1, #0
 800ab02:	f7fe ff5b 	bl	80099bc <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab14:	681c      	ldr	r4, [r3, #0]
 800ab16:	6979      	ldr	r1, [r7, #20]
 800ab18:	4610      	mov	r0, r2
 800ab1a:	f7ff faaa 	bl	800a072 <clust2sect>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800ab24:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ab26:	2300      	movs	r3, #0
 800ab28:	613b      	str	r3, [r7, #16]
 800ab2a:	e021      	b.n	800ab70 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab38:	2201      	movs	r2, #1
 800ab3a:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff f951 	bl	8009dec <sync_window>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <dir_next+0x1d0>
 800ab50:	2301      	movs	r3, #1
 800ab52:	e05d      	b.n	800ac10 <dir_next+0x28c>
						dp->fs->winsect++;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800ab60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ab62:	3201      	adds	r2, #1
 800ab64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab68:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	613b      	str	r3, [r7, #16]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab7c:	789b      	ldrb	r3, [r3, #2]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d3d2      	bcc.n	800ab2c <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab92:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	1acb      	subs	r3, r1, r3
 800aba0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abac:	461a      	mov	r2, r3
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6979      	ldr	r1, [r7, #20]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7ff fa58 	bl	800a072 <clust2sect>
 800abc2:	4602      	mov	r2, r0
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abca:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	b29a      	uxth	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abd6:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4618      	mov	r0, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abee:	895b      	ldrh	r3, [r3, #10]
 800abf0:	095b      	lsrs	r3, r3, #5
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800abfc:	fb01 f202 	mul.w	r2, r1, r2
 800ac00:	1a9b      	subs	r3, r3, r2
 800ac02:	015b      	lsls	r3, r3, #5
 800ac04:	4403      	add	r3, r0
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ac0c:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd90      	pop	{r4, r7, pc}

0800ac18 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800ac22:	2100      	movs	r1, #0
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff fddf 	bl	800a7e8 <dir_sdi>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d135      	bne.n	800aca0 <dir_alloc+0x88>
		n = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	f7ff f920 	bl	8009e90 <move_window>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d121      	bne.n	800ac9e <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2be5      	cmp	r3, #229	@ 0xe5
 800ac66:	d006      	beq.n	800ac76 <dir_alloc+0x5e>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d107      	bne.n	800ac86 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	60bb      	str	r3, [r7, #8]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d102      	bne.n	800ac8a <dir_alloc+0x72>
 800ac84:	e00c      	b.n	800aca0 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ac86:	2300      	movs	r3, #0
 800ac88:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff fe79 	bl	800a984 <dir_next>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d0cd      	beq.n	800ac38 <dir_alloc+0x20>
 800ac9c:	e000      	b.n	800aca0 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800ac9e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	d101      	bne.n	800acaa <dir_alloc+0x92>
 800aca6:	2307      	movs	r3, #7
 800aca8:	73fb      	strb	r3, [r7, #15]
	return res;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	331b      	adds	r3, #27
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	b21a      	sxth	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	331a      	adds	r3, #26
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	b21b      	sxth	r3, r3
 800acd0:	4313      	orrs	r3, r2
 800acd2:	b21b      	sxth	r3, r3
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d10f      	bne.n	800ad04 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	3315      	adds	r3, #21
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	021b      	lsls	r3, r3, #8
 800acec:	b21a      	sxth	r2, r3
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	3314      	adds	r3, #20
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	b21b      	sxth	r3, r3
 800acf6:	4313      	orrs	r3, r2
 800acf8:	b21b      	sxth	r3, r3
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	041b      	lsls	r3, r3, #16
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]

	return cl;
 800ad04:	68fb      	ldr	r3, [r7, #12]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bc80      	pop	{r7}
 800ad0e:	4770      	bx	lr

0800ad10 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	331a      	adds	r3, #26
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	b2d2      	uxtb	r2, r2
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	0a1b      	lsrs	r3, r3, #8
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	331b      	adds	r3, #27
 800ad30:	b2d2      	uxtb	r2, r2
 800ad32:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	0c1a      	lsrs	r2, r3, #16
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3314      	adds	r3, #20
 800ad3c:	b2d2      	uxtb	r2, r2
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	0c1b      	lsrs	r3, r3, #16
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	0a1b      	lsrs	r3, r3, #8
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3315      	adds	r3, #21
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]
}
 800ad52:	bf00      	nop
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bc80      	pop	{r7}
 800ad5a:	4770      	bx	lr

0800ad5c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad6e:	1e5a      	subs	r2, r3, #1
 800ad70:	4613      	mov	r3, r2
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	613b      	str	r3, [r7, #16]
 800ad80:	2301      	movs	r3, #1
 800ad82:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800ad84:	4a2b      	ldr	r2, [pc, #172]	@ (800ae34 <cmp_lfn+0xd8>)
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	4413      	add	r3, r2
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	4413      	add	r3, r2
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	021b      	lsls	r3, r3, #8
 800ad96:	b21a      	sxth	r2, r3
 800ad98:	4926      	ldr	r1, [pc, #152]	@ (800ae34 <cmp_lfn+0xd8>)
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	440b      	add	r3, r1
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	4619      	mov	r1, r3
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	440b      	add	r3, r1
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	b21b      	sxth	r3, r3
 800adaa:	4313      	orrs	r3, r2
 800adac:	b21b      	sxth	r3, r3
 800adae:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800adb0:	89fb      	ldrh	r3, [r7, #14]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d019      	beq.n	800adea <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800adb6:	89bb      	ldrh	r3, [r7, #12]
 800adb8:	4618      	mov	r0, r3
 800adba:	f003 f81d 	bl	800ddf8 <ff_wtoupper>
 800adbe:	4603      	mov	r3, r0
 800adc0:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2bfe      	cmp	r3, #254	@ 0xfe
 800adc6:	d80e      	bhi.n	800ade6 <cmp_lfn+0x8a>
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	617a      	str	r2, [r7, #20]
 800adce:	005b      	lsls	r3, r3, #1
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	4413      	add	r3, r2
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	4618      	mov	r0, r3
 800add8:	f003 f80e 	bl	800ddf8 <ff_wtoupper>
 800addc:	4603      	mov	r3, r0
 800adde:	461a      	mov	r2, r3
 800ade0:	89fb      	ldrh	r3, [r7, #14]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d008      	beq.n	800adf8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800ade6:	2300      	movs	r3, #0
 800ade8:	e01f      	b.n	800ae2a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800adea:	89bb      	ldrh	r3, [r7, #12]
 800adec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d001      	beq.n	800adf8 <cmp_lfn+0x9c>
 800adf4:	2300      	movs	r3, #0
 800adf6:	e018      	b.n	800ae2a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	3301      	adds	r3, #1
 800adfc:	613b      	str	r3, [r7, #16]
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2b0c      	cmp	r3, #12
 800ae02:	d9bf      	bls.n	800ad84 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00b      	beq.n	800ae28 <cmp_lfn+0xcc>
 800ae10:	89fb      	ldrh	r3, [r7, #14]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d008      	beq.n	800ae28 <cmp_lfn+0xcc>
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <cmp_lfn+0xcc>
		return 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	e000      	b.n	800ae2a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800ae28:	2301      	movs	r3, #1
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	0800f598 	.word	0x0800f598

0800ae38 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b089      	sub	sp, #36	@ 0x24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	4611      	mov	r1, r2
 800ae44:	461a      	mov	r2, r3
 800ae46:	460b      	mov	r3, r1
 800ae48:	71fb      	strb	r3, [r7, #7]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	330d      	adds	r3, #13
 800ae52:	79ba      	ldrb	r2, [r7, #6]
 800ae54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	330b      	adds	r3, #11
 800ae5a:	220f      	movs	r2, #15
 800ae5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	330c      	adds	r3, #12
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	331a      	adds	r3, #26
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	331b      	adds	r3, #27
 800ae72:	2200      	movs	r2, #0
 800ae74:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	1e5a      	subs	r2, r3, #1
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	4413      	add	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	82fb      	strh	r3, [r7, #22]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800ae8e:	8afb      	ldrh	r3, [r7, #22]
 800ae90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d007      	beq.n	800aea8 <fit_lfn+0x70>
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	61fa      	str	r2, [r7, #28]
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4413      	add	r3, r2
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800aea8:	4a1c      	ldr	r2, [pc, #112]	@ (800af1c <fit_lfn+0xe4>)
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	4413      	add	r3, r2
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	8afa      	ldrh	r2, [r7, #22]
 800aeb8:	b2d2      	uxtb	r2, r2
 800aeba:	701a      	strb	r2, [r3, #0]
 800aebc:	8afb      	ldrh	r3, [r7, #22]
 800aebe:	0a1b      	lsrs	r3, r3, #8
 800aec0:	b299      	uxth	r1, r3
 800aec2:	4a16      	ldr	r2, [pc, #88]	@ (800af1c <fit_lfn+0xe4>)
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	4413      	add	r3, r2
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	3301      	adds	r3, #1
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	4413      	add	r3, r2
 800aed0:	b2ca      	uxtb	r2, r1
 800aed2:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800aed4:	8afb      	ldrh	r3, [r7, #22]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <fit_lfn+0xa8>
 800aeda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aede:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	3301      	adds	r3, #1
 800aee4:	61bb      	str	r3, [r7, #24]
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	2b0c      	cmp	r3, #12
 800aeea:	d9d0      	bls.n	800ae8e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800aeec:	8afb      	ldrh	r3, [r7, #22]
 800aeee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d006      	beq.n	800af04 <fit_lfn+0xcc>
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	4413      	add	r3, r2
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d103      	bne.n	800af0c <fit_lfn+0xd4>
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af0a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	79fa      	ldrb	r2, [r7, #7]
 800af10:	701a      	strb	r2, [r3, #0]
}
 800af12:	bf00      	nop
 800af14:	3724      	adds	r7, #36	@ 0x24
 800af16:	46bd      	mov	sp, r7
 800af18:	bc80      	pop	{r7}
 800af1a:	4770      	bx	lr
 800af1c:	0800f598 	.word	0x0800f598

0800af20 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08c      	sub	sp, #48	@ 0x30
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
 800af2c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800af2e:	220b      	movs	r2, #11
 800af30:	68b9      	ldr	r1, [r7, #8]
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f7fe fd24 	bl	8009980 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	2b05      	cmp	r3, #5
 800af3c:	d92b      	bls.n	800af96 <gen_numname+0x76>
		sr = seq;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800af42:	e022      	b.n	800af8a <gen_numname+0x6a>
			wc = *lfn++;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	1c9a      	adds	r2, r3, #2
 800af48:	607a      	str	r2, [r7, #4]
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800af4e:	2300      	movs	r3, #0
 800af50:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af52:	e017      	b.n	800af84 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	005a      	lsls	r2, r3, #1
 800af58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	4413      	add	r3, r2
 800af60:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800af62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800af64:	085b      	lsrs	r3, r3, #1
 800af66:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d005      	beq.n	800af7e <gen_numname+0x5e>
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800af78:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800af7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800af7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af80:	3301      	adds	r3, #1
 800af82:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af86:	2b0f      	cmp	r3, #15
 800af88:	d9e4      	bls.n	800af54 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1d8      	bne.n	800af44 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800af96:	2307      	movs	r3, #7
 800af98:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	f003 030f 	and.w	r3, r3, #15
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	3330      	adds	r3, #48	@ 0x30
 800afa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800afaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afae:	2b39      	cmp	r3, #57	@ 0x39
 800afb0:	d904      	bls.n	800afbc <gen_numname+0x9c>
 800afb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afb6:	3307      	adds	r3, #7
 800afb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800afbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbe:	1e5a      	subs	r2, r3, #1
 800afc0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800afc2:	3330      	adds	r3, #48	@ 0x30
 800afc4:	443b      	add	r3, r7
 800afc6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800afca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	091b      	lsrs	r3, r3, #4
 800afd2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1df      	bne.n	800af9a <gen_numname+0x7a>
	ns[i] = '~';
 800afda:	f107 0214 	add.w	r2, r7, #20
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	4413      	add	r3, r2
 800afe2:	227e      	movs	r2, #126	@ 0x7e
 800afe4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800afe6:	2300      	movs	r3, #0
 800afe8:	627b      	str	r3, [r7, #36]	@ 0x24
 800afea:	e002      	b.n	800aff2 <gen_numname+0xd2>
 800afec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afee:	3301      	adds	r3, #1
 800aff0:	627b      	str	r3, [r7, #36]	@ 0x24
 800aff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d205      	bcs.n	800b006 <gen_numname+0xe6>
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affe:	4413      	add	r3, r2
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	2b20      	cmp	r3, #32
 800b004:	d1f2      	bne.n	800afec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b008:	2b07      	cmp	r3, #7
 800b00a:	d807      	bhi.n	800b01c <gen_numname+0xfc>
 800b00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b012:	3330      	adds	r3, #48	@ 0x30
 800b014:	443b      	add	r3, r7
 800b016:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b01a:	e000      	b.n	800b01e <gen_numname+0xfe>
 800b01c:	2120      	movs	r1, #32
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b020:	1c5a      	adds	r2, r3, #1
 800b022:	627a      	str	r2, [r7, #36]	@ 0x24
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	4413      	add	r3, r2
 800b028:	460a      	mov	r2, r1
 800b02a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02e:	2b07      	cmp	r3, #7
 800b030:	d9e9      	bls.n	800b006 <gen_numname+0xe6>
}
 800b032:	bf00      	nop
 800b034:	bf00      	nop
 800b036:	3730      	adds	r7, #48	@ 0x30
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b048:	230b      	movs	r3, #11
 800b04a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	0852      	lsrs	r2, r2, #1
 800b052:	01db      	lsls	r3, r3, #7
 800b054:	4313      	orrs	r3, r2
 800b056:	b2da      	uxtb	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	1c59      	adds	r1, r3, #1
 800b05c:	6079      	str	r1, [r7, #4]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	4413      	add	r3, r2
 800b062:	73fb      	strb	r3, [r7, #15]
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	3b01      	subs	r3, #1
 800b068:	60bb      	str	r3, [r7, #8]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1ed      	bne.n	800b04c <sum_sfn+0x10>
	return sum;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	bc80      	pop	{r7}
 800b07a:	4770      	bx	lr

0800b07c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b084:	2100      	movs	r1, #0
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff fbae 	bl	800a7e8 <dir_sdi>
 800b08c:	4603      	mov	r3, r0
 800b08e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b090:	7dfb      	ldrb	r3, [r7, #23]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <dir_find+0x1e>
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	e0b8      	b.n	800b20c <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b09a:	23ff      	movs	r3, #255	@ 0xff
 800b09c:	753b      	strb	r3, [r7, #20]
 800b09e:	7d3b      	ldrb	r3, [r7, #20]
 800b0a0:	757b      	strb	r3, [r7, #21]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0ac:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f7fe fee5 	bl	8009e90 <move_window>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f040 8097 	bne.w	800b200 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b0e2:	7dbb      	ldrb	r3, [r7, #22]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d102      	bne.n	800b0ee <dir_find+0x72>
 800b0e8:	2304      	movs	r3, #4
 800b0ea:	75fb      	strb	r3, [r7, #23]
 800b0ec:	e08d      	b.n	800b20a <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	330b      	adds	r3, #11
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0f8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b0fa:	7dbb      	ldrb	r3, [r7, #22]
 800b0fc:	2be5      	cmp	r3, #229	@ 0xe5
 800b0fe:	d007      	beq.n	800b110 <dir_find+0x94>
 800b100:	7bfb      	ldrb	r3, [r7, #15]
 800b102:	f003 0308 	and.w	r3, r3, #8
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00b      	beq.n	800b122 <dir_find+0xa6>
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	2b0f      	cmp	r3, #15
 800b10e:	d008      	beq.n	800b122 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b110:	23ff      	movs	r3, #255	@ 0xff
 800b112:	757b      	strb	r3, [r7, #21]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b11a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b11e:	849a      	strh	r2, [r3, #36]	@ 0x24
 800b120:	e063      	b.n	800b1ea <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	2b0f      	cmp	r3, #15
 800b126:	d137      	bne.n	800b198 <dir_find+0x11c>
				if (dp->lfn) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d05a      	beq.n	800b1ea <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b134:	7dbb      	ldrb	r3, [r7, #22]
 800b136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d010      	beq.n	800b160 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	7b5b      	ldrb	r3, [r3, #13]
 800b142:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800b144:	7dbb      	ldrb	r3, [r7, #22]
 800b146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b14a:	75bb      	strb	r3, [r7, #22]
 800b14c:	7dbb      	ldrb	r3, [r7, #22]
 800b14e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b156:	88da      	ldrh	r2, [r3, #6]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b15e:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800b160:	7dba      	ldrb	r2, [r7, #22]
 800b162:	7d7b      	ldrb	r3, [r7, #21]
 800b164:	429a      	cmp	r2, r3
 800b166:	d114      	bne.n	800b192 <dir_find+0x116>
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	330d      	adds	r3, #13
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	7d3a      	ldrb	r2, [r7, #20]
 800b170:	429a      	cmp	r2, r3
 800b172:	d10e      	bne.n	800b192 <dir_find+0x116>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b17a:	6a1b      	ldr	r3, [r3, #32]
 800b17c:	6939      	ldr	r1, [r7, #16]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff fdec 	bl	800ad5c <cmp_lfn>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <dir_find+0x116>
 800b18a:	7d7b      	ldrb	r3, [r7, #21]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	e000      	b.n	800b194 <dir_find+0x118>
 800b192:	23ff      	movs	r3, #255	@ 0xff
 800b194:	757b      	strb	r3, [r7, #21]
 800b196:	e028      	b.n	800b1ea <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b198:	7d7b      	ldrb	r3, [r7, #21]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d107      	bne.n	800b1ae <dir_find+0x132>
 800b19e:	6938      	ldr	r0, [r7, #16]
 800b1a0:	f7ff ff4c 	bl	800b03c <sum_sfn>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	7d3b      	ldrb	r3, [r7, #20]
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d02a      	beq.n	800b204 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	330b      	adds	r3, #11
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10b      	bne.n	800b1da <dir_find+0x15e>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1c8:	699b      	ldr	r3, [r3, #24]
 800b1ca:	220b      	movs	r2, #11
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6938      	ldr	r0, [r7, #16]
 800b1d0:	f7fe fc0e 	bl	80099f0 <mem_cmp>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d016      	beq.n	800b208 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800b1da:	23ff      	movs	r3, #255	@ 0xff
 800b1dc:	757b      	strb	r3, [r7, #21]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1e8:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff fbc9 	bl	800a984 <dir_next>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f43f af58 	beq.w	800b0ae <dir_find+0x32>
 800b1fe:	e004      	b.n	800b20a <dir_find+0x18e>
		if (res != FR_OK) break;
 800b200:	bf00      	nop
 800b202:	e002      	b.n	800b20a <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800b204:	bf00      	nop
 800b206:	e000      	b.n	800b20a <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800b208:	bf00      	nop

	return res;
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08c      	sub	sp, #48	@ 0x30
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	623b      	str	r3, [r7, #32]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800b230:	f107 030c 	add.w	r3, r7, #12
 800b234:	220c      	movs	r2, #12
 800b236:	6a39      	ldr	r1, [r7, #32]
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe fba1 	bl	8009980 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	f003 0301 	and.w	r3, r3, #1
 800b244:	2b00      	cmp	r3, #0
 800b246:	d03b      	beq.n	800b2c0 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	330b      	adds	r3, #11
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b256:	461a      	mov	r2, r3
 800b258:	2300      	movs	r3, #0
 800b25a:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800b25c:	2301      	movs	r3, #1
 800b25e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b260:	e013      	b.n	800b28a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800b262:	f107 010c 	add.w	r1, r7, #12
 800b266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b268:	69fa      	ldr	r2, [r7, #28]
 800b26a:	6a38      	ldr	r0, [r7, #32]
 800b26c:	f7ff fe58 	bl	800af20 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff ff03 	bl	800b07c <dir_find>
 800b276:	4603      	mov	r3, r0
 800b278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800b27c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800b284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b286:	3301      	adds	r3, #1
 800b288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28c:	2b63      	cmp	r3, #99	@ 0x63
 800b28e:	d9e8      	bls.n	800b262 <dir_register+0x4e>
 800b290:	e000      	b.n	800b294 <dir_register+0x80>
			if (res != FR_OK) break;
 800b292:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b296:	2b64      	cmp	r3, #100	@ 0x64
 800b298:	d101      	bne.n	800b29e <dir_register+0x8a>
 800b29a:	2307      	movs	r3, #7
 800b29c:	e0d8      	b.n	800b450 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b29e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2a2:	2b04      	cmp	r3, #4
 800b2a4:	d002      	beq.n	800b2ac <dir_register+0x98>
 800b2a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2aa:	e0d1      	b.n	800b450 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	330b      	adds	r3, #11
 800b2b0:	7dfa      	ldrb	r2, [r7, #23]
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d014      	beq.n	800b2f4 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2ce:	e002      	b.n	800b2d6 <dir_register+0xc2>
 800b2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	69fa      	ldr	r2, [r7, #28]
 800b2dc:	4413      	add	r3, r2
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1f5      	bne.n	800b2d0 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800b2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e6:	3319      	adds	r3, #25
 800b2e8:	4a5b      	ldr	r2, [pc, #364]	@ (800b458 <dir_register+0x244>)
 800b2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ee:	089b      	lsrs	r3, r3, #2
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2f2:	e001      	b.n	800b2f8 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b2f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff fc8c 	bl	800ac18 <dir_alloc>
 800b300:	4603      	mov	r3, r0
 800b302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d15b      	bne.n	800b3c6 <dir_register+0x1b2>
 800b30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b310:	3b01      	subs	r3, #1
 800b312:	627b      	str	r3, [r7, #36]	@ 0x24
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	2b00      	cmp	r3, #0
 800b318:	d055      	beq.n	800b3c6 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b320:	88db      	ldrh	r3, [r3, #6]
 800b322:	461a      	mov	r2, r3
 800b324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff fa5c 	bl	800a7e8 <dir_sdi>
 800b330:	4603      	mov	r3, r0
 800b332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d143      	bne.n	800b3c6 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff fe78 	bl	800b03c <sum_sfn>
 800b34c:	4603      	mov	r3, r0
 800b34e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f7fe fd94 	bl	8009e90 <move_window>
 800b368:	4603      	mov	r3, r0
 800b36a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b36e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b372:	2b00      	cmp	r3, #0
 800b374:	d126      	bne.n	800b3c4 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b37c:	6a18      	ldr	r0, [r3, #32]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b384:	6959      	ldr	r1, [r3, #20]
 800b386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	7efb      	ldrb	r3, [r7, #27]
 800b38c:	f7ff fd54 	bl	800ae38 <fit_lfn>
				dp->fs->wflag = 1;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b39c:	2201      	movs	r2, #1
 800b39e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff faee 	bl	800a984 <dir_next>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b3ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d107      	bne.n	800b3c6 <dir_register+0x1b2>
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1c6      	bne.n	800b350 <dir_register+0x13c>
 800b3c2:	e000      	b.n	800b3c6 <dir_register+0x1b2>
				if (res != FR_OK) break;
 800b3c4:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800b3c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d13e      	bne.n	800b44c <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	f7fe fd55 	bl	8009e90 <move_window>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b3ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d12b      	bne.n	800b44c <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3fa:	695b      	ldr	r3, [r3, #20]
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	2100      	movs	r1, #0
 800b400:	4618      	mov	r0, r3
 800b402:	f7fe fadb 	bl	80099bc <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b40c:	6958      	ldr	r0, [r3, #20]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	220b      	movs	r2, #11
 800b418:	4619      	mov	r1, r3
 800b41a:	f7fe fab1 	bl	8009980 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	330b      	adds	r3, #11
 800b428:	781a      	ldrb	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	330c      	adds	r3, #12
 800b434:	f002 0218 	and.w	r2, r2, #24
 800b438:	b2d2      	uxtb	r2, r2
 800b43a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b448:	2201      	movs	r2, #1
 800b44a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800b44c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b450:	4618      	mov	r0, r3
 800b452:	3730      	adds	r7, #48	@ 0x30
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	4ec4ec4f 	.word	0x4ec4ec4f

0800b45c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	@ 0x28
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	613b      	str	r3, [r7, #16]
 800b46c:	e002      	b.n	800b474 <create_name+0x18>
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	3301      	adds	r3, #1
 800b472:	613b      	str	r3, [r7, #16]
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b2f      	cmp	r3, #47	@ 0x2f
 800b47a:	d0f8      	beq.n	800b46e <create_name+0x12>
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b5c      	cmp	r3, #92	@ 0x5c
 800b482:	d0f4      	beq.n	800b46e <create_name+0x12>
	lfn = dp->lfn;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b48a:	6a1b      	ldr	r3, [r3, #32]
 800b48c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	1c5a      	adds	r2, r3, #1
 800b49a:	61ba      	str	r2, [r7, #24]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	4413      	add	r3, r2
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800b4a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4a6:	2b1f      	cmp	r3, #31
 800b4a8:	d92f      	bls.n	800b50a <create_name+0xae>
 800b4aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4ae:	d02c      	beq.n	800b50a <create_name+0xae>
 800b4b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4b2:	2b5c      	cmp	r3, #92	@ 0x5c
 800b4b4:	d029      	beq.n	800b50a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2bfe      	cmp	r3, #254	@ 0xfe
 800b4ba:	d901      	bls.n	800b4c0 <create_name+0x64>
			return FR_INVALID_NAME;
 800b4bc:	2306      	movs	r3, #6
 800b4be:	e186      	b.n	800b7ce <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b4c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b4c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f002 fc5a 	bl	800dd84 <ff_convert>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b4d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <create_name+0x82>
 800b4da:	2306      	movs	r3, #6
 800b4dc:	e177      	b.n	800b7ce <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800b4de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4e2:	d809      	bhi.n	800b4f8 <create_name+0x9c>
 800b4e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	488e      	ldr	r0, [pc, #568]	@ (800b724 <create_name+0x2c8>)
 800b4ea:	f7fe faa7 	bl	8009a3c <chk_chr>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <create_name+0x9c>
			return FR_INVALID_NAME;
 800b4f4:	2306      	movs	r3, #6
 800b4f6:	e16a      	b.n	800b7ce <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	617a      	str	r2, [r7, #20]
 800b4fe:	005b      	lsls	r3, r3, #1
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4413      	add	r3, r2
 800b504:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b506:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b508:	e7c5      	b.n	800b496 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	441a      	add	r2, r3
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b514:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b516:	2b1f      	cmp	r3, #31
 800b518:	d801      	bhi.n	800b51e <create_name+0xc2>
 800b51a:	2304      	movs	r3, #4
 800b51c:	e000      	b.n	800b520 <create_name+0xc4>
 800b51e:	2300      	movs	r3, #0
 800b520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b524:	e011      	b.n	800b54a <create_name+0xee>
		w = lfn[di - 1];
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b52c:	3b01      	subs	r3, #1
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	4413      	add	r3, r2
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b538:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b53a:	2b20      	cmp	r3, #32
 800b53c:	d002      	beq.n	800b544 <create_name+0xe8>
 800b53e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b540:	2b2e      	cmp	r3, #46	@ 0x2e
 800b542:	d106      	bne.n	800b552 <create_name+0xf6>
		di--;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	3b01      	subs	r3, #1
 800b548:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1ea      	bne.n	800b526 <create_name+0xca>
 800b550:	e000      	b.n	800b554 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800b552:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d101      	bne.n	800b55e <create_name+0x102>
 800b55a:	2306      	movs	r3, #6
 800b55c:	e137      	b.n	800b7ce <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	4413      	add	r3, r2
 800b566:	2200      	movs	r2, #0
 800b568:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	220b      	movs	r2, #11
 800b574:	2120      	movs	r1, #32
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe fa20 	bl	80099bc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b57c:	2300      	movs	r3, #0
 800b57e:	61bb      	str	r3, [r7, #24]
 800b580:	e002      	b.n	800b588 <create_name+0x12c>
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	3301      	adds	r3, #1
 800b586:	61bb      	str	r3, [r7, #24]
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	4413      	add	r3, r2
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	2b20      	cmp	r3, #32
 800b594:	d0f5      	beq.n	800b582 <create_name+0x126>
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	4413      	add	r3, r2
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5a2:	d0ee      	beq.n	800b582 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d009      	beq.n	800b5be <create_name+0x162>
 800b5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5ae:	f043 0303 	orr.w	r3, r3, #3
 800b5b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b5b6:	e002      	b.n	800b5be <create_name+0x162>
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d009      	beq.n	800b5d8 <create_name+0x17c>
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5d6:	d1ef      	bne.n	800b5b8 <create_name+0x15c>

	b = i = 0; ni = 8;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	623b      	str	r3, [r7, #32]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b5e2:	2308      	movs	r3, #8
 800b5e4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	61ba      	str	r2, [r7, #24]
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b5f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 8091 	beq.w	800b720 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b5fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b600:	2b20      	cmp	r3, #32
 800b602:	d006      	beq.n	800b612 <create_name+0x1b6>
 800b604:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b606:	2b2e      	cmp	r3, #46	@ 0x2e
 800b608:	d10a      	bne.n	800b620 <create_name+0x1c4>
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d006      	beq.n	800b620 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800b612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b616:	f043 0303 	orr.w	r3, r3, #3
 800b61a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b61e:	e07e      	b.n	800b71e <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b620:	6a3a      	ldr	r2, [r7, #32]
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	429a      	cmp	r2, r3
 800b626:	d203      	bcs.n	800b630 <create_name+0x1d4>
 800b628:	69ba      	ldr	r2, [r7, #24]
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d123      	bne.n	800b678 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	2b0b      	cmp	r3, #11
 800b634:	d106      	bne.n	800b644 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800b636:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b63a:	f043 0303 	orr.w	r3, r3, #3
 800b63e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b642:	e076      	b.n	800b732 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d005      	beq.n	800b658 <create_name+0x1fc>
 800b64c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b650:	f043 0303 	orr.w	r3, r3, #3
 800b654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b658:	69ba      	ldr	r2, [r7, #24]
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d867      	bhi.n	800b730 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	61bb      	str	r3, [r7, #24]
 800b664:	2308      	movs	r3, #8
 800b666:	623b      	str	r3, [r7, #32]
 800b668:	230b      	movs	r3, #11
 800b66a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b66c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b676:	e052      	b.n	800b71e <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b678:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b67a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b67c:	d914      	bls.n	800b6a8 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b67e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b680:	2100      	movs	r1, #0
 800b682:	4618      	mov	r0, r3
 800b684:	f002 fb7e 	bl	800dd84 <ff_convert>
 800b688:	4603      	mov	r3, r0
 800b68a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b68c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <create_name+0x240>
 800b692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b694:	3b80      	subs	r3, #128	@ 0x80
 800b696:	4a24      	ldr	r2, [pc, #144]	@ (800b728 <create_name+0x2cc>)
 800b698:	5cd3      	ldrb	r3, [r2, r3]
 800b69a:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b69c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6a0:	f043 0302 	orr.w	r3, r3, #2
 800b6a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b6a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d007      	beq.n	800b6be <create_name+0x262>
 800b6ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	481e      	ldr	r0, [pc, #120]	@ (800b72c <create_name+0x2d0>)
 800b6b4:	f7fe f9c2 	bl	8009a3c <chk_chr>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d008      	beq.n	800b6d0 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b6be:	235f      	movs	r3, #95	@ 0x5f
 800b6c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6c6:	f043 0303 	orr.w	r3, r3, #3
 800b6ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b6ce:	e01b      	b.n	800b708 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b6d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6d2:	2b40      	cmp	r3, #64	@ 0x40
 800b6d4:	d909      	bls.n	800b6ea <create_name+0x28e>
 800b6d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6d8:	2b5a      	cmp	r3, #90	@ 0x5a
 800b6da:	d806      	bhi.n	800b6ea <create_name+0x28e>
					b |= 2;
 800b6dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6e0:	f043 0302 	orr.w	r3, r3, #2
 800b6e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b6e8:	e00e      	b.n	800b708 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b6ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6ec:	2b60      	cmp	r3, #96	@ 0x60
 800b6ee:	d90b      	bls.n	800b708 <create_name+0x2ac>
 800b6f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b6f2:	2b7a      	cmp	r3, #122	@ 0x7a
 800b6f4:	d808      	bhi.n	800b708 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800b6f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6fa:	f043 0301 	orr.w	r3, r3, #1
 800b6fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b704:	3b20      	subs	r3, #32
 800b706:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b70e:	699a      	ldr	r2, [r3, #24]
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	1c59      	adds	r1, r3, #1
 800b714:	6239      	str	r1, [r7, #32]
 800b716:	4413      	add	r3, r2
 800b718:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b71a:	b2d2      	uxtb	r2, r2
 800b71c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b71e:	e762      	b.n	800b5e6 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800b720:	bf00      	nop
 800b722:	e006      	b.n	800b732 <create_name+0x2d6>
 800b724:	0800f464 	.word	0x0800f464
 800b728:	0800f518 	.word	0x0800f518
 800b72c:	0800f470 	.word	0x0800f470
			if (si > di) break;			/* No extension */
 800b730:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	2be5      	cmp	r3, #229	@ 0xe5
 800b73e:	d105      	bne.n	800b74c <create_name+0x2f0>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	2205      	movs	r2, #5
 800b74a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	2b08      	cmp	r3, #8
 800b750:	d104      	bne.n	800b75c <create_name+0x300>
 800b752:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b75c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b760:	f003 030c 	and.w	r3, r3, #12
 800b764:	2b0c      	cmp	r3, #12
 800b766:	d005      	beq.n	800b774 <create_name+0x318>
 800b768:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b76c:	f003 0303 	and.w	r3, r3, #3
 800b770:	2b03      	cmp	r3, #3
 800b772:	d105      	bne.n	800b780 <create_name+0x324>
		cf |= NS_LFN;
 800b774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b778:	f043 0302 	orr.w	r3, r3, #2
 800b77c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b784:	f003 0302 	and.w	r3, r3, #2
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d117      	bne.n	800b7bc <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b78c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b790:	f003 0303 	and.w	r3, r3, #3
 800b794:	2b01      	cmp	r3, #1
 800b796:	d105      	bne.n	800b7a4 <create_name+0x348>
 800b798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b79c:	f043 0310 	orr.w	r3, r3, #16
 800b7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b7a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b7a8:	f003 030c 	and.w	r3, r3, #12
 800b7ac:	2b04      	cmp	r3, #4
 800b7ae:	d105      	bne.n	800b7bc <create_name+0x360>
 800b7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7b4:	f043 0308 	orr.w	r3, r3, #8
 800b7b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	330b      	adds	r3, #11
 800b7c6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b7ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b7cc:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3728      	adds	r7, #40	@ 0x28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop

0800b7d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b7e8:	d003      	beq.n	800b7f2 <follow_path+0x1a>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b5c      	cmp	r3, #92	@ 0x5c
 800b7f0:	d102      	bne.n	800b7f8 <follow_path+0x20>
		path++;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7fe:	461a      	mov	r2, r3
 800b800:	2300      	movs	r3, #0
 800b802:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b1f      	cmp	r3, #31
 800b80a:	d80c      	bhi.n	800b826 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800b80c:	2100      	movs	r1, #0
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7fe ffea 	bl	800a7e8 <dir_sdi>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b81e:	461a      	mov	r2, r3
 800b820:	2300      	movs	r3, #0
 800b822:	6153      	str	r3, [r2, #20]
 800b824:	e049      	b.n	800b8ba <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b826:	463b      	mov	r3, r7
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7ff fe16 	bl	800b45c <create_name>
 800b830:	4603      	mov	r3, r0
 800b832:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b834:	7bfb      	ldrb	r3, [r7, #15]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d13a      	bne.n	800b8b0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7ff fc1e 	bl	800b07c <dir_find>
 800b840:	4603      	mov	r3, r0
 800b842:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	7adb      	ldrb	r3, [r3, #11]
 800b84e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b850:	7bfb      	ldrb	r3, [r7, #15]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d12b      	bne.n	800b8b4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	f003 0304 	and.w	r3, r3, #4
 800b862:	2b00      	cmp	r3, #0
 800b864:	d126      	bne.n	800b8b4 <follow_path+0xdc>
 800b866:	2305      	movs	r3, #5
 800b868:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b86a:	e023      	b.n	800b8b4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	f003 0304 	and.w	r3, r3, #4
 800b872:	2b00      	cmp	r3, #0
 800b874:	d120      	bne.n	800b8b8 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	330b      	adds	r3, #11
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	f003 0310 	and.w	r3, r3, #16
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d102      	bne.n	800b894 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800b88e:	2305      	movs	r3, #5
 800b890:	73fb      	strb	r3, [r7, #15]
 800b892:	e012      	b.n	800b8ba <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68b9      	ldr	r1, [r7, #8]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff fa08 	bl	800acb4 <ld_clust>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8ac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b8ae:	e7ba      	b.n	800b826 <follow_path+0x4e>
			if (res != FR_OK) break;
 800b8b0:	bf00      	nop
 800b8b2:	e002      	b.n	800b8ba <follow_path+0xe2>
				break;
 800b8b4:	bf00      	nop
 800b8b6:	e000      	b.n	800b8ba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b8b8:	bf00      	nop
		}
	}

	return res;
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d031      	beq.n	800b93e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	e002      	b.n	800b8e8 <get_ldnumber+0x24>
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	617b      	str	r3, [r7, #20]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b1f      	cmp	r3, #31
 800b8ee:	d903      	bls.n	800b8f8 <get_ldnumber+0x34>
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b3a      	cmp	r3, #58	@ 0x3a
 800b8f6:	d1f4      	bne.n	800b8e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b3a      	cmp	r3, #58	@ 0x3a
 800b8fe:	d11c      	bne.n	800b93a <get_ldnumber+0x76>
			tp = *path;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	60fa      	str	r2, [r7, #12]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	3b30      	subs	r3, #48	@ 0x30
 800b910:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b09      	cmp	r3, #9
 800b916:	d80e      	bhi.n	800b936 <get_ldnumber+0x72>
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d10a      	bne.n	800b936 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d107      	bne.n	800b936 <get_ldnumber+0x72>
					vol = (int)i;
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	3301      	adds	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	e002      	b.n	800b940 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b93a:	2300      	movs	r3, #0
 800b93c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b93e:	693b      	ldr	r3, [r7, #16]
}
 800b940:	4618      	mov	r0, r3
 800b942:	371c      	adds	r7, #28
 800b944:	46bd      	mov	sp, r7
 800b946:	bc80      	pop	{r7}
 800b948:	4770      	bx	lr
	...

0800b94c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b95c:	2200      	movs	r2, #0
 800b95e:	711a      	strb	r2, [r3, #4]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b966:	461a      	mov	r2, r3
 800b968:	f04f 33ff 	mov.w	r3, #4294967295
 800b96c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7fe fa8d 	bl	8009e90 <move_window>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d001      	beq.n	800b980 <check_fs+0x34>
		return 3;
 800b97c:	2303      	movs	r3, #3
 800b97e:	e04a      	b.n	800ba16 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b986:	3301      	adds	r3, #1
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	b21a      	sxth	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800b994:	b21b      	sxth	r3, r3
 800b996:	4313      	orrs	r3, r2
 800b998:	b21b      	sxth	r3, r3
 800b99a:	4a21      	ldr	r2, [pc, #132]	@ (800ba20 <check_fs+0xd4>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d001      	beq.n	800b9a4 <check_fs+0x58>
		return 2;
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	e038      	b.n	800ba16 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3336      	adds	r3, #54	@ 0x36
 800b9a8:	3303      	adds	r3, #3
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	061a      	lsls	r2, r3, #24
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	3336      	adds	r3, #54	@ 0x36
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	041b      	lsls	r3, r3, #16
 800b9b8:	431a      	orrs	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3336      	adds	r3, #54	@ 0x36
 800b9be:	3301      	adds	r3, #1
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b9d2:	4a14      	ldr	r2, [pc, #80]	@ (800ba24 <check_fs+0xd8>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d101      	bne.n	800b9dc <check_fs+0x90>
		return 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e01c      	b.n	800ba16 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3352      	adds	r3, #82	@ 0x52
 800b9e0:	3303      	adds	r3, #3
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	061a      	lsls	r2, r3, #24
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	3352      	adds	r3, #82	@ 0x52
 800b9ea:	3302      	adds	r3, #2
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	041b      	lsls	r3, r3, #16
 800b9f0:	431a      	orrs	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3352      	adds	r3, #82	@ 0x52
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	021b      	lsls	r3, r3, #8
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800ba04:	4313      	orrs	r3, r2
 800ba06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ba0a:	4a06      	ldr	r2, [pc, #24]	@ (800ba24 <check_fs+0xd8>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d101      	bne.n	800ba14 <check_fs+0xc8>
		return 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	e000      	b.n	800ba16 <check_fs+0xca>

	return 1;
 800ba14:	2301      	movs	r3, #1
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	ffffaa55 	.word	0xffffaa55
 800ba24:	00544146 	.word	0x00544146

0800ba28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b096      	sub	sp, #88	@ 0x58
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	4613      	mov	r3, r2
 800ba34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ba3c:	68b8      	ldr	r0, [r7, #8]
 800ba3e:	f7ff ff41 	bl	800b8c4 <get_ldnumber>
 800ba42:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ba44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	da01      	bge.n	800ba4e <find_volume+0x26>
 800ba4a:	230b      	movs	r3, #11
 800ba4c:	e311      	b.n	800c072 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ba4e:	4a98      	ldr	r2, [pc, #608]	@ (800bcb0 <find_volume+0x288>)
 800ba50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba56:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ba58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <find_volume+0x3a>
 800ba5e:	230c      	movs	r3, #12
 800ba60:	e307      	b.n	800c072 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba66:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800ba68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d01c      	beq.n	800baae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba7a:	785b      	ldrb	r3, [r3, #1]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fd fee1 	bl	8009844 <disk_status>
 800ba82:	4603      	mov	r3, r0
 800ba84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ba88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10c      	bne.n	800baae <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d007      	beq.n	800baaa <find_volume+0x82>
 800ba9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba9e:	f003 0304 	and.w	r3, r3, #4
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800baa6:	230a      	movs	r3, #10
 800baa8:	e2e3      	b.n	800c072 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800baaa:	2300      	movs	r3, #0
 800baac:	e2e1      	b.n	800c072 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800baae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bab4:	2200      	movs	r2, #0
 800bab6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baba:	b2da      	uxtb	r2, r3
 800babc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bac2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800baca:	785b      	ldrb	r3, [r3, #1]
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fd fed3 	bl	8009878 <disk_initialize>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800bad8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bae4:	2303      	movs	r3, #3
 800bae6:	e2c4      	b.n	800c072 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800bae8:	79fb      	ldrb	r3, [r7, #7]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d007      	beq.n	800bafe <find_volume+0xd6>
 800baee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800baf2:	f003 0304 	and.w	r3, r3, #4
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800bafa:	230a      	movs	r3, #10
 800bafc:	e2b9      	b.n	800c072 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800bafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb04:	7858      	ldrb	r0, [r3, #1]
 800bb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb0c:	330a      	adds	r3, #10
 800bb0e:	461a      	mov	r2, r3
 800bb10:	2102      	movs	r1, #2
 800bb12:	f7fd ff17 	bl	8009944 <disk_ioctl>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10d      	bne.n	800bb38 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb22:	895b      	ldrh	r3, [r3, #10]
 800bb24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb28:	d306      	bcc.n	800bb38 <find_volume+0x110>
 800bb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb30:	895b      	ldrh	r3, [r3, #10]
 800bb32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb36:	d901      	bls.n	800bb3c <find_volume+0x114>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e29a      	b.n	800c072 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800bb40:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bb42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bb44:	f7ff ff02 	bl	800b94c <check_fs>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800bb4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d153      	bne.n	800bbfe <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800bb56:	2300      	movs	r3, #0
 800bb58:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb5a:	e028      	b.n	800bbae <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800bb5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb60:	011b      	lsls	r3, r3, #4
 800bb62:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bb66:	4413      	add	r3, r2
 800bb68:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d012      	beq.n	800bb9a <find_volume+0x172>
 800bb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb76:	330b      	adds	r3, #11
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	061a      	lsls	r2, r3, #24
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7e:	330a      	adds	r3, #10
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	041b      	lsls	r3, r3, #16
 800bb84:	431a      	orrs	r2, r3
 800bb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb88:	3309      	adds	r3, #9
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	021b      	lsls	r3, r3, #8
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb92:	3208      	adds	r2, #8
 800bb94:	7812      	ldrb	r2, [r2, #0]
 800bb96:	431a      	orrs	r2, r3
 800bb98:	e000      	b.n	800bb9c <find_volume+0x174>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	3358      	adds	r3, #88	@ 0x58
 800bba2:	443b      	add	r3, r7
 800bba4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800bba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbaa:	3301      	adds	r3, #1
 800bbac:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d9d3      	bls.n	800bb5c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800bbb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d002      	beq.n	800bbc4 <find_volume+0x19c>
 800bbbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800bbc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	3358      	adds	r3, #88	@ 0x58
 800bbca:	443b      	add	r3, r7
 800bbcc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bbd0:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800bbd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d005      	beq.n	800bbe4 <find_volume+0x1bc>
 800bbd8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bbda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bbdc:	f7ff feb6 	bl	800b94c <check_fs>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	e000      	b.n	800bbe6 <find_volume+0x1be>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800bbea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d005      	beq.n	800bbfe <find_volume+0x1d6>
 800bbf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d9e2      	bls.n	800bbc4 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bbfe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d101      	bne.n	800bc0a <find_volume+0x1e2>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e233      	b.n	800c072 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800bc0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <find_volume+0x1ee>
 800bc12:	230d      	movs	r3, #13
 800bc14:	e22d      	b.n	800c072 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc18:	7b1b      	ldrb	r3, [r3, #12]
 800bc1a:	021b      	lsls	r3, r3, #8
 800bc1c:	b21a      	sxth	r2, r3
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc20:	7adb      	ldrb	r3, [r3, #11]
 800bc22:	b21b      	sxth	r3, r3
 800bc24:	4313      	orrs	r3, r2
 800bc26:	b21a      	sxth	r2, r3
 800bc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc2e:	895b      	ldrh	r3, [r3, #10]
 800bc30:	b21b      	sxth	r3, r3
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d001      	beq.n	800bc3a <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800bc36:	230d      	movs	r3, #13
 800bc38:	e21b      	b.n	800c072 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800bc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc3c:	7ddb      	ldrb	r3, [r3, #23]
 800bc3e:	021b      	lsls	r3, r3, #8
 800bc40:	b21a      	sxth	r2, r3
 800bc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc44:	7d9b      	ldrb	r3, [r3, #22]
 800bc46:	b21b      	sxth	r3, r3
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	b21b      	sxth	r3, r3
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800bc50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d112      	bne.n	800bc7c <find_volume+0x254>
 800bc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc58:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800bc5c:	061a      	lsls	r2, r3, #24
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc60:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800bc64:	041b      	lsls	r3, r3, #16
 800bc66:	431a      	orrs	r2, r3
 800bc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bc6e:	021b      	lsls	r3, r3, #8
 800bc70:	4313      	orrs	r3, r2
 800bc72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bc74:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc82:	461a      	mov	r2, r3
 800bc84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc86:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800bc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8a:	7c1a      	ldrb	r2, [r3, #16]
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc92:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800bc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc9a:	78db      	ldrb	r3, [r3, #3]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d009      	beq.n	800bcb4 <find_volume+0x28c>
 800bca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bca6:	78db      	ldrb	r3, [r3, #3]
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d003      	beq.n	800bcb4 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800bcac:	230d      	movs	r3, #13
 800bcae:	e1e0      	b.n	800c072 <find_volume+0x64a>
 800bcb0:	2000037c 	.word	0x2000037c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcba:	78db      	ldrb	r3, [r3, #3]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcc0:	fb02 f303 	mul.w	r3, r2, r3
 800bcc4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	7b5a      	ldrb	r2, [r3, #13]
 800bcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcd0:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcd8:	789b      	ldrb	r3, [r3, #2]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00c      	beq.n	800bcf8 <find_volume+0x2d0>
 800bcde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bce4:	789b      	ldrb	r3, [r3, #2]
 800bce6:	461a      	mov	r2, r3
 800bce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcee:	789b      	ldrb	r3, [r3, #2]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800bcf8:	230d      	movs	r3, #13
 800bcfa:	e1ba      	b.n	800c072 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800bcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfe:	7c9b      	ldrb	r3, [r3, #18]
 800bd00:	021b      	lsls	r3, r3, #8
 800bd02:	b21a      	sxth	r2, r3
 800bd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd06:	7c5b      	ldrb	r3, [r3, #17]
 800bd08:	b21b      	sxth	r3, r3
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd16:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd1e:	891b      	ldrh	r3, [r3, #8]
 800bd20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bd26:	8952      	ldrh	r2, [r2, #10]
 800bd28:	0952      	lsrs	r2, r2, #5
 800bd2a:	b292      	uxth	r2, r2
 800bd2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd30:	fb01 f202 	mul.w	r2, r1, r2
 800bd34:	1a9b      	subs	r3, r3, r2
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800bd3c:	230d      	movs	r3, #13
 800bd3e:	e198      	b.n	800c072 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800bd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd42:	7d1b      	ldrb	r3, [r3, #20]
 800bd44:	021b      	lsls	r3, r3, #8
 800bd46:	b21a      	sxth	r2, r3
 800bd48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd4a:	7cdb      	ldrb	r3, [r3, #19]
 800bd4c:	b21b      	sxth	r3, r3
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	b21b      	sxth	r3, r3
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800bd56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d112      	bne.n	800bd82 <find_volume+0x35a>
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800bd62:	061a      	lsls	r2, r3, #24
 800bd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd66:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800bd6a:	041b      	lsls	r3, r3, #16
 800bd6c:	431a      	orrs	r2, r3
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bd74:	021b      	lsls	r3, r3, #8
 800bd76:	4313      	orrs	r3, r2
 800bd78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800bd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd84:	7bdb      	ldrb	r3, [r3, #15]
 800bd86:	021b      	lsls	r3, r3, #8
 800bd88:	b21a      	sxth	r2, r3
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8c:	7b9b      	ldrb	r3, [r3, #14]
 800bd8e:	b21b      	sxth	r3, r3
 800bd90:	4313      	orrs	r3, r2
 800bd92:	b21b      	sxth	r3, r3
 800bd94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800bd96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <find_volume+0x378>
 800bd9c:	230d      	movs	r3, #13
 800bd9e:	e168      	b.n	800c072 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800bda0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bda2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bda4:	4413      	add	r3, r2
 800bda6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bda8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bdac:	8911      	ldrh	r1, [r2, #8]
 800bdae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bdb4:	8952      	ldrh	r2, [r2, #10]
 800bdb6:	0952      	lsrs	r2, r2, #5
 800bdb8:	b292      	uxth	r2, r2
 800bdba:	fbb1 f2f2 	udiv	r2, r1, r2
 800bdbe:	b292      	uxth	r2, r2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bdc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d201      	bcs.n	800bdd0 <find_volume+0x3a8>
 800bdcc:	230d      	movs	r3, #13
 800bdce:	e150      	b.n	800c072 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800bdd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bddc:	7892      	ldrb	r2, [r2, #2]
 800bdde:	fbb3 f3f2 	udiv	r3, r3, r2
 800bde2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800bde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <find_volume+0x3c6>
 800bdea:	230d      	movs	r3, #13
 800bdec:	e141      	b.n	800c072 <find_volume+0x64a>
	fmt = FS_FAT12;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d902      	bls.n	800be04 <find_volume+0x3dc>
 800bdfe:	2302      	movs	r3, #2
 800be00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800be04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be06:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d902      	bls.n	800be14 <find_volume+0x3ec>
 800be0e:	2303      	movs	r3, #3
 800be10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800be14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be16:	3302      	adds	r3, #2
 800be18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800be1e:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800be20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be26:	461a      	mov	r2, r3
 800be28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be2a:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800be2c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be30:	4413      	add	r3, r2
 800be32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800be38:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800be3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3e:	4413      	add	r3, r2
 800be40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800be46:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 800be48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800be4c:	2b03      	cmp	r3, #3
 800be4e:	d124      	bne.n	800be9a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800be50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be56:	891b      	ldrh	r3, [r3, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <find_volume+0x438>
 800be5c:	230d      	movs	r3, #13
 800be5e:	e108      	b.n	800c072 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800be60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be62:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800be66:	061a      	lsls	r2, r3, #24
 800be68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800be6e:	041b      	lsls	r3, r3, #16
 800be70:	431a      	orrs	r2, r3
 800be72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800be78:	021b      	lsls	r3, r3, #8
 800be7a:	4313      	orrs	r3, r2
 800be7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be7e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800be82:	4313      	orrs	r3, r2
 800be84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800be8a:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	647b      	str	r3, [r7, #68]	@ 0x44
 800be98:	e02b      	b.n	800bef2 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800be9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bea0:	891b      	ldrh	r3, [r3, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <find_volume+0x482>
 800bea6:	230d      	movs	r3, #13
 800bea8:	e0e3      	b.n	800c072 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800beaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800beb0:	6a1a      	ldr	r2, [r3, #32]
 800beb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beb4:	4413      	add	r3, r2
 800beb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800beb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bebc:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bebe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bec2:	2b02      	cmp	r3, #2
 800bec4:	d105      	bne.n	800bed2 <find_volume+0x4aa>
 800bec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	e00e      	b.n	800bef0 <find_volume+0x4c8>
 800bed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bed8:	695a      	ldr	r2, [r3, #20]
 800beda:	4613      	mov	r3, r2
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	4413      	add	r3, r2
 800bee0:	085a      	lsrs	r2, r3, #1
 800bee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800bef0:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800bef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bef8:	699a      	ldr	r2, [r3, #24]
 800befa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf00:	895b      	ldrh	r3, [r3, #10]
 800bf02:	4619      	mov	r1, r3
 800bf04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf06:	440b      	add	r3, r1
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bf0c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800bf10:	8949      	ldrh	r1, [r1, #10]
 800bf12:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d201      	bcs.n	800bf1e <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800bf1a:	230d      	movs	r3, #13
 800bf1c:	e0a9      	b.n	800c072 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf24:	461a      	mov	r2, r3
 800bf26:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2a:	6113      	str	r3, [r2, #16]
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bf3a:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800bf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf42:	2280      	movs	r2, #128	@ 0x80
 800bf44:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800bf46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d17a      	bne.n	800c044 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf50:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bf54:	021b      	lsls	r3, r3, #8
 800bf56:	b21a      	sxth	r2, r3
 800bf58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf5e:	b21b      	sxth	r3, r3
 800bf60:	4313      	orrs	r3, r2
 800bf62:	b21b      	sxth	r3, r3
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d16d      	bne.n	800c044 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800bf68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bf70:	f7fd ff8e 	bl	8009e90 <move_window>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d164      	bne.n	800c044 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf80:	2200      	movs	r2, #0
 800bf82:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bf84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf86:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800bf8a:	021b      	lsls	r3, r3, #8
 800bf8c:	b21a      	sxth	r2, r3
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf90:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800bf94:	b21b      	sxth	r3, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	b21b      	sxth	r3, r3
 800bf9a:	4a38      	ldr	r2, [pc, #224]	@ (800c07c <find_volume+0x654>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d151      	bne.n	800c044 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa2:	78db      	ldrb	r3, [r3, #3]
 800bfa4:	061a      	lsls	r2, r3, #24
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa8:	789b      	ldrb	r3, [r3, #2]
 800bfaa:	041b      	lsls	r3, r3, #16
 800bfac:	431a      	orrs	r2, r3
 800bfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb0:	785b      	ldrb	r3, [r3, #1]
 800bfb2:	021b      	lsls	r3, r3, #8
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfb8:	7812      	ldrb	r2, [r2, #0]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	4a30      	ldr	r2, [pc, #192]	@ (800c080 <find_volume+0x658>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d140      	bne.n	800c044 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc4:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800bfc8:	061a      	lsls	r2, r3, #24
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800bfd0:	041b      	lsls	r3, r3, #16
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd6:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800bfda:	021b      	lsls	r3, r3, #8
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfe0:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	4a27      	ldr	r2, [pc, #156]	@ (800c084 <find_volume+0x65c>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d12b      	bne.n	800c044 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800bfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfee:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800bff2:	061a      	lsls	r2, r3, #24
 800bff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff6:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800bffa:	041b      	lsls	r3, r3, #16
 800bffc:	431a      	orrs	r2, r3
 800bffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c000:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800c004:	021b      	lsls	r3, r3, #8
 800c006:	4313      	orrs	r3, r2
 800c008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c00a:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800c00e:	4313      	orrs	r3, r2
 800c010:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c012:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c016:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01a:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800c01e:	061a      	lsls	r2, r3, #24
 800c020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c022:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800c026:	041b      	lsls	r3, r3, #16
 800c028:	431a      	orrs	r2, r3
 800c02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02c:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800c030:	021b      	lsls	r3, r3, #8
 800c032:	4313      	orrs	r3, r2
 800c034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c036:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800c03a:	4313      	orrs	r3, r2
 800c03c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c03e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c042:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c04a:	461a      	mov	r2, r3
 800c04c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c050:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800c052:	4b0d      	ldr	r3, [pc, #52]	@ (800c088 <find_volume+0x660>)
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	3301      	adds	r3, #1
 800c058:	b29a      	uxth	r2, r3
 800c05a:	4b0b      	ldr	r3, [pc, #44]	@ (800c088 <find_volume+0x660>)
 800c05c:	801a      	strh	r2, [r3, #0]
 800c05e:	4b0a      	ldr	r3, [pc, #40]	@ (800c088 <find_volume+0x660>)
 800c060:	881a      	ldrh	r2, [r3, #0]
 800c062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c068:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c06a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c06c:	f7fd fe94 	bl	8009d98 <clear_lock>
#endif

	return FR_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3758      	adds	r7, #88	@ 0x58
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	ffffaa55 	.word	0xffffaa55
 800c080:	41615252 	.word	0x41615252
 800c084:	61417272 	.word	0x61417272
 800c088:	20000380 	.word	0x20000380

0800c08c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d02a      	beq.n	800c0f4 <validate+0x68>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d024      	beq.n	800c0f4 <validate+0x68>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d01b      	beq.n	800c0f4 <validate+0x68>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0c8:	88da      	ldrh	r2, [r3, #6]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0d0:	889b      	ldrh	r3, [r3, #4]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d10e      	bne.n	800c0f4 <validate+0x68>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0e2:	785b      	ldrb	r3, [r3, #1]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fd fbad 	bl	8009844 <disk_status>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800c0f4:	2309      	movs	r3, #9
 800c0f6:	e000      	b.n	800c0fa <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	4613      	mov	r3, r2
 800c110:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800c116:	f107 0310 	add.w	r3, r7, #16
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7ff fbd2 	bl	800b8c4 <get_ldnumber>
 800c120:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	2b00      	cmp	r3, #0
 800c126:	da01      	bge.n	800c12c <f_mount+0x28>
 800c128:	230b      	movs	r3, #11
 800c12a:	e02f      	b.n	800c18c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c12c:	4a19      	ldr	r2, [pc, #100]	@ (800c194 <f_mount+0x90>)
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c134:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d007      	beq.n	800c14c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800c13c:	69b8      	ldr	r0, [r7, #24]
 800c13e:	f7fd fe2b 	bl	8009d98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c148:	2200      	movs	r2, #0
 800c14a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d004      	beq.n	800c15c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c158:	2200      	movs	r2, #0
 800c15a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	490d      	ldr	r1, [pc, #52]	@ (800c194 <f_mount+0x90>)
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <f_mount+0x6e>
 800c16c:	79fb      	ldrb	r3, [r7, #7]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d001      	beq.n	800c176 <f_mount+0x72>
 800c172:	2300      	movs	r3, #0
 800c174:	e00a      	b.n	800c18c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800c176:	f107 0108 	add.w	r1, r7, #8
 800c17a:	f107 030c 	add.w	r3, r7, #12
 800c17e:	2200      	movs	r2, #0
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff fc51 	bl	800ba28 <find_volume>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c18a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3720      	adds	r7, #32
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	2000037c 	.word	0x2000037c

0800c198 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c1a6:	f843 0c4c 	str.w	r0, [r3, #-76]
 800c1aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c1ae:	f843 1c50 	str.w	r1, [r3, #-80]
 800c1b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c1b6:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800c1ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c1be:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d101      	bne.n	800c1ca <f_open+0x32>
 800c1c6:	2309      	movs	r3, #9
 800c1c8:	e2f3      	b.n	800c7b2 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 800c1ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c1ce:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c1d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	2300      	movs	r3, #0
 800c1da:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800c1dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c1e6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c1ea:	f003 031f 	and.w	r3, r3, #31
 800c1ee:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800c1f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c1f6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c1fa:	f023 0301 	bic.w	r3, r3, #1
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	f107 0118 	add.w	r1, r7, #24
 800c204:	3910      	subs	r1, #16
 800c206:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c20a:	3b18      	subs	r3, #24
 800c20c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff fc09 	bl	800ba28 <find_volume>
 800c216:	4603      	mov	r3, r0
 800c218:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c21c:	f102 0217 	add.w	r2, r2, #23
 800c220:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800c222:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c226:	f103 0317 	add.w	r3, r3, #23
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f040 82bb 	bne.w	800c7a8 <f_open+0x610>
		INIT_BUF(dj);
 800c232:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c236:	461a      	mov	r2, r3
 800c238:	f107 0318 	add.w	r3, r7, #24
 800c23c:	3b04      	subs	r3, #4
 800c23e:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 800c242:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c246:	461a      	mov	r2, r3
 800c248:	4bd3      	ldr	r3, [pc, #844]	@ (800c598 <f_open+0x400>)
 800c24a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800c24e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c252:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800c256:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c25a:	3b18      	subs	r3, #24
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff faba 	bl	800b7d8 <follow_path>
 800c264:	4603      	mov	r3, r0
 800c266:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c26a:	f102 0217 	add.w	r2, r2, #23
 800c26e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800c270:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c274:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800c278:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c27c:	f102 0210 	add.w	r2, r2, #16
 800c280:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c282:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c286:	f103 0317 	add.w	r3, r3, #23
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d124      	bne.n	800c2da <f_open+0x142>
			if (!dir)	/* Default directory itself */
 800c290:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c294:	f103 0310 	add.w	r3, r3, #16
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <f_open+0x114>
				res = FR_INVALID_NAME;
 800c29e:	2306      	movs	r3, #6
 800c2a0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c2a4:	f102 0217 	add.w	r2, r2, #23
 800c2a8:	7013      	strb	r3, [r2, #0]
 800c2aa:	e016      	b.n	800c2da <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c2ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c2b0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	bf8c      	ite	hi
 800c2b8:	2301      	movhi	r3, #1
 800c2ba:	2300      	movls	r3, #0
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	461a      	mov	r2, r3
 800c2c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c2c4:	3b18      	subs	r3, #24
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fd fbd1 	bl	8009a70 <chk_lock>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c2d4:	f102 0217 	add.w	r2, r2, #23
 800c2d8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c2da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c2de:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c2e2:	f003 031c 	and.w	r3, r3, #28
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 813c 	beq.w	800c564 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 800c2ec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c2f0:	f103 0317 	add.w	r3, r3, #23
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d02e      	beq.n	800c358 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800c2fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c2fe:	f103 0317 	add.w	r3, r3, #23
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b04      	cmp	r3, #4
 800c306:	d112      	bne.n	800c32e <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c308:	f7fd fc22 	bl	8009b50 <enq_lock>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d007      	beq.n	800c322 <f_open+0x18a>
 800c312:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c316:	3b18      	subs	r3, #24
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe ff7b 	bl	800b214 <dir_register>
 800c31e:	4603      	mov	r3, r0
 800c320:	e000      	b.n	800c324 <f_open+0x18c>
 800c322:	2312      	movs	r3, #18
 800c324:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c328:	f102 0217 	add.w	r2, r2, #23
 800c32c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c32e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c332:	461a      	mov	r2, r3
 800c334:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c338:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c33c:	f043 0308 	orr.w	r3, r3, #8
 800c340:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800c344:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c348:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800c34c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c350:	f102 0210 	add.w	r2, r2, #16
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	e01f      	b.n	800c398 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c358:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c35c:	f103 0310 	add.w	r3, r3, #16
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	330b      	adds	r3, #11
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	f003 0311 	and.w	r3, r3, #17
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d006      	beq.n	800c37c <f_open+0x1e4>
					res = FR_DENIED;
 800c36e:	2307      	movs	r3, #7
 800c370:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c374:	f102 0217 	add.w	r2, r2, #23
 800c378:	7013      	strb	r3, [r2, #0]
 800c37a:	e00d      	b.n	800c398 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800c37c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c380:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c384:	f003 0304 	and.w	r3, r3, #4
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d005      	beq.n	800c398 <f_open+0x200>
						res = FR_EXIST;
 800c38c:	2308      	movs	r3, #8
 800c38e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c392:	f102 0217 	add.w	r2, r2, #23
 800c396:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c398:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c39c:	f103 0317 	add.w	r3, r3, #23
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 8113 	bne.w	800c5ce <f_open+0x436>
 800c3a8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c3ac:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c3b0:	f003 0308 	and.w	r3, r3, #8
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f000 810a 	beq.w	800c5ce <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 800c3ba:	f7fb fe51 	bl	8008060 <get_fattime>
 800c3be:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c3c2:	f103 030c 	add.w	r3, r3, #12
 800c3c6:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800c3c8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c3cc:	f103 0310 	add.w	r3, r3, #16
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	330e      	adds	r3, #14
 800c3d4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c3d8:	f102 020c 	add.w	r2, r2, #12
 800c3dc:	6812      	ldr	r2, [r2, #0]
 800c3de:	b2d2      	uxtb	r2, r2
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c3e6:	f103 030c 	add.w	r3, r3, #12
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	0a1b      	lsrs	r3, r3, #8
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c3f6:	f103 0310 	add.w	r3, r3, #16
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	330f      	adds	r3, #15
 800c3fe:	b2d2      	uxtb	r2, r2
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c406:	f103 030c 	add.w	r3, r3, #12
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	0c1a      	lsrs	r2, r3, #16
 800c40e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c412:	f103 0310 	add.w	r3, r3, #16
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3310      	adds	r3, #16
 800c41a:	b2d2      	uxtb	r2, r2
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c422:	f103 030c 	add.w	r3, r3, #12
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	0e1a      	lsrs	r2, r3, #24
 800c42a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c42e:	f103 0310 	add.w	r3, r3, #16
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3311      	adds	r3, #17
 800c436:	b2d2      	uxtb	r2, r2
 800c438:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800c43a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c43e:	f103 0310 	add.w	r3, r3, #16
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	330b      	adds	r3, #11
 800c446:	2200      	movs	r2, #0
 800c448:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800c44a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c44e:	f103 0310 	add.w	r3, r3, #16
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	331c      	adds	r3, #28
 800c456:	2200      	movs	r2, #0
 800c458:	701a      	strb	r2, [r3, #0]
 800c45a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c45e:	f103 0310 	add.w	r3, r3, #16
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	331d      	adds	r3, #29
 800c466:	2200      	movs	r2, #0
 800c468:	701a      	strb	r2, [r3, #0]
 800c46a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c46e:	f103 0310 	add.w	r3, r3, #16
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	331e      	adds	r3, #30
 800c476:	2200      	movs	r2, #0
 800c478:	701a      	strb	r2, [r3, #0]
 800c47a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c47e:	f103 0310 	add.w	r3, r3, #16
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	331f      	adds	r3, #31
 800c486:	2200      	movs	r2, #0
 800c488:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800c48a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c48e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800c492:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c496:	f102 0210 	add.w	r2, r2, #16
 800c49a:	6811      	ldr	r1, [r2, #0]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe fc09 	bl	800acb4 <ld_clust>
 800c4a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c4a6:	f103 0308 	add.w	r3, r3, #8
 800c4aa:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c4b2:	f103 0310 	add.w	r3, r3, #16
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	f7fe fc2a 	bl	800ad10 <st_clust>
				dj.fs->wflag = 1;
 800c4bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c4c0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800c4c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800c4cc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c4d0:	f103 0308 	add.w	r3, r3, #8
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d079      	beq.n	800c5ce <f_open+0x436>
					dw = dj.fs->winsect;
 800c4da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c4de:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800c4e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c4ec:	f102 020c 	add.w	r2, r2, #12
 800c4f0:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800c4f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c4f6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800c4fa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c4fe:	f102 0208 	add.w	r2, r2, #8
 800c502:	6811      	ldr	r1, [r2, #0]
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe f826 	bl	800a556 <remove_chain>
 800c50a:	4603      	mov	r3, r0
 800c50c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c510:	f102 0217 	add.w	r2, r2, #23
 800c514:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800c516:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c51a:	f103 0317 	add.w	r3, r3, #23
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d154      	bne.n	800c5ce <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800c524:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c528:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 800c52c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c530:	f103 0308 	add.w	r3, r3, #8
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3b01      	subs	r3, #1
 800c538:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c53c:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800c53e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c542:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800c546:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c54a:	f102 020c 	add.w	r2, r2, #12
 800c54e:	6811      	ldr	r1, [r2, #0]
 800c550:	4618      	mov	r0, r3
 800c552:	f7fd fc9d 	bl	8009e90 <move_window>
 800c556:	4603      	mov	r3, r0
 800c558:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c55c:	f102 0217 	add.w	r2, r2, #23
 800c560:	7013      	strb	r3, [r2, #0]
 800c562:	e034      	b.n	800c5ce <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800c564:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c568:	f103 0317 	add.w	r3, r3, #23
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d12d      	bne.n	800c5ce <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800c572:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c576:	f103 0310 	add.w	r3, r3, #16
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	330b      	adds	r3, #11
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	f003 0310 	and.w	r3, r3, #16
 800c584:	2b00      	cmp	r3, #0
 800c586:	d009      	beq.n	800c59c <f_open+0x404>
					res = FR_NO_FILE;
 800c588:	2304      	movs	r3, #4
 800c58a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c58e:	f102 0217 	add.w	r2, r2, #23
 800c592:	7013      	strb	r3, [r2, #0]
 800c594:	e01b      	b.n	800c5ce <f_open+0x436>
 800c596:	bf00      	nop
 800c598:	2000039c 	.word	0x2000039c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800c59c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c5a0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c5a4:	f003 0302 	and.w	r3, r3, #2
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d010      	beq.n	800c5ce <f_open+0x436>
 800c5ac:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c5b0:	f103 0310 	add.w	r3, r3, #16
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	330b      	adds	r3, #11
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d005      	beq.n	800c5ce <f_open+0x436>
						res = FR_DENIED;
 800c5c2:	2307      	movs	r3, #7
 800c5c4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c5c8:	f102 0217 	add.w	r2, r2, #23
 800c5cc:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800c5ce:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c5d2:	f103 0317 	add.w	r3, r3, #23
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d155      	bne.n	800c688 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c5dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c5e0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c5e4:	f003 0308 	and.w	r3, r3, #8
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00a      	beq.n	800c602 <f_open+0x46a>
				mode |= FA__WRITTEN;
 800c5ec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c5f6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c5fa:	f043 0320 	orr.w	r3, r3, #32
 800c5fe:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800c602:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c606:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800c60a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c610:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800c614:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c618:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c61c:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800c61e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c622:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c62a:	461a      	mov	r2, r3
 800c62c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c630:	f103 0310 	add.w	r3, r3, #16
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c638:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c63c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c640:	2b01      	cmp	r3, #1
 800c642:	bf8c      	ite	hi
 800c644:	2301      	movhi	r3, #1
 800c646:	2300      	movls	r3, #0
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	461a      	mov	r2, r3
 800c64c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c650:	3b18      	subs	r3, #24
 800c652:	4611      	mov	r1, r2
 800c654:	4618      	mov	r0, r3
 800c656:	f7fd fa9f 	bl	8009b98 <inc_lock>
 800c65a:	4602      	mov	r2, r0
 800c65c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c660:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c668:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800c66a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c66e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d105      	bne.n	800c688 <f_open+0x4f0>
 800c67c:	2302      	movs	r3, #2
 800c67e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c682:	f102 0217 	add.w	r2, r2, #23
 800c686:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800c688:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c68c:	f103 0317 	add.w	r3, r3, #23
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	f040 8088 	bne.w	800c7a8 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 800c698:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c69c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c6a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c6aa:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800c6ae:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800c6b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c6b4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c6b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6bc:	2200      	movs	r2, #0
 800c6be:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800c6c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c6c4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800c6c8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c6cc:	f102 0210 	add.w	r2, r2, #16
 800c6d0:	6811      	ldr	r1, [r2, #0]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fe faee 	bl	800acb4 <ld_clust>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c6de:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c6e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6e6:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c6e8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c6ec:	f103 0310 	add.w	r3, r3, #16
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	331f      	adds	r3, #31
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	061a      	lsls	r2, r3, #24
 800c6f8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c6fc:	f103 0310 	add.w	r3, r3, #16
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	331e      	adds	r3, #30
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	041b      	lsls	r3, r3, #16
 800c708:	431a      	orrs	r2, r3
 800c70a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c70e:	f103 0310 	add.w	r3, r3, #16
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	331d      	adds	r3, #29
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	021b      	lsls	r3, r3, #8
 800c71a:	4313      	orrs	r3, r2
 800c71c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c720:	f102 0210 	add.w	r2, r2, #16
 800c724:	6812      	ldr	r2, [r2, #0]
 800c726:	321c      	adds	r2, #28
 800c728:	7812      	ldrb	r2, [r2, #0]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800c730:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c734:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c738:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800c73a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c73e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c746:	461a      	mov	r2, r3
 800c748:	2300      	movs	r3, #0
 800c74a:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800c74c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c750:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c758:	461a      	mov	r2, r3
 800c75a:	2300      	movs	r3, #0
 800c75c:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c75e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c762:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c76a:	461a      	mov	r2, r3
 800c76c:	2300      	movs	r3, #0
 800c76e:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c770:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c774:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800c778:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800c77c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800c780:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c784:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800c786:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c78a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c78e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c798:	88da      	ldrh	r2, [r3, #6]
 800c79a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800c79e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800c7a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7a6:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800c7a8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c7ac:	f103 0317 	add.w	r3, r3, #23
 800c7b0:	781b      	ldrb	r3, [r3, #0]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop

0800c7c0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08c      	sub	sp, #48	@ 0x30
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f7ff fc57 	bl	800c08c <validate>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c7e2:	7ffb      	ldrb	r3, [r7, #31]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <f_read+0x2c>
 800c7e8:	7ffb      	ldrb	r3, [r7, #31]
 800c7ea:	e1cd      	b.n	800cb88 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7f2:	79db      	ldrb	r3, [r3, #7]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d004      	beq.n	800c802 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7fe:	79db      	ldrb	r3, [r3, #7]
 800c800:	e1c2      	b.n	800cb88 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c808:	799b      	ldrb	r3, [r3, #6]
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c812:	2307      	movs	r3, #7
 800c814:	e1b8      	b.n	800cb88 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c81c:	68da      	ldr	r2, [r3, #12]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	429a      	cmp	r2, r3
 800c830:	f240 81a5 	bls.w	800cb7e <f_read+0x3be>
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c838:	e1a1      	b.n	800cb7e <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c848:	6812      	ldr	r2, [r2, #0]
 800c84a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c84e:	8952      	ldrh	r2, [r2, #10]
 800c850:	fbb3 f1f2 	udiv	r1, r3, r2
 800c854:	fb01 f202 	mul.w	r2, r1, r2
 800c858:	1a9b      	subs	r3, r3, r2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f040 8140 	bne.w	800cae0 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c86e:	6812      	ldr	r2, [r2, #0]
 800c870:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c874:	8952      	ldrh	r2, [r2, #10]
 800c876:	fbb3 f3f2 	udiv	r3, r3, r2
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c888:	789b      	ldrb	r3, [r3, #2]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	4013      	ands	r3, r2
 800c890:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d143      	bne.n	800c920 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d105      	bne.n	800c8b0 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8aa:	691b      	ldr	r3, [r3, #16]
 800c8ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8ae:	e01c      	b.n	800c8ea <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d009      	beq.n	800c8d0 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f7fd ff4e 	bl	800a768 <clmt_clust>
 800c8cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c8ce:	e00c      	b.n	800c8ea <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	f7fd fbe9 	bl	800a0ba <get_fat>
 800c8e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800c8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d806      	bhi.n	800c8fe <f_read+0x13e>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	71da      	strb	r2, [r3, #7]
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	e144      	b.n	800cb88 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c904:	d106      	bne.n	800c914 <f_read+0x154>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c90c:	2201      	movs	r2, #1
 800c90e:	71da      	strb	r2, [r3, #7]
 800c910:	2301      	movs	r3, #1
 800c912:	e139      	b.n	800cb88 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c91a:	461a      	mov	r2, r3
 800c91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91e:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	4619      	mov	r1, r3
 800c932:	4610      	mov	r0, r2
 800c934:	f7fd fb9d 	bl	800a072 <clust2sect>
 800c938:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d106      	bne.n	800c94e <f_read+0x18e>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c946:	2202      	movs	r2, #2
 800c948:	71da      	strb	r2, [r3, #7]
 800c94a:	2302      	movs	r3, #2
 800c94c:	e11c      	b.n	800cb88 <f_read+0x3c8>
			sect += csect;
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	4413      	add	r3, r2
 800c954:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c962:	895b      	ldrh	r3, [r3, #10]
 800c964:	461a      	mov	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	fbb3 f3f2 	udiv	r3, r3, r2
 800c96c:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c970:	2b00      	cmp	r3, #0
 800c972:	d066      	beq.n	800ca42 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c974:	7dfa      	ldrb	r2, [r7, #23]
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	4413      	add	r3, r2
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c980:	6812      	ldr	r2, [r2, #0]
 800c982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c986:	7892      	ldrb	r2, [r2, #2]
 800c988:	4293      	cmp	r3, r2
 800c98a:	d90a      	bls.n	800c9a2 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c998:	789b      	ldrb	r3, [r3, #2]
 800c99a:	461a      	mov	r2, r3
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9ae:	7858      	ldrb	r0, [r3, #1]
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	6a39      	ldr	r1, [r7, #32]
 800c9b6:	f7fc ff85 	bl	80098c4 <disk_read>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	71da      	strb	r2, [r3, #7]
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e0dc      	b.n	800cb88 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9d4:	799b      	ldrb	r3, [r3, #6]
 800c9d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d024      	beq.n	800ca28 <f_read+0x268>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9e4:	699a      	ldr	r2, [r3, #24]
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d91b      	bls.n	800ca28 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9f6:	699a      	ldr	r2, [r3, #24]
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ca02:	6812      	ldr	r2, [r2, #0]
 800ca04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ca08:	8952      	ldrh	r2, [r2, #10]
 800ca0a:	fb02 f303 	mul.w	r3, r2, r3
 800ca0e:	6a3a      	ldr	r2, [r7, #32]
 800ca10:	18d0      	adds	r0, r2, r3
 800ca12:	68f9      	ldr	r1, [r7, #12]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca20:	895b      	ldrh	r3, [r3, #10]
 800ca22:	461a      	mov	r2, r3
 800ca24:	f7fc ffac 	bl	8009980 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca34:	895b      	ldrh	r3, [r3, #10]
 800ca36:	461a      	mov	r2, r3
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	fb02 f303 	mul.w	r3, r2, r3
 800ca3e:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 800ca40:	e085      	b.n	800cb4e <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d041      	beq.n	800cad4 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca56:	799b      	ldrb	r3, [r3, #6]
 800ca58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d023      	beq.n	800caa8 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca6c:	7858      	ldrb	r0, [r3, #1]
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca76:	699a      	ldr	r2, [r3, #24]
 800ca78:	2301      	movs	r3, #1
 800ca7a:	f7fc ff43 	bl	8009904 <disk_write>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d006      	beq.n	800ca92 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	71da      	strb	r2, [r3, #7]
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e07a      	b.n	800cb88 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca98:	799b      	ldrb	r3, [r3, #6]
 800ca9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caa6:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cab4:	7858      	ldrb	r0, [r3, #1]
 800cab6:	68f9      	ldr	r1, [r7, #12]
 800cab8:	2301      	movs	r3, #1
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	f7fc ff02 	bl	80098c4 <disk_read>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d006      	beq.n	800cad4 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cacc:	2201      	movs	r2, #1
 800cace:	71da      	strb	r2, [r3, #7]
 800cad0:	2301      	movs	r3, #1
 800cad2:	e059      	b.n	800cb88 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cada:	461a      	mov	r2, r3
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caec:	895b      	ldrh	r3, [r3, #10]
 800caee:	4618      	mov	r0, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cafe:	6812      	ldr	r2, [r2, #0]
 800cb00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cb04:	8952      	ldrh	r2, [r2, #10]
 800cb06:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb0a:	fb01 f202 	mul.w	r2, r1, r2
 800cb0e:	1a9b      	subs	r3, r3, r2
 800cb10:	1ac3      	subs	r3, r0, r3
 800cb12:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 800cb14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d901      	bls.n	800cb20 <f_read+0x360>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cb2e:	6812      	ldr	r2, [r2, #0]
 800cb30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cb34:	8952      	ldrh	r2, [r2, #10]
 800cb36:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb3a:	fb01 f202 	mul.w	r2, r1, r2
 800cb3e:	1a9b      	subs	r3, r3, r2
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	4413      	add	r3, r2
 800cb44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb46:	4619      	mov	r1, r3
 800cb48:	6a38      	ldr	r0, [r7, #32]
 800cb4a:	f7fc ff19 	bl	8009980 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cb4e:	6a3a      	ldr	r2, [r7, #32]
 800cb50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb52:	4413      	add	r3, r2
 800cb54:	623b      	str	r3, [r7, #32]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb5c:	689a      	ldr	r2, [r3, #8]
 800cb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb60:	4413      	add	r3, r2
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cb68:	6093      	str	r3, [r2, #8]
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb70:	441a      	add	r2, r3
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f47f ae5a 	bne.w	800c83a <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3730      	adds	r7, #48	@ 0x30
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b08a      	sub	sp, #40	@ 0x28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f7ff fa6f 	bl	800c08c <validate>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <f_write+0x2c>
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
 800cbba:	e21e      	b.n	800cffa <f_write+0x46a>
	if (fp->err)							/* Check error */
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbc2:	79db      	ldrb	r3, [r3, #7]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d004      	beq.n	800cbd2 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbce:	79db      	ldrb	r3, [r3, #7]
 800cbd0:	e213      	b.n	800cffa <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbd8:	799b      	ldrb	r3, [r3, #6]
 800cbda:	f003 0302 	and.w	r3, r3, #2
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800cbe2:	2307      	movs	r3, #7
 800cbe4:	e209      	b.n	800cffa <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbec:	689a      	ldr	r2, [r3, #8]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	441a      	add	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbf8:	689b      	ldr	r3, [r3, #8]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	f080 81d9 	bcs.w	800cfb2 <f_write+0x422>
 800cc00:	2300      	movs	r3, #0
 800cc02:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800cc04:	e1d5      	b.n	800cfb2 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cc14:	6812      	ldr	r2, [r2, #0]
 800cc16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cc1a:	8952      	ldrh	r2, [r2, #10]
 800cc1c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc20:	fb01 f202 	mul.w	r2, r1, r2
 800cc24:	1a9b      	subs	r3, r3, r2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f040 8169 	bne.w	800cefe <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cc3a:	6812      	ldr	r2, [r2, #0]
 800cc3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cc40:	8952      	ldrh	r2, [r2, #10]
 800cc42:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc54:	789b      	ldrb	r3, [r3, #2]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800cc5e:	7dbb      	ldrb	r3, [r7, #22]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d15f      	bne.n	800cd24 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d111      	bne.n	800cc94 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d126      	bne.n	800ccce <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2100      	movs	r1, #0
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fd fcc4 	bl	800a618 <create_chain>
 800cc90:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc92:	e01c      	b.n	800ccce <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d009      	beq.n	800ccb4 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f7fd fd5c 	bl	800a768 <clmt_clust>
 800ccb0:	6278      	str	r0, [r7, #36]	@ 0x24
 800ccb2:	e00c      	b.n	800ccce <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	4610      	mov	r0, r2
 800ccc8:	f7fd fca6 	bl	800a618 <create_chain>
 800cccc:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ccce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 8173 	beq.w	800cfbc <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d106      	bne.n	800ccea <f_write+0x15a>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cce2:	2202      	movs	r2, #2
 800cce4:	71da      	strb	r2, [r3, #7]
 800cce6:	2302      	movs	r3, #2
 800cce8:	e187      	b.n	800cffa <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ccea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf0:	d106      	bne.n	800cd00 <f_write+0x170>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	71da      	strb	r2, [r3, #7]
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e17c      	b.n	800cffa <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd06:	461a      	mov	r2, r3
 800cd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0a:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd12:	691b      	ldr	r3, [r3, #16]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d105      	bne.n	800cd24 <f_write+0x194>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd1e:	461a      	mov	r2, r3
 800cd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd22:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd2a:	799b      	ldrb	r3, [r3, #6]
 800cd2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d023      	beq.n	800cd7c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd40:	7858      	ldrb	r0, [r3, #1]
 800cd42:	68f9      	ldr	r1, [r7, #12]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd4a:	699a      	ldr	r2, [r3, #24]
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	f7fc fdd9 	bl	8009904 <disk_write>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d006      	beq.n	800cd66 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd5e:	2201      	movs	r2, #1
 800cd60:	71da      	strb	r2, [r3, #7]
 800cd62:	2301      	movs	r3, #1
 800cd64:	e149      	b.n	800cffa <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd6c:	799b      	ldrb	r3, [r3, #6]
 800cd6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd7a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	4610      	mov	r0, r2
 800cd90:	f7fd f96f 	bl	800a072 <clust2sect>
 800cd94:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d106      	bne.n	800cdaa <f_write+0x21a>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cda2:	2202      	movs	r2, #2
 800cda4:	71da      	strb	r2, [r3, #7]
 800cda6:	2302      	movs	r3, #2
 800cda8:	e127      	b.n	800cffa <f_write+0x46a>
			sect += csect;
 800cdaa:	7dbb      	ldrb	r3, [r7, #22]
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	4413      	add	r3, r2
 800cdb0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cdbe:	895b      	ldrh	r3, [r3, #10]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdc8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d069      	beq.n	800cea4 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800cdd0:	7dba      	ldrb	r2, [r7, #22]
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cddc:	6812      	ldr	r2, [r2, #0]
 800cdde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cde2:	7892      	ldrb	r2, [r2, #2]
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d90a      	bls.n	800cdfe <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cdf4:	789b      	ldrb	r3, [r3, #2]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	7dbb      	ldrb	r3, [r7, #22]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce0a:	7858      	ldrb	r0, [r3, #1]
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	69b9      	ldr	r1, [r7, #24]
 800ce12:	f7fc fd77 	bl	8009904 <disk_write>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d006      	beq.n	800ce2a <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce22:	2201      	movs	r2, #1
 800ce24:	71da      	strb	r2, [r3, #7]
 800ce26:	2301      	movs	r3, #1
 800ce28:	e0e7      	b.n	800cffa <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce30:	699a      	ldr	r2, [r3, #24]
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	69fa      	ldr	r2, [r7, #28]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d926      	bls.n	800ce8a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce44:	699a      	ldr	r2, [r3, #24]
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ce50:	6812      	ldr	r2, [r2, #0]
 800ce52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ce56:	8952      	ldrh	r2, [r2, #10]
 800ce58:	fb02 f303 	mul.w	r3, r2, r3
 800ce5c:	69ba      	ldr	r2, [r7, #24]
 800ce5e:	18d1      	adds	r1, r2, r3
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce6c:	895b      	ldrh	r3, [r3, #10]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f7fc fd86 	bl	8009980 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce7a:	799b      	ldrb	r3, [r3, #6]
 800ce7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce88:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce96:	895b      	ldrh	r3, [r3, #10]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	fb02 f303 	mul.w	r3, r2, r3
 800cea0:	623b      	str	r3, [r7, #32]
				continue;
 800cea2:	e06e      	b.n	800cf82 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ceaa:	699b      	ldr	r3, [r3, #24]
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d01f      	beq.n	800cef2 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ceb8:	689a      	ldr	r2, [r3, #8]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d215      	bcs.n	800cef2 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ced2:	7858      	ldrb	r0, [r3, #1]
 800ced4:	68f9      	ldr	r1, [r7, #12]
 800ced6:	2301      	movs	r3, #1
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	f7fc fcf3 	bl	80098c4 <disk_read>
 800cede:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d006      	beq.n	800cef2 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ceea:	2201      	movs	r2, #1
 800ceec:	71da      	strb	r2, [r3, #7]
 800ceee:	2301      	movs	r3, #1
 800cef0:	e083      	b.n	800cffa <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cef8:	461a      	mov	r2, r3
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf0a:	895b      	ldrh	r3, [r3, #10]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cf1c:	6812      	ldr	r2, [r2, #0]
 800cf1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cf22:	8952      	ldrh	r2, [r2, #10]
 800cf24:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf28:	fb01 f202 	mul.w	r2, r1, r2
 800cf2c:	1a9b      	subs	r3, r3, r2
 800cf2e:	1ac3      	subs	r3, r0, r3
 800cf30:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800cf32:	6a3a      	ldr	r2, [r7, #32]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d901      	bls.n	800cf3e <f_write+0x3ae>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cf4c:	6812      	ldr	r2, [r2, #0]
 800cf4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cf52:	8952      	ldrh	r2, [r2, #10]
 800cf54:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf58:	fb01 f202 	mul.w	r2, r1, r2
 800cf5c:	1a9b      	subs	r3, r3, r2
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	4413      	add	r3, r2
 800cf62:	6a3a      	ldr	r2, [r7, #32]
 800cf64:	69b9      	ldr	r1, [r7, #24]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fc fd0a 	bl	8009980 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf72:	799b      	ldrb	r3, [r3, #6]
 800cf74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf80:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800cf82:	69ba      	ldr	r2, [r7, #24]
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	4413      	add	r3, r2
 800cf88:	61bb      	str	r3, [r7, #24]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf90:	689a      	ldr	r2, [r3, #8]
 800cf92:	6a3b      	ldr	r3, [r7, #32]
 800cf94:	4413      	add	r3, r2
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cf9c:	6093      	str	r3, [r2, #8]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	441a      	add	r2, r3
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	6a3b      	ldr	r3, [r7, #32]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f47f ae26 	bne.w	800cc06 <f_write+0x76>
 800cfba:	e000      	b.n	800cfbe <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cfbc:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfc4:	689a      	ldr	r2, [r3, #8]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d907      	bls.n	800cfe2 <f_write+0x452>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cfe0:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfe8:	799b      	ldrb	r3, [r3, #6]
 800cfea:	f043 0320 	orr.w	r3, r3, #32
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cff6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3728      	adds	r7, #40	@ 0x28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b086      	sub	sp, #24
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7ff f83e 	bl	800c08c <validate>
 800d010:	4603      	mov	r3, r0
 800d012:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	2b00      	cmp	r3, #0
 800d018:	f040 80bc 	bne.w	800d194 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d022:	799b      	ldrb	r3, [r3, #6]
 800d024:	f003 0320 	and.w	r3, r3, #32
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 80b3 	beq.w	800d194 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d034:	799b      	ldrb	r3, [r3, #6]
 800d036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d01e      	beq.n	800d07c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d04a:	7858      	ldrb	r0, [r3, #1]
 800d04c:	6879      	ldr	r1, [r7, #4]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d054:	699a      	ldr	r2, [r3, #24]
 800d056:	2301      	movs	r3, #1
 800d058:	f7fc fc54 	bl	8009904 <disk_write>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800d062:	2301      	movs	r3, #1
 800d064:	e097      	b.n	800d196 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d06c:	799b      	ldrb	r3, [r3, #6]
 800d06e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d072:	b2da      	uxtb	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d07a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d08a:	69db      	ldr	r3, [r3, #28]
 800d08c:	4619      	mov	r1, r3
 800d08e:	4610      	mov	r0, r2
 800d090:	f7fc fefe 	bl	8009e90 <move_window>
 800d094:	4603      	mov	r3, r0
 800d096:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d17a      	bne.n	800d194 <f_sync+0x192>
				dir = fp->dir_ptr;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	330b      	adds	r3, #11
 800d0ac:	781a      	ldrb	r2, [r3, #0]
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	330b      	adds	r3, #11
 800d0b2:	f042 0220 	orr.w	r2, r2, #32
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0c0:	68da      	ldr	r2, [r3, #12]
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	331c      	adds	r3, #28
 800d0c6:	b2d2      	uxtb	r2, r2
 800d0c8:	701a      	strb	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	0a1b      	lsrs	r3, r3, #8
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	331d      	adds	r3, #29
 800d0dc:	b2d2      	uxtb	r2, r2
 800d0de:	701a      	strb	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	0c1a      	lsrs	r2, r3, #16
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	331e      	adds	r3, #30
 800d0ee:	b2d2      	uxtb	r2, r2
 800d0f0:	701a      	strb	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	0e1a      	lsrs	r2, r3, #24
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	331f      	adds	r3, #31
 800d100:	b2d2      	uxtb	r2, r2
 800d102:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	4619      	mov	r1, r3
 800d10e:	6938      	ldr	r0, [r7, #16]
 800d110:	f7fd fdfe 	bl	800ad10 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800d114:	f7fa ffa4 	bl	8008060 <get_fattime>
 800d118:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	3316      	adds	r3, #22
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	b2d2      	uxtb	r2, r2
 800d122:	701a      	strb	r2, [r3, #0]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	b29b      	uxth	r3, r3
 800d128:	0a1b      	lsrs	r3, r3, #8
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	3317      	adds	r3, #23
 800d130:	b2d2      	uxtb	r2, r2
 800d132:	701a      	strb	r2, [r3, #0]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	0c1a      	lsrs	r2, r3, #16
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	3318      	adds	r3, #24
 800d13c:	b2d2      	uxtb	r2, r2
 800d13e:	701a      	strb	r2, [r3, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	0e1a      	lsrs	r2, r3, #24
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	3319      	adds	r3, #25
 800d148:	b2d2      	uxtb	r2, r2
 800d14a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	3312      	adds	r3, #18
 800d150:	2200      	movs	r2, #0
 800d152:	701a      	strb	r2, [r3, #0]
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	3313      	adds	r3, #19
 800d158:	2200      	movs	r2, #0
 800d15a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d162:	799b      	ldrb	r3, [r3, #6]
 800d164:	f023 0320 	bic.w	r3, r3, #32
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d170:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d17e:	2201      	movs	r2, #1
 800d180:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fc feb2 	bl	8009ef4 <sync_fs>
 800d190:	4603      	mov	r3, r0
 800d192:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800d194:	7dfb      	ldrb	r3, [r7, #23]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3718      	adds	r7, #24
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b084      	sub	sp, #16
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff ff2b 	bl	800d002 <f_sync>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d1b0:	7bfb      	ldrb	r3, [r7, #15]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d119      	bne.n	800d1ea <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7fe ff68 	bl	800c08c <validate>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d111      	bne.n	800d1ea <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fc fd9e 	bl	8009d10 <dec_lock>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d105      	bne.n	800d1ea <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b090      	sub	sp, #64	@ 0x40
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7fe ff44 	bl	800c08c <validate>
 800d204:	4603      	mov	r3, r0
 800d206:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800d20a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d002      	beq.n	800d218 <f_lseek+0x24>
 800d212:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d216:	e2da      	b.n	800d7ce <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d21e:	79db      	ldrb	r3, [r3, #7]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d004      	beq.n	800d22e <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d22a:	79db      	ldrb	r3, [r3, #7]
 800d22c:	e2cf      	b.n	800d7ce <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d236:	2b00      	cmp	r3, #0
 800d238:	f000 8124 	beq.w	800d484 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d242:	d16c      	bne.n	800d31e <f_lseek+0x12a>
			tbl = fp->cltbl;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d24c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d250:	1d1a      	adds	r2, r3, #4
 800d252:	627a      	str	r2, [r7, #36]	@ 0x24
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	617b      	str	r3, [r7, #20]
 800d258:	2302      	movs	r3, #2
 800d25a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d046      	beq.n	800d2fa <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26e:	613b      	str	r3, [r7, #16]
 800d270:	2300      	movs	r3, #0
 800d272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d276:	3302      	adds	r3, #2
 800d278:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d280:	3301      	adds	r3, #1
 800d282:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fc ff13 	bl	800a0ba <get_fat>
 800d294:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d806      	bhi.n	800d2aa <f_lseek+0xb6>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	71da      	strb	r2, [r3, #7]
 800d2a6:	2302      	movs	r3, #2
 800d2a8:	e291      	b.n	800d7ce <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b0:	d106      	bne.n	800d2c0 <f_lseek+0xcc>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	71da      	strb	r2, [r3, #7]
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e286      	b.n	800d7ce <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d0d7      	beq.n	800d27a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d2ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d809      	bhi.n	800d2e6 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d4:	1d1a      	adds	r2, r3, #4
 800d2d6:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	1d1a      	adds	r2, r3, #4
 800d2e0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d2f2:	695b      	ldr	r3, [r3, #20]
 800d2f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d3b8      	bcc.n	800d26c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d304:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800d306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d803      	bhi.n	800d316 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d310:	2200      	movs	r2, #0
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	e259      	b.n	800d7ca <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d316:	2311      	movs	r3, #17
 800d318:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d31c:	e255      	b.n	800d7ca <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d904      	bls.n	800d336 <f_lseek+0x142>
				ofs = fp->fsize;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d33c:	461a      	mov	r2, r3
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 8240 	beq.w	800d7ca <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	3b01      	subs	r3, #1
 800d34e:	4619      	mov	r1, r3
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f7fd fa09 	bl	800a768 <clmt_clust>
 800d356:	4602      	mov	r2, r0
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d35e:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	4619      	mov	r1, r3
 800d372:	4610      	mov	r0, r2
 800d374:	f7fc fe7d 	bl	800a072 <clust2sect>
 800d378:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d106      	bne.n	800d38e <f_lseek+0x19a>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d386:	2202      	movs	r2, #2
 800d388:	71da      	strb	r2, [r3, #7]
 800d38a:	2302      	movs	r3, #2
 800d38c:	e21f      	b.n	800d7ce <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	3b01      	subs	r3, #1
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d398:	6812      	ldr	r2, [r2, #0]
 800d39a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d39e:	8952      	ldrh	r2, [r2, #10]
 800d3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d3aa:	6812      	ldr	r2, [r2, #0]
 800d3ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d3b0:	7892      	ldrb	r2, [r2, #2]
 800d3b2:	3a01      	subs	r2, #1
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	69ba      	ldr	r2, [r7, #24]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d3ca:	6812      	ldr	r2, [r2, #0]
 800d3cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d3d0:	8952      	ldrh	r2, [r2, #10]
 800d3d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3d6:	fb01 f202 	mul.w	r2, r1, r2
 800d3da:	1a9b      	subs	r3, r3, r2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 81f4 	beq.w	800d7ca <f_lseek+0x5d6>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	f000 81ec 	beq.w	800d7ca <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d3f8:	799b      	ldrb	r3, [r3, #6]
 800d3fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d023      	beq.n	800d44a <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d40e:	7858      	ldrb	r0, [r3, #1]
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d418:	699a      	ldr	r2, [r3, #24]
 800d41a:	2301      	movs	r3, #1
 800d41c:	f7fc fa72 	bl	8009904 <disk_write>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d006      	beq.n	800d434 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d42c:	2201      	movs	r2, #1
 800d42e:	71da      	strb	r2, [r3, #7]
 800d430:	2301      	movs	r3, #1
 800d432:	e1cc      	b.n	800d7ce <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d43a:	799b      	ldrb	r3, [r3, #6]
 800d43c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d440:	b2da      	uxtb	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d448:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d456:	7858      	ldrb	r0, [r3, #1]
 800d458:	6879      	ldr	r1, [r7, #4]
 800d45a:	2301      	movs	r3, #1
 800d45c:	69ba      	ldr	r2, [r7, #24]
 800d45e:	f7fc fa31 	bl	80098c4 <disk_read>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d006      	beq.n	800d476 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d46e:	2201      	movs	r2, #1
 800d470:	71da      	strb	r2, [r3, #7]
 800d472:	2301      	movs	r3, #1
 800d474:	e1ab      	b.n	800d7ce <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d47c:	461a      	mov	r2, r3
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	6193      	str	r3, [r2, #24]
 800d482:	e1a2      	b.n	800d7ca <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d90c      	bls.n	800d4ac <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d498:	799b      	ldrb	r3, [r3, #6]
 800d49a:	f003 0302 	and.w	r3, r3, #2
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d104      	bne.n	800d4ac <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4c4:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 8100 	beq.w	800d6ce <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4da:	789b      	ldrb	r3, [r3, #2]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4ea:	895b      	ldrh	r3, [r3, #10]
 800d4ec:	fb02 f303 	mul.w	r3, r2, r3
 800d4f0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d4f2:	6a3b      	ldr	r3, [r7, #32]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d021      	beq.n	800d53c <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	1e5a      	subs	r2, r3, #1
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	fbb2 f2f3 	udiv	r2, r2, r3
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	1e59      	subs	r1, r3, #1
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d315      	bcc.n	800d53c <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	1e5a      	subs	r2, r3, #1
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	425b      	negs	r3, r3
 800d518:	4013      	ands	r3, r2
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d520:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d53a:	e031      	b.n	800d5a0 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d123      	bne.n	800d594 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2100      	movs	r1, #0
 800d556:	4618      	mov	r0, r3
 800d558:	f7fd f85e 	bl	800a618 <create_chain>
 800d55c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800d55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d560:	2b01      	cmp	r3, #1
 800d562:	d106      	bne.n	800d572 <f_lseek+0x37e>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d56a:	2202      	movs	r2, #2
 800d56c:	71da      	strb	r2, [r3, #7]
 800d56e:	2302      	movs	r3, #2
 800d570:	e12d      	b.n	800d7ce <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d578:	d106      	bne.n	800d588 <f_lseek+0x394>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d580:	2201      	movs	r2, #1
 800d582:	71da      	strb	r2, [r3, #7]
 800d584:	2301      	movs	r3, #1
 800d586:	e122      	b.n	800d7ce <f_lseek+0x5da>
					fp->sclust = clst;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d58e:	461a      	mov	r2, r3
 800d590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d592:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d59a:	461a      	mov	r2, r3
 800d59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f000 8093 	beq.w	800d6ce <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800d5a8:	e052      	b.n	800d650 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5b0:	799b      	ldrb	r3, [r3, #6]
 800d5b2:	f003 0302 	and.w	r3, r3, #2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00e      	beq.n	800d5d8 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fd f827 	bl	800a618 <create_chain>
 800d5ca:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10b      	bne.n	800d5ea <f_lseek+0x3f6>
							ofs = bcs; break;
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	603b      	str	r3, [r7, #0]
 800d5d6:	e03f      	b.n	800d658 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fc fd69 	bl	800a0ba <get_fat>
 800d5e8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f0:	d106      	bne.n	800d600 <f_lseek+0x40c>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	71da      	strb	r2, [r3, #7]
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e0e6      	b.n	800d7ce <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800d600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d602:	2b01      	cmp	r3, #1
 800d604:	d909      	bls.n	800d61a <f_lseek+0x426>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d616:	429a      	cmp	r2, r3
 800d618:	d306      	bcc.n	800d628 <f_lseek+0x434>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d620:	2202      	movs	r2, #2
 800d622:	71da      	strb	r2, [r3, #7]
 800d624:	2302      	movs	r3, #2
 800d626:	e0d2      	b.n	800d7ce <f_lseek+0x5da>
					fp->clust = clst;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d62e:	461a      	mov	r2, r3
 800d630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d632:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d63a:	689a      	ldr	r2, [r3, #8]
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	4413      	add	r3, r2
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d646:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800d648:	683a      	ldr	r2, [r7, #0]
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	429a      	cmp	r2, r3
 800d656:	d8a8      	bhi.n	800d5aa <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d65e:	689a      	ldr	r2, [r3, #8]
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	4413      	add	r3, r2
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d66a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d678:	895b      	ldrh	r3, [r3, #10]
 800d67a:	461a      	mov	r2, r3
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d682:	fb01 f202 	mul.w	r2, r1, r2
 800d686:	1a9b      	subs	r3, r3, r2
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d020      	beq.n	800d6ce <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d696:	4618      	mov	r0, r3
 800d698:	f7fc fceb 	bl	800a072 <clust2sect>
 800d69c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800d69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d106      	bne.n	800d6b2 <f_lseek+0x4be>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	71da      	strb	r2, [r3, #7]
 800d6ae:	2302      	movs	r3, #2
 800d6b0:	e08d      	b.n	800d7ce <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6be:	895b      	ldrh	r3, [r3, #10]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6ca:	4413      	add	r3, r2
 800d6cc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d6dc:	6812      	ldr	r2, [r2, #0]
 800d6de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d6e2:	8952      	ldrh	r2, [r2, #10]
 800d6e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6e8:	fb01 f202 	mul.w	r2, r1, r2
 800d6ec:	1a9b      	subs	r3, r3, r2
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d04e      	beq.n	800d790 <f_lseek+0x59c>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d047      	beq.n	800d790 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d706:	799b      	ldrb	r3, [r3, #6]
 800d708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d023      	beq.n	800d758 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d71c:	7858      	ldrb	r0, [r3, #1]
 800d71e:	6879      	ldr	r1, [r7, #4]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d726:	699a      	ldr	r2, [r3, #24]
 800d728:	2301      	movs	r3, #1
 800d72a:	f7fc f8eb 	bl	8009904 <disk_write>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d006      	beq.n	800d742 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d73a:	2201      	movs	r2, #1
 800d73c:	71da      	strb	r2, [r3, #7]
 800d73e:	2301      	movs	r3, #1
 800d740:	e045      	b.n	800d7ce <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d748:	799b      	ldrb	r3, [r3, #6]
 800d74a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d74e:	b2da      	uxtb	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d756:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d764:	7858      	ldrb	r0, [r3, #1]
 800d766:	6879      	ldr	r1, [r7, #4]
 800d768:	2301      	movs	r3, #1
 800d76a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d76c:	f7fc f8aa 	bl	80098c4 <disk_read>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d006      	beq.n	800d784 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d77c:	2201      	movs	r2, #1
 800d77e:	71da      	strb	r2, [r3, #7]
 800d780:	2301      	movs	r3, #1
 800d782:	e024      	b.n	800d7ce <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d78a:	461a      	mov	r2, r3
 800d78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d78e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d796:	689a      	ldr	r2, [r3, #8]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d912      	bls.n	800d7ca <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d7b2:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7ba:	799b      	ldrb	r3, [r3, #6]
 800d7bc:	f043 0320 	orr.w	r3, r3, #32
 800d7c0:	b2da      	uxtb	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7c8:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800d7ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3740      	adds	r7, #64	@ 0x40
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b08e      	sub	sp, #56	@ 0x38
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800d7e2:	f107 030c 	add.w	r3, r7, #12
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7fe f91c 	bl	800ba28 <find_volume>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800d7fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d800:	2b00      	cmp	r3, #0
 800d802:	f040 80bc 	bne.w	800d97e <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d80c:	691a      	ldr	r2, [r3, #16]
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d814:	695b      	ldr	r3, [r3, #20]
 800d816:	3b02      	subs	r3, #2
 800d818:	429a      	cmp	r2, r3
 800d81a:	d806      	bhi.n	800d82a <f_getfree+0x54>
			*nclst = fs->free_clust;
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d822:	691a      	ldr	r2, [r3, #16]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	601a      	str	r2, [r3, #0]
 800d828:	e0a9      	b.n	800d97e <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800d834:	2300      	movs	r3, #0
 800d836:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 800d838:	7efb      	ldrb	r3, [r7, #27]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d126      	bne.n	800d88c <f_getfree+0xb6>
				clst = 2;
 800d83e:	2302      	movs	r3, #2
 800d840:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 800d842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d844:	69f8      	ldr	r0, [r7, #28]
 800d846:	f7fc fc38 	bl	800a0ba <get_fat>
 800d84a:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d852:	d103      	bne.n	800d85c <f_getfree+0x86>
 800d854:	2301      	movs	r3, #1
 800d856:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d85a:	e07c      	b.n	800d956 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d103      	bne.n	800d86a <f_getfree+0x94>
 800d862:	2302      	movs	r3, #2
 800d864:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d868:	e075      	b.n	800d956 <f_getfree+0x180>
					if (stat == 0) n++;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <f_getfree+0xa0>
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	3301      	adds	r3, #1
 800d874:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 800d876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d878:	3301      	adds	r3, #1
 800d87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d882:	695b      	ldr	r3, [r3, #20]
 800d884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d886:	429a      	cmp	r2, r3
 800d888:	d3db      	bcc.n	800d842 <f_getfree+0x6c>
 800d88a:	e064      	b.n	800d956 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d89c:	6a1b      	ldr	r3, [r3, #32]
 800d89e:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d114      	bne.n	800d8d8 <f_getfree+0x102>
						res = move_window(fs, sect++);
 800d8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b0:	1c5a      	adds	r2, r3, #1
 800d8b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	69f8      	ldr	r0, [r7, #28]
 800d8b8:	f7fc faea 	bl	8009e90 <move_window>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 800d8c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d144      	bne.n	800d954 <f_getfree+0x17e>
						p = fs->win.d8;
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8d4:	895b      	ldrh	r3, [r3, #10]
 800d8d6:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 800d8d8:	7efb      	ldrb	r3, [r7, #27]
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	d115      	bne.n	800d90a <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 800d8de:	6a3b      	ldr	r3, [r7, #32]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	021b      	lsls	r3, r3, #8
 800d8e6:	b21a      	sxth	r2, r3
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	b21b      	sxth	r3, r3
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	b21b      	sxth	r3, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d102      	bne.n	800d8fc <f_getfree+0x126>
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	3302      	adds	r3, #2
 800d900:	623b      	str	r3, [r7, #32]
 800d902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d904:	3b02      	subs	r3, #2
 800d906:	627b      	str	r3, [r7, #36]	@ 0x24
 800d908:	e01d      	b.n	800d946 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	3303      	adds	r3, #3
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	061a      	lsls	r2, r3, #24
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	3302      	adds	r3, #2
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	041b      	lsls	r3, r3, #16
 800d91a:	431a      	orrs	r2, r3
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	3301      	adds	r3, #1
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	021b      	lsls	r3, r3, #8
 800d924:	4313      	orrs	r3, r2
 800d926:	6a3a      	ldr	r2, [r7, #32]
 800d928:	7812      	ldrb	r2, [r2, #0]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d102      	bne.n	800d93a <f_getfree+0x164>
 800d934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d936:	3301      	adds	r3, #1
 800d938:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 800d93a:	6a3b      	ldr	r3, [r7, #32]
 800d93c:	3304      	adds	r3, #4
 800d93e:	623b      	str	r3, [r7, #32]
 800d940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d942:	3b04      	subs	r3, #4
 800d944:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 800d946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d948:	3b01      	subs	r3, #1
 800d94a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1aa      	bne.n	800d8a8 <f_getfree+0xd2>
 800d952:	e000      	b.n	800d956 <f_getfree+0x180>
						if (res != FR_OK) break;
 800d954:	bf00      	nop
			}
			fs->free_clust = n;
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d95c:	461a      	mov	r2, r3
 800d95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d960:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d968:	795b      	ldrb	r3, [r3, #5]
 800d96a:	f043 0301 	orr.w	r3, r3, #1
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d976:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d97c:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800d97e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800d982:	4618      	mov	r0, r3
 800d984:	3738      	adds	r7, #56	@ 0x38
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b088      	sub	sp, #32
 800d98e:	af00      	add	r7, sp, #0
 800d990:	60f8      	str	r0, [r7, #12]
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d99e:	e01c      	b.n	800d9da <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d9a0:	f107 0310 	add.w	r3, r7, #16
 800d9a4:	f107 0114 	add.w	r1, r7, #20
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7fe ff08 	bl	800c7c0 <f_read>
		if (rc != 1) break;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d117      	bne.n	800d9e6 <f_gets+0x5c>
		c = s[0];
 800d9b6:	7d3b      	ldrb	r3, [r7, #20]
 800d9b8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	2b0d      	cmp	r3, #13
 800d9be:	d00b      	beq.n	800d9d8 <f_gets+0x4e>
		*p++ = c;
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	1c5a      	adds	r2, r3, #1
 800d9c4:	61ba      	str	r2, [r7, #24]
 800d9c6:	7dfa      	ldrb	r2, [r7, #23]
 800d9c8:	701a      	strb	r2, [r3, #0]
		n++;
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d9d0:	7dfb      	ldrb	r3, [r7, #23]
 800d9d2:	2b0a      	cmp	r3, #10
 800d9d4:	d009      	beq.n	800d9ea <f_gets+0x60>
 800d9d6:	e000      	b.n	800d9da <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d9d8:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	69fa      	ldr	r2, [r7, #28]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	dbdd      	blt.n	800d9a0 <f_gets+0x16>
 800d9e4:	e002      	b.n	800d9ec <f_gets+0x62>
		if (rc != 1) break;
 800d9e6:	bf00      	nop
 800d9e8:	e000      	b.n	800d9ec <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800d9ea:	bf00      	nop
	}
	*p = 0;
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d001      	beq.n	800d9fc <f_gets+0x72>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	e000      	b.n	800d9fe <f_gets+0x74>
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3720      	adds	r7, #32
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b084      	sub	sp, #16
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	460b      	mov	r3, r1
 800da10:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800da12:	78fb      	ldrb	r3, [r7, #3]
 800da14:	2b0a      	cmp	r3, #10
 800da16:	d103      	bne.n	800da20 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800da18:	210d      	movs	r1, #13
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff fff3 	bl	800da06 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	db25      	blt.n	800da78 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	60fa      	str	r2, [r7, #12]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	4413      	add	r3, r2
 800da36:	78fa      	ldrb	r2, [r7, #3]
 800da38:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b3c      	cmp	r3, #60	@ 0x3c
 800da3e:	dd12      	ble.n	800da66 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6818      	ldr	r0, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f103 010c 	add.w	r1, r3, #12
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	f107 0308 	add.w	r3, r7, #8
 800da50:	f7ff f89e 	bl	800cb90 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d101      	bne.n	800da60 <putc_bfd+0x5a>
 800da5c:	2300      	movs	r3, #0
 800da5e:	e001      	b.n	800da64 <putc_bfd+0x5e>
 800da60:	f04f 33ff 	mov.w	r3, #4294967295
 800da64:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	1c5a      	adds	r2, r3, #1
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	609a      	str	r2, [r3, #8]
 800da76:	e000      	b.n	800da7a <putc_bfd+0x74>
	if (i < 0) return;
 800da78:	bf00      	nop
}
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800da80:	b590      	push	{r4, r7, lr}
 800da82:	b097      	sub	sp, #92	@ 0x5c
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800da96:	e009      	b.n	800daac <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	607a      	str	r2, [r7, #4]
 800da9e:	781a      	ldrb	r2, [r3, #0]
 800daa0:	f107 030c 	add.w	r3, r7, #12
 800daa4:	4611      	mov	r1, r2
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff ffad 	bl	800da06 <putc_bfd>
	while (*str)			/* Put the string */
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1f1      	bne.n	800da98 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	db15      	blt.n	800dae6 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	461c      	mov	r4, r3
 800dac0:	f107 0208 	add.w	r2, r7, #8
 800dac4:	f107 030c 	add.w	r3, r7, #12
 800dac8:	f103 010c 	add.w	r1, r3, #12
 800dacc:	4613      	mov	r3, r2
 800dace:	4622      	mov	r2, r4
 800dad0:	f7ff f85e 	bl	800cb90 <f_write>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d105      	bne.n	800dae6 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	4293      	cmp	r3, r2
 800dae0:	d101      	bne.n	800dae6 <f_puts+0x66>
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	e001      	b.n	800daea <f_puts+0x6a>
	return EOF;
 800dae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800daea:	4618      	mov	r0, r3
 800daec:	375c      	adds	r7, #92	@ 0x5c
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd90      	pop	{r4, r7, pc}
	...

0800daf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b087      	sub	sp, #28
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	4613      	mov	r3, r2
 800db00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800db02:	2301      	movs	r3, #1
 800db04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800db0a:	4b1e      	ldr	r3, [pc, #120]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db0c:	7a5b      	ldrb	r3, [r3, #9]
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	2b01      	cmp	r3, #1
 800db12:	d831      	bhi.n	800db78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800db14:	4b1b      	ldr	r3, [pc, #108]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db16:	7a5b      	ldrb	r3, [r3, #9]
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	461a      	mov	r2, r3
 800db1c:	4b19      	ldr	r3, [pc, #100]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db1e:	2100      	movs	r1, #0
 800db20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800db22:	4b18      	ldr	r3, [pc, #96]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db24:	7a5b      	ldrb	r3, [r3, #9]
 800db26:	b2db      	uxtb	r3, r3
 800db28:	4a16      	ldr	r2, [pc, #88]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800db32:	4b14      	ldr	r3, [pc, #80]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db34:	7a5b      	ldrb	r3, [r3, #9]
 800db36:	b2db      	uxtb	r3, r3
 800db38:	461a      	mov	r2, r3
 800db3a:	4b12      	ldr	r3, [pc, #72]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db3c:	4413      	add	r3, r2
 800db3e:	79fa      	ldrb	r2, [r7, #7]
 800db40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db42:	4b10      	ldr	r3, [pc, #64]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db44:	7a5b      	ldrb	r3, [r3, #9]
 800db46:	b2db      	uxtb	r3, r3
 800db48:	1c5a      	adds	r2, r3, #1
 800db4a:	b2d1      	uxtb	r1, r2
 800db4c:	4a0d      	ldr	r2, [pc, #52]	@ (800db84 <FATFS_LinkDriverEx+0x90>)
 800db4e:	7251      	strb	r1, [r2, #9]
 800db50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db52:	7dbb      	ldrb	r3, [r7, #22]
 800db54:	3330      	adds	r3, #48	@ 0x30
 800db56:	b2da      	uxtb	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	3301      	adds	r3, #1
 800db60:	223a      	movs	r2, #58	@ 0x3a
 800db62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	3302      	adds	r3, #2
 800db68:	222f      	movs	r2, #47	@ 0x2f
 800db6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	3303      	adds	r3, #3
 800db70:	2200      	movs	r2, #0
 800db72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800db74:	2300      	movs	r3, #0
 800db76:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800db78:	7dfb      	ldrb	r3, [r7, #23]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	371c      	adds	r7, #28
 800db7e:	46bd      	mov	sp, r7
 800db80:	bc80      	pop	{r7}
 800db82:	4770      	bx	lr
 800db84:	2000059c 	.word	0x2000059c

0800db88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800db92:	2200      	movs	r2, #0
 800db94:	6839      	ldr	r1, [r7, #0]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7ff ffac 	bl	800daf4 <FATFS_LinkDriverEx>
 800db9c:	4603      	mov	r3, r0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
	...

0800dba8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dbb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dbe0 <SD_initialize+0x38>)
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800dbb8:	f7fa fa5a 	bl	8008070 <BSP_SD_Init>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d107      	bne.n	800dbd2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dbc2:	4b07      	ldr	r3, [pc, #28]	@ (800dbe0 <SD_initialize+0x38>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	f023 0301 	bic.w	r3, r3, #1
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	4b04      	ldr	r3, [pc, #16]	@ (800dbe0 <SD_initialize+0x38>)
 800dbd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dbd2:	4b03      	ldr	r3, [pc, #12]	@ (800dbe0 <SD_initialize+0x38>)
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	b2db      	uxtb	r3, r3
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	2000011b 	.word	0x2000011b

0800dbe4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	4603      	mov	r3, r0
 800dbec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dbee:	4b0b      	ldr	r3, [pc, #44]	@ (800dc1c <SD_status+0x38>)
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dbf4:	f7fa fa90 	bl	8008118 <BSP_SD_GetCardState>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d107      	bne.n	800dc0e <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dbfe:	4b07      	ldr	r3, [pc, #28]	@ (800dc1c <SD_status+0x38>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	f023 0301 	bic.w	r3, r3, #1
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	4b04      	ldr	r3, [pc, #16]	@ (800dc1c <SD_status+0x38>)
 800dc0c:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800dc0e:	4b03      	ldr	r3, [pc, #12]	@ (800dc1c <SD_status+0x38>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	b2db      	uxtb	r3, r3
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	2000011b 	.word	0x2000011b

0800dc20 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60b9      	str	r1, [r7, #8]
 800dc28:	607a      	str	r2, [r7, #4]
 800dc2a:	603b      	str	r3, [r7, #0]
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800dc34:	4b0f      	ldr	r3, [pc, #60]	@ (800dc74 <SD_read+0x54>)
 800dc36:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800dc38:	4b0f      	ldr	r3, [pc, #60]	@ (800dc78 <SD_read+0x58>)
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	6879      	ldr	r1, [r7, #4]
 800dc3e:	68b8      	ldr	r0, [r7, #8]
 800dc40:	f7fa fa2e 	bl	80080a0 <BSP_SD_ReadBlocks>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10e      	bne.n	800dc68 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dc4a:	e006      	b.n	800dc5a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	1e5a      	subs	r2, r3, #1
 800dc50:	613a      	str	r2, [r7, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <SD_read+0x3a>
      {
        return RES_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e007      	b.n	800dc6a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dc5a:	f7fa fa5d 	bl	8008118 <BSP_SD_GetCardState>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d1f3      	bne.n	800dc4c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800dc64:	2300      	movs	r3, #0
 800dc66:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800dc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	000186a0 	.word	0x000186a0
 800dc78:	05f5e100 	.word	0x05f5e100

0800dc7c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60b9      	str	r1, [r7, #8]
 800dc84:	607a      	str	r2, [r7, #4]
 800dc86:	603b      	str	r3, [r7, #0]
 800dc88:	4603      	mov	r3, r0
 800dc8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800dc90:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd0 <SD_write+0x54>)
 800dc92:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800dc94:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd4 <SD_write+0x58>)
 800dc96:	683a      	ldr	r2, [r7, #0]
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	68b8      	ldr	r0, [r7, #8]
 800dc9c:	f7fa fa1e 	bl	80080dc <BSP_SD_WriteBlocks>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10e      	bne.n	800dcc4 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dca6:	e006      	b.n	800dcb6 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	1e5a      	subs	r2, r3, #1
 800dcac:	613a      	str	r2, [r7, #16]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d101      	bne.n	800dcb6 <SD_write+0x3a>
      {
        return RES_ERROR;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e007      	b.n	800dcc6 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dcb6:	f7fa fa2f 	bl	8008118 <BSP_SD_GetCardState>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1f3      	bne.n	800dca8 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800dcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	000186a0 	.word	0x000186a0
 800dcd4:	05f5e100 	.word	0x05f5e100

0800dcd8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b08c      	sub	sp, #48	@ 0x30
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	4603      	mov	r3, r0
 800dce0:	603a      	str	r2, [r7, #0]
 800dce2:	71fb      	strb	r3, [r7, #7]
 800dce4:	460b      	mov	r3, r1
 800dce6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dcee:	4b24      	ldr	r3, [pc, #144]	@ (800dd80 <SD_ioctl+0xa8>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	f003 0301 	and.w	r3, r3, #1
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d001      	beq.n	800dd00 <SD_ioctl+0x28>
 800dcfc:	2303      	movs	r3, #3
 800dcfe:	e03b      	b.n	800dd78 <SD_ioctl+0xa0>
  
  switch (cmd)
 800dd00:	79bb      	ldrb	r3, [r7, #6]
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d833      	bhi.n	800dd6e <SD_ioctl+0x96>
 800dd06:	a201      	add	r2, pc, #4	@ (adr r2, 800dd0c <SD_ioctl+0x34>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd1d 	.word	0x0800dd1d
 800dd10:	0800dd25 	.word	0x0800dd25
 800dd14:	0800dd3d 	.word	0x0800dd3d
 800dd18:	0800dd57 	.word	0x0800dd57
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dd22:	e027      	b.n	800dd74 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd24:	f107 030c 	add.w	r3, r7, #12
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fa fa05 	bl	8008138 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dd2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd34:	2300      	movs	r3, #0
 800dd36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dd3a:	e01b      	b.n	800dd74 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd3c:	f107 030c 	add.w	r3, r7, #12
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fa f9f9 	bl	8008138 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dd54:	e00e      	b.n	800dd74 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd56:	f107 030c 	add.w	r3, r7, #12
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fa f9ec 	bl	8008138 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800dd60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd66:	2300      	movs	r3, #0
 800dd68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dd6c:	e002      	b.n	800dd74 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800dd6e:	2304      	movs	r3, #4
 800dd70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800dd74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3730      	adds	r7, #48	@ 0x30
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	2000011b 	.word	0x2000011b

0800dd84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	6039      	str	r1, [r7, #0]
 800dd8e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dd90:	88fb      	ldrh	r3, [r7, #6]
 800dd92:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd94:	d802      	bhi.n	800dd9c <ff_convert+0x18>
		c = chr;
 800dd96:	88fb      	ldrh	r3, [r7, #6]
 800dd98:	81fb      	strh	r3, [r7, #14]
 800dd9a:	e025      	b.n	800dde8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00b      	beq.n	800ddba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dda2:	88fb      	ldrh	r3, [r7, #6]
 800dda4:	2bff      	cmp	r3, #255	@ 0xff
 800dda6:	d805      	bhi.n	800ddb4 <ff_convert+0x30>
 800dda8:	88fb      	ldrh	r3, [r7, #6]
 800ddaa:	3b80      	subs	r3, #128	@ 0x80
 800ddac:	4a11      	ldr	r2, [pc, #68]	@ (800ddf4 <ff_convert+0x70>)
 800ddae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddb2:	e000      	b.n	800ddb6 <ff_convert+0x32>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	81fb      	strh	r3, [r7, #14]
 800ddb8:	e016      	b.n	800dde8 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800ddba:	2300      	movs	r3, #0
 800ddbc:	81fb      	strh	r3, [r7, #14]
 800ddbe:	e009      	b.n	800ddd4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ddc0:	89fb      	ldrh	r3, [r7, #14]
 800ddc2:	4a0c      	ldr	r2, [pc, #48]	@ (800ddf4 <ff_convert+0x70>)
 800ddc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddc8:	88fa      	ldrh	r2, [r7, #6]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d006      	beq.n	800dddc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ddce:	89fb      	ldrh	r3, [r7, #14]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	81fb      	strh	r3, [r7, #14]
 800ddd4:	89fb      	ldrh	r3, [r7, #14]
 800ddd6:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddd8:	d9f2      	bls.n	800ddc0 <ff_convert+0x3c>
 800ddda:	e000      	b.n	800ddde <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dddc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ddde:	89fb      	ldrh	r3, [r7, #14]
 800dde0:	3380      	adds	r3, #128	@ 0x80
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dde8:	89fb      	ldrh	r3, [r7, #14]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bc80      	pop	{r7}
 800ddf2:	4770      	bx	lr
 800ddf4:	0800f5bc 	.word	0x0800f5bc

0800ddf8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	4603      	mov	r3, r0
 800de00:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800de02:	2300      	movs	r3, #0
 800de04:	60fb      	str	r3, [r7, #12]
 800de06:	e002      	b.n	800de0e <ff_wtoupper+0x16>
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	3301      	adds	r3, #1
 800de0c:	60fb      	str	r3, [r7, #12]
 800de0e:	4a0f      	ldr	r2, [pc, #60]	@ (800de4c <ff_wtoupper+0x54>)
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d006      	beq.n	800de28 <ff_wtoupper+0x30>
 800de1a:	4a0c      	ldr	r2, [pc, #48]	@ (800de4c <ff_wtoupper+0x54>)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de22:	88fa      	ldrh	r2, [r7, #6]
 800de24:	429a      	cmp	r2, r3
 800de26:	d1ef      	bne.n	800de08 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800de28:	4a08      	ldr	r2, [pc, #32]	@ (800de4c <ff_wtoupper+0x54>)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d004      	beq.n	800de3e <ff_wtoupper+0x46>
 800de34:	4a06      	ldr	r2, [pc, #24]	@ (800de50 <ff_wtoupper+0x58>)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de3c:	e000      	b.n	800de40 <ff_wtoupper+0x48>
 800de3e:	88fb      	ldrh	r3, [r7, #6]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	bc80      	pop	{r7}
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	0800f6bc 	.word	0x0800f6bc
 800de50:	0800f89c 	.word	0x0800f89c

0800de54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800de58:	2200      	movs	r2, #0
 800de5a:	4912      	ldr	r1, [pc, #72]	@ (800dea4 <MX_USB_DEVICE_Init+0x50>)
 800de5c:	4812      	ldr	r0, [pc, #72]	@ (800dea8 <MX_USB_DEVICE_Init+0x54>)
 800de5e:	f7fa fc5a 	bl	8008716 <USBD_Init>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800de68:	f7f2 ffad 	bl	8000dc6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800de6c:	490f      	ldr	r1, [pc, #60]	@ (800deac <MX_USB_DEVICE_Init+0x58>)
 800de6e:	480e      	ldr	r0, [pc, #56]	@ (800dea8 <MX_USB_DEVICE_Init+0x54>)
 800de70:	f7fa fc7c 	bl	800876c <USBD_RegisterClass>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800de7a:	f7f2 ffa4 	bl	8000dc6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800de7e:	490c      	ldr	r1, [pc, #48]	@ (800deb0 <MX_USB_DEVICE_Init+0x5c>)
 800de80:	4809      	ldr	r0, [pc, #36]	@ (800dea8 <MX_USB_DEVICE_Init+0x54>)
 800de82:	f7fa fbad 	bl	80085e0 <USBD_CDC_RegisterInterface>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800de8c:	f7f2 ff9b 	bl	8000dc6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de90:	4805      	ldr	r0, [pc, #20]	@ (800dea8 <MX_USB_DEVICE_Init+0x54>)
 800de92:	f7fa fc84 	bl	800879e <USBD_Start>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d001      	beq.n	800dea0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de9c:	f7f2 ff93 	bl	8000dc6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dea0:	bf00      	nop
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	2000012c 	.word	0x2000012c
 800dea8:	200005a8 	.word	0x200005a8
 800deac:	20000018 	.word	0x20000018
 800deb0:	2000011c 	.word	0x2000011c

0800deb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800deb8:	2200      	movs	r2, #0
 800deba:	4905      	ldr	r1, [pc, #20]	@ (800ded0 <CDC_Init_FS+0x1c>)
 800debc:	4805      	ldr	r0, [pc, #20]	@ (800ded4 <CDC_Init_FS+0x20>)
 800debe:	f7fa fba5 	bl	800860c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dec2:	4905      	ldr	r1, [pc, #20]	@ (800ded8 <CDC_Init_FS+0x24>)
 800dec4:	4803      	ldr	r0, [pc, #12]	@ (800ded4 <CDC_Init_FS+0x20>)
 800dec6:	f7fa fbba 	bl	800863e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800deca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800decc:	4618      	mov	r0, r3
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	20000c6c 	.word	0x20000c6c
 800ded4:	200005a8 	.word	0x200005a8
 800ded8:	2000086c 	.word	0x2000086c

0800dedc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dedc:	b480      	push	{r7}
 800dede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bc80      	pop	{r7}
 800dee8:	4770      	bx	lr
	...

0800deec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	4603      	mov	r3, r0
 800def4:	6039      	str	r1, [r7, #0]
 800def6:	71fb      	strb	r3, [r7, #7]
 800def8:	4613      	mov	r3, r2
 800defa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	2b23      	cmp	r3, #35	@ 0x23
 800df00:	d84a      	bhi.n	800df98 <CDC_Control_FS+0xac>
 800df02:	a201      	add	r2, pc, #4	@ (adr r2, 800df08 <CDC_Control_FS+0x1c>)
 800df04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df08:	0800df99 	.word	0x0800df99
 800df0c:	0800df99 	.word	0x0800df99
 800df10:	0800df99 	.word	0x0800df99
 800df14:	0800df99 	.word	0x0800df99
 800df18:	0800df99 	.word	0x0800df99
 800df1c:	0800df99 	.word	0x0800df99
 800df20:	0800df99 	.word	0x0800df99
 800df24:	0800df99 	.word	0x0800df99
 800df28:	0800df99 	.word	0x0800df99
 800df2c:	0800df99 	.word	0x0800df99
 800df30:	0800df99 	.word	0x0800df99
 800df34:	0800df99 	.word	0x0800df99
 800df38:	0800df99 	.word	0x0800df99
 800df3c:	0800df99 	.word	0x0800df99
 800df40:	0800df99 	.word	0x0800df99
 800df44:	0800df99 	.word	0x0800df99
 800df48:	0800df99 	.word	0x0800df99
 800df4c:	0800df99 	.word	0x0800df99
 800df50:	0800df99 	.word	0x0800df99
 800df54:	0800df99 	.word	0x0800df99
 800df58:	0800df99 	.word	0x0800df99
 800df5c:	0800df99 	.word	0x0800df99
 800df60:	0800df99 	.word	0x0800df99
 800df64:	0800df99 	.word	0x0800df99
 800df68:	0800df99 	.word	0x0800df99
 800df6c:	0800df99 	.word	0x0800df99
 800df70:	0800df99 	.word	0x0800df99
 800df74:	0800df99 	.word	0x0800df99
 800df78:	0800df99 	.word	0x0800df99
 800df7c:	0800df99 	.word	0x0800df99
 800df80:	0800df99 	.word	0x0800df99
 800df84:	0800df99 	.word	0x0800df99
 800df88:	0800df99 	.word	0x0800df99
 800df8c:	0800df99 	.word	0x0800df99
 800df90:	0800df99 	.word	0x0800df99
 800df94:	0800df99 	.word	0x0800df99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df98:	bf00      	nop
  }

  return (USBD_OK);
 800df9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bc80      	pop	{r7}
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop

0800dfa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dfb2:	6879      	ldr	r1, [r7, #4]
 800dfb4:	4805      	ldr	r0, [pc, #20]	@ (800dfcc <CDC_Receive_FS+0x24>)
 800dfb6:	f7fa fb42 	bl	800863e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dfba:	4804      	ldr	r0, [pc, #16]	@ (800dfcc <CDC_Receive_FS+0x24>)
 800dfbc:	f7fa fb81 	bl	80086c2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dfc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	200005a8 	.word	0x200005a8

0800dfd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dfe0:	4b0d      	ldr	r3, [pc, #52]	@ (800e018 <CDC_Transmit_FS+0x48>)
 800dfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dfe6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e00b      	b.n	800e00e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dff6:	887b      	ldrh	r3, [r7, #2]
 800dff8:	461a      	mov	r2, r3
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	4806      	ldr	r0, [pc, #24]	@ (800e018 <CDC_Transmit_FS+0x48>)
 800dffe:	f7fa fb05 	bl	800860c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e002:	4805      	ldr	r0, [pc, #20]	@ (800e018 <CDC_Transmit_FS+0x48>)
 800e004:	f7fa fb2e 	bl	8008664 <USBD_CDC_TransmitPacket>
 800e008:	4603      	mov	r3, r0
 800e00a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	200005a8 	.word	0x200005a8

0800e01c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	6039      	str	r1, [r7, #0]
 800e026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	2212      	movs	r2, #18
 800e02c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e02e:	4b03      	ldr	r3, [pc, #12]	@ (800e03c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e030:	4618      	mov	r0, r3
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	bc80      	pop	{r7}
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	20000148 	.word	0x20000148

0800e040 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	4603      	mov	r3, r0
 800e048:	6039      	str	r1, [r7, #0]
 800e04a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	2204      	movs	r2, #4
 800e050:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e052:	4b03      	ldr	r3, [pc, #12]	@ (800e060 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	bc80      	pop	{r7}
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop
 800e060:	2000015c 	.word	0x2000015c

0800e064 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	4603      	mov	r3, r0
 800e06c:	6039      	str	r1, [r7, #0]
 800e06e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e070:	79fb      	ldrb	r3, [r7, #7]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d105      	bne.n	800e082 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	4907      	ldr	r1, [pc, #28]	@ (800e098 <USBD_FS_ProductStrDescriptor+0x34>)
 800e07a:	4808      	ldr	r0, [pc, #32]	@ (800e09c <USBD_FS_ProductStrDescriptor+0x38>)
 800e07c:	f7fb fb05 	bl	800968a <USBD_GetString>
 800e080:	e004      	b.n	800e08c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	4904      	ldr	r1, [pc, #16]	@ (800e098 <USBD_FS_ProductStrDescriptor+0x34>)
 800e086:	4805      	ldr	r0, [pc, #20]	@ (800e09c <USBD_FS_ProductStrDescriptor+0x38>)
 800e088:	f7fb faff 	bl	800968a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e08c:	4b02      	ldr	r3, [pc, #8]	@ (800e098 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	2000106c 	.word	0x2000106c
 800e09c:	0800f4ac 	.word	0x0800f4ac

0800e0a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	6039      	str	r1, [r7, #0]
 800e0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e0ac:	683a      	ldr	r2, [r7, #0]
 800e0ae:	4904      	ldr	r1, [pc, #16]	@ (800e0c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e0b0:	4804      	ldr	r0, [pc, #16]	@ (800e0c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e0b2:	f7fb faea 	bl	800968a <USBD_GetString>
  return USBD_StrDesc;
 800e0b6:	4b02      	ldr	r3, [pc, #8]	@ (800e0c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	2000106c 	.word	0x2000106c
 800e0c4:	0800f4c4 	.word	0x0800f4c4

0800e0c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	6039      	str	r1, [r7, #0]
 800e0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	221a      	movs	r2, #26
 800e0d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e0da:	f000 f843 	bl	800e164 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e0de:	4b02      	ldr	r3, [pc, #8]	@ (800e0e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	20000160 	.word	0x20000160

0800e0ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	6039      	str	r1, [r7, #0]
 800e0f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e0f8:	79fb      	ldrb	r3, [r7, #7]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d105      	bne.n	800e10a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	4907      	ldr	r1, [pc, #28]	@ (800e120 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e102:	4808      	ldr	r0, [pc, #32]	@ (800e124 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e104:	f7fb fac1 	bl	800968a <USBD_GetString>
 800e108:	e004      	b.n	800e114 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e10a:	683a      	ldr	r2, [r7, #0]
 800e10c:	4904      	ldr	r1, [pc, #16]	@ (800e120 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e10e:	4805      	ldr	r0, [pc, #20]	@ (800e124 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e110:	f7fb fabb 	bl	800968a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e114:	4b02      	ldr	r3, [pc, #8]	@ (800e120 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e116:	4618      	mov	r0, r3
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	2000106c 	.word	0x2000106c
 800e124:	0800f4d8 	.word	0x0800f4d8

0800e128 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	4603      	mov	r3, r0
 800e130:	6039      	str	r1, [r7, #0]
 800e132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e134:	79fb      	ldrb	r3, [r7, #7]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d105      	bne.n	800e146 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e13a:	683a      	ldr	r2, [r7, #0]
 800e13c:	4907      	ldr	r1, [pc, #28]	@ (800e15c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e13e:	4808      	ldr	r0, [pc, #32]	@ (800e160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e140:	f7fb faa3 	bl	800968a <USBD_GetString>
 800e144:	e004      	b.n	800e150 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e146:	683a      	ldr	r2, [r7, #0]
 800e148:	4904      	ldr	r1, [pc, #16]	@ (800e15c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e14a:	4805      	ldr	r0, [pc, #20]	@ (800e160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e14c:	f7fb fa9d 	bl	800968a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e150:	4b02      	ldr	r3, [pc, #8]	@ (800e15c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	2000106c 	.word	0x2000106c
 800e160:	0800f4e4 	.word	0x0800f4e4

0800e164 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e16a:	4b0f      	ldr	r3, [pc, #60]	@ (800e1a8 <Get_SerialNum+0x44>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e170:	4b0e      	ldr	r3, [pc, #56]	@ (800e1ac <Get_SerialNum+0x48>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e176:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b0 <Get_SerialNum+0x4c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e17c:	68fa      	ldr	r2, [r7, #12]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4413      	add	r3, r2
 800e182:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d009      	beq.n	800e19e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e18a:	2208      	movs	r2, #8
 800e18c:	4909      	ldr	r1, [pc, #36]	@ (800e1b4 <Get_SerialNum+0x50>)
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f000 f814 	bl	800e1bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e194:	2204      	movs	r2, #4
 800e196:	4908      	ldr	r1, [pc, #32]	@ (800e1b8 <Get_SerialNum+0x54>)
 800e198:	68b8      	ldr	r0, [r7, #8]
 800e19a:	f000 f80f 	bl	800e1bc <IntToUnicode>
  }
}
 800e19e:	bf00      	nop
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	1ffff7e8 	.word	0x1ffff7e8
 800e1ac:	1ffff7ec 	.word	0x1ffff7ec
 800e1b0:	1ffff7f0 	.word	0x1ffff7f0
 800e1b4:	20000162 	.word	0x20000162
 800e1b8:	20000172 	.word	0x20000172

0800e1bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	75fb      	strb	r3, [r7, #23]
 800e1d2:	e027      	b.n	800e224 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	0f1b      	lsrs	r3, r3, #28
 800e1d8:	2b09      	cmp	r3, #9
 800e1da:	d80b      	bhi.n	800e1f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	0f1b      	lsrs	r3, r3, #28
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	440b      	add	r3, r1
 800e1ec:	3230      	adds	r2, #48	@ 0x30
 800e1ee:	b2d2      	uxtb	r2, r2
 800e1f0:	701a      	strb	r2, [r3, #0]
 800e1f2:	e00a      	b.n	800e20a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	0f1b      	lsrs	r3, r3, #28
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
 800e1fc:	005b      	lsls	r3, r3, #1
 800e1fe:	4619      	mov	r1, r3
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	440b      	add	r3, r1
 800e204:	3237      	adds	r2, #55	@ 0x37
 800e206:	b2d2      	uxtb	r2, r2
 800e208:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	011b      	lsls	r3, r3, #4
 800e20e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e210:	7dfb      	ldrb	r3, [r7, #23]
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	3301      	adds	r3, #1
 800e216:	68ba      	ldr	r2, [r7, #8]
 800e218:	4413      	add	r3, r2
 800e21a:	2200      	movs	r2, #0
 800e21c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e21e:	7dfb      	ldrb	r3, [r7, #23]
 800e220:	3301      	adds	r3, #1
 800e222:	75fb      	strb	r3, [r7, #23]
 800e224:	7dfa      	ldrb	r2, [r7, #23]
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d3d3      	bcc.n	800e1d4 <IntToUnicode+0x18>
  }
}
 800e22c:	bf00      	nop
 800e22e:	bf00      	nop
 800e230:	371c      	adds	r7, #28
 800e232:	46bd      	mov	sp, r7
 800e234:	bc80      	pop	{r7}
 800e236:	4770      	bx	lr

0800e238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a0d      	ldr	r2, [pc, #52]	@ (800e27c <HAL_PCD_MspInit+0x44>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d113      	bne.n	800e272 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e24a:	4b0d      	ldr	r3, [pc, #52]	@ (800e280 <HAL_PCD_MspInit+0x48>)
 800e24c:	69db      	ldr	r3, [r3, #28]
 800e24e:	4a0c      	ldr	r2, [pc, #48]	@ (800e280 <HAL_PCD_MspInit+0x48>)
 800e250:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e254:	61d3      	str	r3, [r2, #28]
 800e256:	4b0a      	ldr	r3, [pc, #40]	@ (800e280 <HAL_PCD_MspInit+0x48>)
 800e258:	69db      	ldr	r3, [r3, #28]
 800e25a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800e262:	2200      	movs	r2, #0
 800e264:	2100      	movs	r1, #0
 800e266:	2014      	movs	r0, #20
 800e268:	f7f3 f867 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800e26c:	2014      	movs	r0, #20
 800e26e:	f7f3 f880 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e272:	bf00      	nop
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	40005c00 	.word	0x40005c00
 800e280:	40021000 	.word	0x40021000

0800e284 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800e298:	4619      	mov	r1, r3
 800e29a:	4610      	mov	r0, r2
 800e29c:	f7fa fac7 	bl	800882e <USBD_LL_SetupStage>
}
 800e2a0:	bf00      	nop
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800e2ba:	78fa      	ldrb	r2, [r7, #3]
 800e2bc:	6879      	ldr	r1, [r7, #4]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	4413      	add	r3, r2
 800e2c4:	00db      	lsls	r3, r3, #3
 800e2c6:	440b      	add	r3, r1
 800e2c8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	78fb      	ldrb	r3, [r7, #3]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	f7fa faf9 	bl	80088c8 <USBD_LL_DataOutStage>
}
 800e2d6:	bf00      	nop
 800e2d8:	3708      	adds	r7, #8
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b082      	sub	sp, #8
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800e2f0:	78fa      	ldrb	r2, [r7, #3]
 800e2f2:	6879      	ldr	r1, [r7, #4]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	440b      	add	r3, r1
 800e2fe:	333c      	adds	r3, #60	@ 0x3c
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	78fb      	ldrb	r3, [r7, #3]
 800e304:	4619      	mov	r1, r3
 800e306:	f7fa fb50 	bl	80089aa <USBD_LL_DataInStage>
}
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e312:	b580      	push	{r7, lr}
 800e314:	b082      	sub	sp, #8
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e320:	4618      	mov	r0, r3
 800e322:	f7fa fc60 	bl	8008be6 <USBD_LL_SOF>
}
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e336:	2301      	movs	r3, #1
 800e338:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	2b02      	cmp	r3, #2
 800e340:	d001      	beq.n	800e346 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e342:	f7f2 fd40 	bl	8000dc6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e34c:	7bfa      	ldrb	r2, [r7, #15]
 800e34e:	4611      	mov	r1, r2
 800e350:	4618      	mov	r0, r3
 800e352:	f7fa fc10 	bl	8008b76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fa fbc9 	bl	8008af4 <USBD_LL_Reset>
}
 800e362:	bf00      	nop
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
	...

0800e36c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fa fc0a 	bl	8008b94 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d005      	beq.n	800e394 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e388:	4b04      	ldr	r3, [pc, #16]	@ (800e39c <HAL_PCD_SuspendCallback+0x30>)
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	4a03      	ldr	r2, [pc, #12]	@ (800e39c <HAL_PCD_SuspendCallback+0x30>)
 800e38e:	f043 0306 	orr.w	r3, r3, #6
 800e392:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e394:	bf00      	nop
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	e000ed00 	.word	0xe000ed00

0800e3a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fa fc04 	bl	8008bbc <USBD_LL_Resume>
}
 800e3b4:	bf00      	nop
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e3c4:	4a28      	ldr	r2, [pc, #160]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a26      	ldr	r2, [pc, #152]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e3d4:	4b24      	ldr	r3, [pc, #144]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3d6:	4a25      	ldr	r2, [pc, #148]	@ (800e46c <USBD_LL_Init+0xb0>)
 800e3d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e3da:	4b23      	ldr	r3, [pc, #140]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3dc:	2208      	movs	r2, #8
 800e3de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e3e0:	4b21      	ldr	r3, [pc, #132]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e3e6:	4b20      	ldr	r3, [pc, #128]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e3ec:	4b1e      	ldr	r3, [pc, #120]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e3f2:	4b1d      	ldr	r3, [pc, #116]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e3f8:	481b      	ldr	r0, [pc, #108]	@ (800e468 <USBD_LL_Init+0xac>)
 800e3fa:	f7f3 f969 	bl	80016d0 <HAL_PCD_Init>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e404:	f7f2 fcdf 	bl	8000dc6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e40e:	2318      	movs	r3, #24
 800e410:	2200      	movs	r2, #0
 800e412:	2100      	movs	r1, #0
 800e414:	f7f4 fe87 	bl	8003126 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e41e:	2358      	movs	r3, #88	@ 0x58
 800e420:	2200      	movs	r2, #0
 800e422:	2180      	movs	r1, #128	@ 0x80
 800e424:	f7f4 fe7f 	bl	8003126 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e42e:	23c0      	movs	r3, #192	@ 0xc0
 800e430:	2200      	movs	r2, #0
 800e432:	2181      	movs	r1, #129	@ 0x81
 800e434:	f7f4 fe77 	bl	8003126 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e43e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e442:	2200      	movs	r2, #0
 800e444:	2101      	movs	r1, #1
 800e446:	f7f4 fe6e 	bl	8003126 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e454:	2200      	movs	r2, #0
 800e456:	2182      	movs	r1, #130	@ 0x82
 800e458:	f7f4 fe65 	bl	8003126 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e45c:	2300      	movs	r3, #0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	2000126c 	.word	0x2000126c
 800e46c:	40005c00 	.word	0x40005c00

0800e470 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e478:	2300      	movs	r3, #0
 800e47a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e47c:	2300      	movs	r3, #0
 800e47e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e486:	4618      	mov	r0, r3
 800e488:	f7f3 fa21 	bl	80018ce <HAL_PCD_Start>
 800e48c:	4603      	mov	r3, r0
 800e48e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e490:	7bfb      	ldrb	r3, [r7, #15]
 800e492:	4618      	mov	r0, r3
 800e494:	f000 f94e 	bl	800e734 <USBD_Get_USB_Status>
 800e498:	4603      	mov	r3, r0
 800e49a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e49c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b084      	sub	sp, #16
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	4608      	mov	r0, r1
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	70fb      	strb	r3, [r7, #3]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	70bb      	strb	r3, [r7, #2]
 800e4bc:	4613      	mov	r3, r2
 800e4be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e4ce:	78bb      	ldrb	r3, [r7, #2]
 800e4d0:	883a      	ldrh	r2, [r7, #0]
 800e4d2:	78f9      	ldrb	r1, [r7, #3]
 800e4d4:	f7f3 fb76 	bl	8001bc4 <HAL_PCD_EP_Open>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4dc:	7bfb      	ldrb	r3, [r7, #15]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 f928 	bl	800e734 <USBD_Get_USB_Status>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b084      	sub	sp, #16
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4fe:	2300      	movs	r3, #0
 800e500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e502:	2300      	movs	r3, #0
 800e504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e50c:	78fa      	ldrb	r2, [r7, #3]
 800e50e:	4611      	mov	r1, r2
 800e510:	4618      	mov	r0, r3
 800e512:	f7f3 fbb4 	bl	8001c7e <HAL_PCD_EP_Close>
 800e516:	4603      	mov	r3, r0
 800e518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e51a:	7bfb      	ldrb	r3, [r7, #15]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f000 f909 	bl	800e734 <USBD_Get_USB_Status>
 800e522:	4603      	mov	r3, r0
 800e524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e526:	7bbb      	ldrb	r3, [r7, #14]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e54a:	78fa      	ldrb	r2, [r7, #3]
 800e54c:	4611      	mov	r1, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f7f3 fc5c 	bl	8001e0c <HAL_PCD_EP_SetStall>
 800e554:	4603      	mov	r3, r0
 800e556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e558:	7bfb      	ldrb	r3, [r7, #15]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f000 f8ea 	bl	800e734 <USBD_Get_USB_Status>
 800e560:	4603      	mov	r3, r0
 800e562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e564:	7bbb      	ldrb	r3, [r7, #14]
}
 800e566:	4618      	mov	r0, r3
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b084      	sub	sp, #16
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	460b      	mov	r3, r1
 800e578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e57a:	2300      	movs	r3, #0
 800e57c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e57e:	2300      	movs	r3, #0
 800e580:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e588:	78fa      	ldrb	r2, [r7, #3]
 800e58a:	4611      	mov	r1, r2
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7f3 fc9d 	bl	8001ecc <HAL_PCD_EP_ClrStall>
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e596:	7bfb      	ldrb	r3, [r7, #15]
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 f8cb 	bl	800e734 <USBD_Get_USB_Status>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b085      	sub	sp, #20
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e5be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e5c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	da0c      	bge.n	800e5e2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e5c8:	78fb      	ldrb	r3, [r7, #3]
 800e5ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5ce:	68f9      	ldr	r1, [r7, #12]
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4413      	add	r3, r2
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	440b      	add	r3, r1
 800e5dc:	3302      	adds	r3, #2
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	e00b      	b.n	800e5fa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e5e2:	78fb      	ldrb	r3, [r7, #3]
 800e5e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5e8:	68f9      	ldr	r1, [r7, #12]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	00db      	lsls	r3, r3, #3
 800e5f2:	440b      	add	r3, r1
 800e5f4:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800e5f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3714      	adds	r7, #20
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bc80      	pop	{r7}
 800e602:	4770      	bx	lr

0800e604 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e61e:	78fa      	ldrb	r2, [r7, #3]
 800e620:	4611      	mov	r1, r2
 800e622:	4618      	mov	r0, r3
 800e624:	f7f3 faa9 	bl	8001b7a <HAL_PCD_SetAddress>
 800e628:	4603      	mov	r3, r0
 800e62a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 f880 	bl	800e734 <USBD_Get_USB_Status>
 800e634:	4603      	mov	r3, r0
 800e636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e638:	7bbb      	ldrb	r3, [r7, #14]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b086      	sub	sp, #24
 800e646:	af00      	add	r7, sp, #0
 800e648:	60f8      	str	r0, [r7, #12]
 800e64a:	607a      	str	r2, [r7, #4]
 800e64c:	461a      	mov	r2, r3
 800e64e:	460b      	mov	r3, r1
 800e650:	72fb      	strb	r3, [r7, #11]
 800e652:	4613      	mov	r3, r2
 800e654:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e656:	2300      	movs	r3, #0
 800e658:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e65a:	2300      	movs	r3, #0
 800e65c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e664:	893b      	ldrh	r3, [r7, #8]
 800e666:	7af9      	ldrb	r1, [r7, #11]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	f7f3 fb98 	bl	8001d9e <HAL_PCD_EP_Transmit>
 800e66e:	4603      	mov	r3, r0
 800e670:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e672:	7dfb      	ldrb	r3, [r7, #23]
 800e674:	4618      	mov	r0, r3
 800e676:	f000 f85d 	bl	800e734 <USBD_Get_USB_Status>
 800e67a:	4603      	mov	r3, r0
 800e67c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e67e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	607a      	str	r2, [r7, #4]
 800e692:	461a      	mov	r2, r3
 800e694:	460b      	mov	r3, r1
 800e696:	72fb      	strb	r3, [r7, #11]
 800e698:	4613      	mov	r3, r2
 800e69a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e6aa:	893b      	ldrh	r3, [r7, #8]
 800e6ac:	7af9      	ldrb	r1, [r7, #11]
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	f7f3 fb2d 	bl	8001d0e <HAL_PCD_EP_Receive>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6b8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 f83a 	bl	800e734 <USBD_Get_USB_Status>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3718      	adds	r7, #24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b082      	sub	sp, #8
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e6e0:	78fa      	ldrb	r2, [r7, #3]
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7f3 fb43 	bl	8001d70 <HAL_PCD_EP_GetRxCount>
 800e6ea:	4603      	mov	r3, r0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e6fc:	4b02      	ldr	r3, [pc, #8]	@ (800e708 <USBD_static_malloc+0x14>)
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	370c      	adds	r7, #12
 800e702:	46bd      	mov	sp, r7
 800e704:	bc80      	pop	{r7}
 800e706:	4770      	bx	lr
 800e708:	2000155c 	.word	0x2000155c

0800e70c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]

}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	bc80      	pop	{r7}
 800e71c:	4770      	bx	lr

0800e71e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e71e:	b480      	push	{r7}
 800e720:	b083      	sub	sp, #12
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	460b      	mov	r3, r1
 800e728:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e72a:	bf00      	nop
 800e72c:	370c      	adds	r7, #12
 800e72e:	46bd      	mov	sp, r7
 800e730:	bc80      	pop	{r7}
 800e732:	4770      	bx	lr

0800e734 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	4603      	mov	r3, r0
 800e73c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e73e:	2300      	movs	r3, #0
 800e740:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e742:	79fb      	ldrb	r3, [r7, #7]
 800e744:	2b03      	cmp	r3, #3
 800e746:	d817      	bhi.n	800e778 <USBD_Get_USB_Status+0x44>
 800e748:	a201      	add	r2, pc, #4	@ (adr r2, 800e750 <USBD_Get_USB_Status+0x1c>)
 800e74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74e:	bf00      	nop
 800e750:	0800e761 	.word	0x0800e761
 800e754:	0800e767 	.word	0x0800e767
 800e758:	0800e76d 	.word	0x0800e76d
 800e75c:	0800e773 	.word	0x0800e773
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	73fb      	strb	r3, [r7, #15]
    break;
 800e764:	e00b      	b.n	800e77e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e766:	2302      	movs	r3, #2
 800e768:	73fb      	strb	r3, [r7, #15]
    break;
 800e76a:	e008      	b.n	800e77e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e76c:	2301      	movs	r3, #1
 800e76e:	73fb      	strb	r3, [r7, #15]
    break;
 800e770:	e005      	b.n	800e77e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e772:	2302      	movs	r3, #2
 800e774:	73fb      	strb	r3, [r7, #15]
    break;
 800e776:	e002      	b.n	800e77e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e778:	2302      	movs	r3, #2
 800e77a:	73fb      	strb	r3, [r7, #15]
    break;
 800e77c:	bf00      	nop
  }
  return usb_status;
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	bc80      	pop	{r7}
 800e788:	4770      	bx	lr
 800e78a:	bf00      	nop

0800e78c <siprintf>:
 800e78c:	b40e      	push	{r1, r2, r3}
 800e78e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e792:	b500      	push	{lr}
 800e794:	b09c      	sub	sp, #112	@ 0x70
 800e796:	ab1d      	add	r3, sp, #116	@ 0x74
 800e798:	9002      	str	r0, [sp, #8]
 800e79a:	9006      	str	r0, [sp, #24]
 800e79c:	9107      	str	r1, [sp, #28]
 800e79e:	9104      	str	r1, [sp, #16]
 800e7a0:	4808      	ldr	r0, [pc, #32]	@ (800e7c4 <siprintf+0x38>)
 800e7a2:	4909      	ldr	r1, [pc, #36]	@ (800e7c8 <siprintf+0x3c>)
 800e7a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a8:	9105      	str	r1, [sp, #20]
 800e7aa:	6800      	ldr	r0, [r0, #0]
 800e7ac:	a902      	add	r1, sp, #8
 800e7ae:	9301      	str	r3, [sp, #4]
 800e7b0:	f000 f992 	bl	800ead8 <_svfiprintf_r>
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	9b02      	ldr	r3, [sp, #8]
 800e7b8:	701a      	strb	r2, [r3, #0]
 800e7ba:	b01c      	add	sp, #112	@ 0x70
 800e7bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7c0:	b003      	add	sp, #12
 800e7c2:	4770      	bx	lr
 800e7c4:	2000017c 	.word	0x2000017c
 800e7c8:	ffff0208 	.word	0xffff0208

0800e7cc <memset>:
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	4402      	add	r2, r0
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d100      	bne.n	800e7d6 <memset+0xa>
 800e7d4:	4770      	bx	lr
 800e7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800e7da:	e7f9      	b.n	800e7d0 <memset+0x4>

0800e7dc <__errno>:
 800e7dc:	4b01      	ldr	r3, [pc, #4]	@ (800e7e4 <__errno+0x8>)
 800e7de:	6818      	ldr	r0, [r3, #0]
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	2000017c 	.word	0x2000017c

0800e7e8 <__libc_init_array>:
 800e7e8:	b570      	push	{r4, r5, r6, lr}
 800e7ea:	2600      	movs	r6, #0
 800e7ec:	4d0c      	ldr	r5, [pc, #48]	@ (800e820 <__libc_init_array+0x38>)
 800e7ee:	4c0d      	ldr	r4, [pc, #52]	@ (800e824 <__libc_init_array+0x3c>)
 800e7f0:	1b64      	subs	r4, r4, r5
 800e7f2:	10a4      	asrs	r4, r4, #2
 800e7f4:	42a6      	cmp	r6, r4
 800e7f6:	d109      	bne.n	800e80c <__libc_init_array+0x24>
 800e7f8:	f000 fc78 	bl	800f0ec <_init>
 800e7fc:	2600      	movs	r6, #0
 800e7fe:	4d0a      	ldr	r5, [pc, #40]	@ (800e828 <__libc_init_array+0x40>)
 800e800:	4c0a      	ldr	r4, [pc, #40]	@ (800e82c <__libc_init_array+0x44>)
 800e802:	1b64      	subs	r4, r4, r5
 800e804:	10a4      	asrs	r4, r4, #2
 800e806:	42a6      	cmp	r6, r4
 800e808:	d105      	bne.n	800e816 <__libc_init_array+0x2e>
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e810:	4798      	blx	r3
 800e812:	3601      	adds	r6, #1
 800e814:	e7ee      	b.n	800e7f4 <__libc_init_array+0xc>
 800e816:	f855 3b04 	ldr.w	r3, [r5], #4
 800e81a:	4798      	blx	r3
 800e81c:	3601      	adds	r6, #1
 800e81e:	e7f2      	b.n	800e806 <__libc_init_array+0x1e>
 800e820:	0800fab8 	.word	0x0800fab8
 800e824:	0800fab8 	.word	0x0800fab8
 800e828:	0800fab8 	.word	0x0800fab8
 800e82c:	0800fabc 	.word	0x0800fabc

0800e830 <__retarget_lock_acquire_recursive>:
 800e830:	4770      	bx	lr

0800e832 <__retarget_lock_release_recursive>:
 800e832:	4770      	bx	lr

0800e834 <_free_r>:
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	4605      	mov	r5, r0
 800e838:	2900      	cmp	r1, #0
 800e83a:	d040      	beq.n	800e8be <_free_r+0x8a>
 800e83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e840:	1f0c      	subs	r4, r1, #4
 800e842:	2b00      	cmp	r3, #0
 800e844:	bfb8      	it	lt
 800e846:	18e4      	addlt	r4, r4, r3
 800e848:	f000 f8de 	bl	800ea08 <__malloc_lock>
 800e84c:	4a1c      	ldr	r2, [pc, #112]	@ (800e8c0 <_free_r+0x8c>)
 800e84e:	6813      	ldr	r3, [r2, #0]
 800e850:	b933      	cbnz	r3, 800e860 <_free_r+0x2c>
 800e852:	6063      	str	r3, [r4, #4]
 800e854:	6014      	str	r4, [r2, #0]
 800e856:	4628      	mov	r0, r5
 800e858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e85c:	f000 b8da 	b.w	800ea14 <__malloc_unlock>
 800e860:	42a3      	cmp	r3, r4
 800e862:	d908      	bls.n	800e876 <_free_r+0x42>
 800e864:	6820      	ldr	r0, [r4, #0]
 800e866:	1821      	adds	r1, r4, r0
 800e868:	428b      	cmp	r3, r1
 800e86a:	bf01      	itttt	eq
 800e86c:	6819      	ldreq	r1, [r3, #0]
 800e86e:	685b      	ldreq	r3, [r3, #4]
 800e870:	1809      	addeq	r1, r1, r0
 800e872:	6021      	streq	r1, [r4, #0]
 800e874:	e7ed      	b.n	800e852 <_free_r+0x1e>
 800e876:	461a      	mov	r2, r3
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	b10b      	cbz	r3, 800e880 <_free_r+0x4c>
 800e87c:	42a3      	cmp	r3, r4
 800e87e:	d9fa      	bls.n	800e876 <_free_r+0x42>
 800e880:	6811      	ldr	r1, [r2, #0]
 800e882:	1850      	adds	r0, r2, r1
 800e884:	42a0      	cmp	r0, r4
 800e886:	d10b      	bne.n	800e8a0 <_free_r+0x6c>
 800e888:	6820      	ldr	r0, [r4, #0]
 800e88a:	4401      	add	r1, r0
 800e88c:	1850      	adds	r0, r2, r1
 800e88e:	4283      	cmp	r3, r0
 800e890:	6011      	str	r1, [r2, #0]
 800e892:	d1e0      	bne.n	800e856 <_free_r+0x22>
 800e894:	6818      	ldr	r0, [r3, #0]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	4408      	add	r0, r1
 800e89a:	6010      	str	r0, [r2, #0]
 800e89c:	6053      	str	r3, [r2, #4]
 800e89e:	e7da      	b.n	800e856 <_free_r+0x22>
 800e8a0:	d902      	bls.n	800e8a8 <_free_r+0x74>
 800e8a2:	230c      	movs	r3, #12
 800e8a4:	602b      	str	r3, [r5, #0]
 800e8a6:	e7d6      	b.n	800e856 <_free_r+0x22>
 800e8a8:	6820      	ldr	r0, [r4, #0]
 800e8aa:	1821      	adds	r1, r4, r0
 800e8ac:	428b      	cmp	r3, r1
 800e8ae:	bf01      	itttt	eq
 800e8b0:	6819      	ldreq	r1, [r3, #0]
 800e8b2:	685b      	ldreq	r3, [r3, #4]
 800e8b4:	1809      	addeq	r1, r1, r0
 800e8b6:	6021      	streq	r1, [r4, #0]
 800e8b8:	6063      	str	r3, [r4, #4]
 800e8ba:	6054      	str	r4, [r2, #4]
 800e8bc:	e7cb      	b.n	800e856 <_free_r+0x22>
 800e8be:	bd38      	pop	{r3, r4, r5, pc}
 800e8c0:	200018c0 	.word	0x200018c0

0800e8c4 <sbrk_aligned>:
 800e8c4:	b570      	push	{r4, r5, r6, lr}
 800e8c6:	4e0f      	ldr	r6, [pc, #60]	@ (800e904 <sbrk_aligned+0x40>)
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	6831      	ldr	r1, [r6, #0]
 800e8cc:	4605      	mov	r5, r0
 800e8ce:	b911      	cbnz	r1, 800e8d6 <sbrk_aligned+0x12>
 800e8d0:	f000 fbaa 	bl	800f028 <_sbrk_r>
 800e8d4:	6030      	str	r0, [r6, #0]
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	4628      	mov	r0, r5
 800e8da:	f000 fba5 	bl	800f028 <_sbrk_r>
 800e8de:	1c43      	adds	r3, r0, #1
 800e8e0:	d103      	bne.n	800e8ea <sbrk_aligned+0x26>
 800e8e2:	f04f 34ff 	mov.w	r4, #4294967295
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ea:	1cc4      	adds	r4, r0, #3
 800e8ec:	f024 0403 	bic.w	r4, r4, #3
 800e8f0:	42a0      	cmp	r0, r4
 800e8f2:	d0f8      	beq.n	800e8e6 <sbrk_aligned+0x22>
 800e8f4:	1a21      	subs	r1, r4, r0
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	f000 fb96 	bl	800f028 <_sbrk_r>
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	d1f2      	bne.n	800e8e6 <sbrk_aligned+0x22>
 800e900:	e7ef      	b.n	800e8e2 <sbrk_aligned+0x1e>
 800e902:	bf00      	nop
 800e904:	200018bc 	.word	0x200018bc

0800e908 <_malloc_r>:
 800e908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e90c:	1ccd      	adds	r5, r1, #3
 800e90e:	f025 0503 	bic.w	r5, r5, #3
 800e912:	3508      	adds	r5, #8
 800e914:	2d0c      	cmp	r5, #12
 800e916:	bf38      	it	cc
 800e918:	250c      	movcc	r5, #12
 800e91a:	2d00      	cmp	r5, #0
 800e91c:	4606      	mov	r6, r0
 800e91e:	db01      	blt.n	800e924 <_malloc_r+0x1c>
 800e920:	42a9      	cmp	r1, r5
 800e922:	d904      	bls.n	800e92e <_malloc_r+0x26>
 800e924:	230c      	movs	r3, #12
 800e926:	6033      	str	r3, [r6, #0]
 800e928:	2000      	movs	r0, #0
 800e92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e92e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea04 <_malloc_r+0xfc>
 800e932:	f000 f869 	bl	800ea08 <__malloc_lock>
 800e936:	f8d8 3000 	ldr.w	r3, [r8]
 800e93a:	461c      	mov	r4, r3
 800e93c:	bb44      	cbnz	r4, 800e990 <_malloc_r+0x88>
 800e93e:	4629      	mov	r1, r5
 800e940:	4630      	mov	r0, r6
 800e942:	f7ff ffbf 	bl	800e8c4 <sbrk_aligned>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	4604      	mov	r4, r0
 800e94a:	d158      	bne.n	800e9fe <_malloc_r+0xf6>
 800e94c:	f8d8 4000 	ldr.w	r4, [r8]
 800e950:	4627      	mov	r7, r4
 800e952:	2f00      	cmp	r7, #0
 800e954:	d143      	bne.n	800e9de <_malloc_r+0xd6>
 800e956:	2c00      	cmp	r4, #0
 800e958:	d04b      	beq.n	800e9f2 <_malloc_r+0xea>
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	4639      	mov	r1, r7
 800e95e:	4630      	mov	r0, r6
 800e960:	eb04 0903 	add.w	r9, r4, r3
 800e964:	f000 fb60 	bl	800f028 <_sbrk_r>
 800e968:	4581      	cmp	r9, r0
 800e96a:	d142      	bne.n	800e9f2 <_malloc_r+0xea>
 800e96c:	6821      	ldr	r1, [r4, #0]
 800e96e:	4630      	mov	r0, r6
 800e970:	1a6d      	subs	r5, r5, r1
 800e972:	4629      	mov	r1, r5
 800e974:	f7ff ffa6 	bl	800e8c4 <sbrk_aligned>
 800e978:	3001      	adds	r0, #1
 800e97a:	d03a      	beq.n	800e9f2 <_malloc_r+0xea>
 800e97c:	6823      	ldr	r3, [r4, #0]
 800e97e:	442b      	add	r3, r5
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	f8d8 3000 	ldr.w	r3, [r8]
 800e986:	685a      	ldr	r2, [r3, #4]
 800e988:	bb62      	cbnz	r2, 800e9e4 <_malloc_r+0xdc>
 800e98a:	f8c8 7000 	str.w	r7, [r8]
 800e98e:	e00f      	b.n	800e9b0 <_malloc_r+0xa8>
 800e990:	6822      	ldr	r2, [r4, #0]
 800e992:	1b52      	subs	r2, r2, r5
 800e994:	d420      	bmi.n	800e9d8 <_malloc_r+0xd0>
 800e996:	2a0b      	cmp	r2, #11
 800e998:	d917      	bls.n	800e9ca <_malloc_r+0xc2>
 800e99a:	1961      	adds	r1, r4, r5
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	6025      	str	r5, [r4, #0]
 800e9a0:	bf18      	it	ne
 800e9a2:	6059      	strne	r1, [r3, #4]
 800e9a4:	6863      	ldr	r3, [r4, #4]
 800e9a6:	bf08      	it	eq
 800e9a8:	f8c8 1000 	streq.w	r1, [r8]
 800e9ac:	5162      	str	r2, [r4, r5]
 800e9ae:	604b      	str	r3, [r1, #4]
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f000 f82f 	bl	800ea14 <__malloc_unlock>
 800e9b6:	f104 000b 	add.w	r0, r4, #11
 800e9ba:	1d23      	adds	r3, r4, #4
 800e9bc:	f020 0007 	bic.w	r0, r0, #7
 800e9c0:	1ac2      	subs	r2, r0, r3
 800e9c2:	bf1c      	itt	ne
 800e9c4:	1a1b      	subne	r3, r3, r0
 800e9c6:	50a3      	strne	r3, [r4, r2]
 800e9c8:	e7af      	b.n	800e92a <_malloc_r+0x22>
 800e9ca:	6862      	ldr	r2, [r4, #4]
 800e9cc:	42a3      	cmp	r3, r4
 800e9ce:	bf0c      	ite	eq
 800e9d0:	f8c8 2000 	streq.w	r2, [r8]
 800e9d4:	605a      	strne	r2, [r3, #4]
 800e9d6:	e7eb      	b.n	800e9b0 <_malloc_r+0xa8>
 800e9d8:	4623      	mov	r3, r4
 800e9da:	6864      	ldr	r4, [r4, #4]
 800e9dc:	e7ae      	b.n	800e93c <_malloc_r+0x34>
 800e9de:	463c      	mov	r4, r7
 800e9e0:	687f      	ldr	r7, [r7, #4]
 800e9e2:	e7b6      	b.n	800e952 <_malloc_r+0x4a>
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	42a3      	cmp	r3, r4
 800e9ea:	d1fb      	bne.n	800e9e4 <_malloc_r+0xdc>
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	6053      	str	r3, [r2, #4]
 800e9f0:	e7de      	b.n	800e9b0 <_malloc_r+0xa8>
 800e9f2:	230c      	movs	r3, #12
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	6033      	str	r3, [r6, #0]
 800e9f8:	f000 f80c 	bl	800ea14 <__malloc_unlock>
 800e9fc:	e794      	b.n	800e928 <_malloc_r+0x20>
 800e9fe:	6005      	str	r5, [r0, #0]
 800ea00:	e7d6      	b.n	800e9b0 <_malloc_r+0xa8>
 800ea02:	bf00      	nop
 800ea04:	200018c0 	.word	0x200018c0

0800ea08 <__malloc_lock>:
 800ea08:	4801      	ldr	r0, [pc, #4]	@ (800ea10 <__malloc_lock+0x8>)
 800ea0a:	f7ff bf11 	b.w	800e830 <__retarget_lock_acquire_recursive>
 800ea0e:	bf00      	nop
 800ea10:	200018b8 	.word	0x200018b8

0800ea14 <__malloc_unlock>:
 800ea14:	4801      	ldr	r0, [pc, #4]	@ (800ea1c <__malloc_unlock+0x8>)
 800ea16:	f7ff bf0c 	b.w	800e832 <__retarget_lock_release_recursive>
 800ea1a:	bf00      	nop
 800ea1c:	200018b8 	.word	0x200018b8

0800ea20 <__ssputs_r>:
 800ea20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea24:	461f      	mov	r7, r3
 800ea26:	688e      	ldr	r6, [r1, #8]
 800ea28:	4682      	mov	sl, r0
 800ea2a:	42be      	cmp	r6, r7
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	4690      	mov	r8, r2
 800ea30:	680b      	ldr	r3, [r1, #0]
 800ea32:	d82d      	bhi.n	800ea90 <__ssputs_r+0x70>
 800ea34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ea3c:	d026      	beq.n	800ea8c <__ssputs_r+0x6c>
 800ea3e:	6965      	ldr	r5, [r4, #20]
 800ea40:	6909      	ldr	r1, [r1, #16]
 800ea42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea46:	eba3 0901 	sub.w	r9, r3, r1
 800ea4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea4e:	1c7b      	adds	r3, r7, #1
 800ea50:	444b      	add	r3, r9
 800ea52:	106d      	asrs	r5, r5, #1
 800ea54:	429d      	cmp	r5, r3
 800ea56:	bf38      	it	cc
 800ea58:	461d      	movcc	r5, r3
 800ea5a:	0553      	lsls	r3, r2, #21
 800ea5c:	d527      	bpl.n	800eaae <__ssputs_r+0x8e>
 800ea5e:	4629      	mov	r1, r5
 800ea60:	f7ff ff52 	bl	800e908 <_malloc_r>
 800ea64:	4606      	mov	r6, r0
 800ea66:	b360      	cbz	r0, 800eac2 <__ssputs_r+0xa2>
 800ea68:	464a      	mov	r2, r9
 800ea6a:	6921      	ldr	r1, [r4, #16]
 800ea6c:	f000 fafa 	bl	800f064 <memcpy>
 800ea70:	89a3      	ldrh	r3, [r4, #12]
 800ea72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea7a:	81a3      	strh	r3, [r4, #12]
 800ea7c:	6126      	str	r6, [r4, #16]
 800ea7e:	444e      	add	r6, r9
 800ea80:	6026      	str	r6, [r4, #0]
 800ea82:	463e      	mov	r6, r7
 800ea84:	6165      	str	r5, [r4, #20]
 800ea86:	eba5 0509 	sub.w	r5, r5, r9
 800ea8a:	60a5      	str	r5, [r4, #8]
 800ea8c:	42be      	cmp	r6, r7
 800ea8e:	d900      	bls.n	800ea92 <__ssputs_r+0x72>
 800ea90:	463e      	mov	r6, r7
 800ea92:	4632      	mov	r2, r6
 800ea94:	4641      	mov	r1, r8
 800ea96:	6820      	ldr	r0, [r4, #0]
 800ea98:	f000 faac 	bl	800eff4 <memmove>
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	68a3      	ldr	r3, [r4, #8]
 800eaa0:	1b9b      	subs	r3, r3, r6
 800eaa2:	60a3      	str	r3, [r4, #8]
 800eaa4:	6823      	ldr	r3, [r4, #0]
 800eaa6:	4433      	add	r3, r6
 800eaa8:	6023      	str	r3, [r4, #0]
 800eaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaae:	462a      	mov	r2, r5
 800eab0:	f000 fae6 	bl	800f080 <_realloc_r>
 800eab4:	4606      	mov	r6, r0
 800eab6:	2800      	cmp	r0, #0
 800eab8:	d1e0      	bne.n	800ea7c <__ssputs_r+0x5c>
 800eaba:	4650      	mov	r0, sl
 800eabc:	6921      	ldr	r1, [r4, #16]
 800eabe:	f7ff feb9 	bl	800e834 <_free_r>
 800eac2:	230c      	movs	r3, #12
 800eac4:	f8ca 3000 	str.w	r3, [sl]
 800eac8:	89a3      	ldrh	r3, [r4, #12]
 800eaca:	f04f 30ff 	mov.w	r0, #4294967295
 800eace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ead2:	81a3      	strh	r3, [r4, #12]
 800ead4:	e7e9      	b.n	800eaaa <__ssputs_r+0x8a>
	...

0800ead8 <_svfiprintf_r>:
 800ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eadc:	4698      	mov	r8, r3
 800eade:	898b      	ldrh	r3, [r1, #12]
 800eae0:	4607      	mov	r7, r0
 800eae2:	061b      	lsls	r3, r3, #24
 800eae4:	460d      	mov	r5, r1
 800eae6:	4614      	mov	r4, r2
 800eae8:	b09d      	sub	sp, #116	@ 0x74
 800eaea:	d510      	bpl.n	800eb0e <_svfiprintf_r+0x36>
 800eaec:	690b      	ldr	r3, [r1, #16]
 800eaee:	b973      	cbnz	r3, 800eb0e <_svfiprintf_r+0x36>
 800eaf0:	2140      	movs	r1, #64	@ 0x40
 800eaf2:	f7ff ff09 	bl	800e908 <_malloc_r>
 800eaf6:	6028      	str	r0, [r5, #0]
 800eaf8:	6128      	str	r0, [r5, #16]
 800eafa:	b930      	cbnz	r0, 800eb0a <_svfiprintf_r+0x32>
 800eafc:	230c      	movs	r3, #12
 800eafe:	603b      	str	r3, [r7, #0]
 800eb00:	f04f 30ff 	mov.w	r0, #4294967295
 800eb04:	b01d      	add	sp, #116	@ 0x74
 800eb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0a:	2340      	movs	r3, #64	@ 0x40
 800eb0c:	616b      	str	r3, [r5, #20]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb12:	2320      	movs	r3, #32
 800eb14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb18:	2330      	movs	r3, #48	@ 0x30
 800eb1a:	f04f 0901 	mov.w	r9, #1
 800eb1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb22:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ecbc <_svfiprintf_r+0x1e4>
 800eb26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eb2a:	4623      	mov	r3, r4
 800eb2c:	469a      	mov	sl, r3
 800eb2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb32:	b10a      	cbz	r2, 800eb38 <_svfiprintf_r+0x60>
 800eb34:	2a25      	cmp	r2, #37	@ 0x25
 800eb36:	d1f9      	bne.n	800eb2c <_svfiprintf_r+0x54>
 800eb38:	ebba 0b04 	subs.w	fp, sl, r4
 800eb3c:	d00b      	beq.n	800eb56 <_svfiprintf_r+0x7e>
 800eb3e:	465b      	mov	r3, fp
 800eb40:	4622      	mov	r2, r4
 800eb42:	4629      	mov	r1, r5
 800eb44:	4638      	mov	r0, r7
 800eb46:	f7ff ff6b 	bl	800ea20 <__ssputs_r>
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	f000 80a7 	beq.w	800ec9e <_svfiprintf_r+0x1c6>
 800eb50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb52:	445a      	add	r2, fp
 800eb54:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb56:	f89a 3000 	ldrb.w	r3, [sl]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f000 809f 	beq.w	800ec9e <_svfiprintf_r+0x1c6>
 800eb60:	2300      	movs	r3, #0
 800eb62:	f04f 32ff 	mov.w	r2, #4294967295
 800eb66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb6a:	f10a 0a01 	add.w	sl, sl, #1
 800eb6e:	9304      	str	r3, [sp, #16]
 800eb70:	9307      	str	r3, [sp, #28]
 800eb72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb76:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb78:	4654      	mov	r4, sl
 800eb7a:	2205      	movs	r2, #5
 800eb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb80:	484e      	ldr	r0, [pc, #312]	@ (800ecbc <_svfiprintf_r+0x1e4>)
 800eb82:	f000 fa61 	bl	800f048 <memchr>
 800eb86:	9a04      	ldr	r2, [sp, #16]
 800eb88:	b9d8      	cbnz	r0, 800ebc2 <_svfiprintf_r+0xea>
 800eb8a:	06d0      	lsls	r0, r2, #27
 800eb8c:	bf44      	itt	mi
 800eb8e:	2320      	movmi	r3, #32
 800eb90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb94:	0711      	lsls	r1, r2, #28
 800eb96:	bf44      	itt	mi
 800eb98:	232b      	movmi	r3, #43	@ 0x2b
 800eb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800eba2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eba4:	d015      	beq.n	800ebd2 <_svfiprintf_r+0xfa>
 800eba6:	4654      	mov	r4, sl
 800eba8:	2000      	movs	r0, #0
 800ebaa:	f04f 0c0a 	mov.w	ip, #10
 800ebae:	9a07      	ldr	r2, [sp, #28]
 800ebb0:	4621      	mov	r1, r4
 800ebb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebb6:	3b30      	subs	r3, #48	@ 0x30
 800ebb8:	2b09      	cmp	r3, #9
 800ebba:	d94b      	bls.n	800ec54 <_svfiprintf_r+0x17c>
 800ebbc:	b1b0      	cbz	r0, 800ebec <_svfiprintf_r+0x114>
 800ebbe:	9207      	str	r2, [sp, #28]
 800ebc0:	e014      	b.n	800ebec <_svfiprintf_r+0x114>
 800ebc2:	eba0 0308 	sub.w	r3, r0, r8
 800ebc6:	fa09 f303 	lsl.w	r3, r9, r3
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	46a2      	mov	sl, r4
 800ebce:	9304      	str	r3, [sp, #16]
 800ebd0:	e7d2      	b.n	800eb78 <_svfiprintf_r+0xa0>
 800ebd2:	9b03      	ldr	r3, [sp, #12]
 800ebd4:	1d19      	adds	r1, r3, #4
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	9103      	str	r1, [sp, #12]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	bfbb      	ittet	lt
 800ebde:	425b      	neglt	r3, r3
 800ebe0:	f042 0202 	orrlt.w	r2, r2, #2
 800ebe4:	9307      	strge	r3, [sp, #28]
 800ebe6:	9307      	strlt	r3, [sp, #28]
 800ebe8:	bfb8      	it	lt
 800ebea:	9204      	strlt	r2, [sp, #16]
 800ebec:	7823      	ldrb	r3, [r4, #0]
 800ebee:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebf0:	d10a      	bne.n	800ec08 <_svfiprintf_r+0x130>
 800ebf2:	7863      	ldrb	r3, [r4, #1]
 800ebf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebf6:	d132      	bne.n	800ec5e <_svfiprintf_r+0x186>
 800ebf8:	9b03      	ldr	r3, [sp, #12]
 800ebfa:	3402      	adds	r4, #2
 800ebfc:	1d1a      	adds	r2, r3, #4
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	9203      	str	r2, [sp, #12]
 800ec02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec06:	9305      	str	r3, [sp, #20]
 800ec08:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ecc0 <_svfiprintf_r+0x1e8>
 800ec0c:	2203      	movs	r2, #3
 800ec0e:	4650      	mov	r0, sl
 800ec10:	7821      	ldrb	r1, [r4, #0]
 800ec12:	f000 fa19 	bl	800f048 <memchr>
 800ec16:	b138      	cbz	r0, 800ec28 <_svfiprintf_r+0x150>
 800ec18:	2240      	movs	r2, #64	@ 0x40
 800ec1a:	9b04      	ldr	r3, [sp, #16]
 800ec1c:	eba0 000a 	sub.w	r0, r0, sl
 800ec20:	4082      	lsls	r2, r0
 800ec22:	4313      	orrs	r3, r2
 800ec24:	3401      	adds	r4, #1
 800ec26:	9304      	str	r3, [sp, #16]
 800ec28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec2c:	2206      	movs	r2, #6
 800ec2e:	4825      	ldr	r0, [pc, #148]	@ (800ecc4 <_svfiprintf_r+0x1ec>)
 800ec30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec34:	f000 fa08 	bl	800f048 <memchr>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d036      	beq.n	800ecaa <_svfiprintf_r+0x1d2>
 800ec3c:	4b22      	ldr	r3, [pc, #136]	@ (800ecc8 <_svfiprintf_r+0x1f0>)
 800ec3e:	bb1b      	cbnz	r3, 800ec88 <_svfiprintf_r+0x1b0>
 800ec40:	9b03      	ldr	r3, [sp, #12]
 800ec42:	3307      	adds	r3, #7
 800ec44:	f023 0307 	bic.w	r3, r3, #7
 800ec48:	3308      	adds	r3, #8
 800ec4a:	9303      	str	r3, [sp, #12]
 800ec4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec4e:	4433      	add	r3, r6
 800ec50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec52:	e76a      	b.n	800eb2a <_svfiprintf_r+0x52>
 800ec54:	460c      	mov	r4, r1
 800ec56:	2001      	movs	r0, #1
 800ec58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec5c:	e7a8      	b.n	800ebb0 <_svfiprintf_r+0xd8>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	f04f 0c0a 	mov.w	ip, #10
 800ec64:	4619      	mov	r1, r3
 800ec66:	3401      	adds	r4, #1
 800ec68:	9305      	str	r3, [sp, #20]
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec70:	3a30      	subs	r2, #48	@ 0x30
 800ec72:	2a09      	cmp	r2, #9
 800ec74:	d903      	bls.n	800ec7e <_svfiprintf_r+0x1a6>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d0c6      	beq.n	800ec08 <_svfiprintf_r+0x130>
 800ec7a:	9105      	str	r1, [sp, #20]
 800ec7c:	e7c4      	b.n	800ec08 <_svfiprintf_r+0x130>
 800ec7e:	4604      	mov	r4, r0
 800ec80:	2301      	movs	r3, #1
 800ec82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec86:	e7f0      	b.n	800ec6a <_svfiprintf_r+0x192>
 800ec88:	ab03      	add	r3, sp, #12
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	462a      	mov	r2, r5
 800ec8e:	4638      	mov	r0, r7
 800ec90:	4b0e      	ldr	r3, [pc, #56]	@ (800eccc <_svfiprintf_r+0x1f4>)
 800ec92:	a904      	add	r1, sp, #16
 800ec94:	f3af 8000 	nop.w
 800ec98:	1c42      	adds	r2, r0, #1
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	d1d6      	bne.n	800ec4c <_svfiprintf_r+0x174>
 800ec9e:	89ab      	ldrh	r3, [r5, #12]
 800eca0:	065b      	lsls	r3, r3, #25
 800eca2:	f53f af2d 	bmi.w	800eb00 <_svfiprintf_r+0x28>
 800eca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eca8:	e72c      	b.n	800eb04 <_svfiprintf_r+0x2c>
 800ecaa:	ab03      	add	r3, sp, #12
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	462a      	mov	r2, r5
 800ecb0:	4638      	mov	r0, r7
 800ecb2:	4b06      	ldr	r3, [pc, #24]	@ (800eccc <_svfiprintf_r+0x1f4>)
 800ecb4:	a904      	add	r1, sp, #16
 800ecb6:	f000 f87d 	bl	800edb4 <_printf_i>
 800ecba:	e7ed      	b.n	800ec98 <_svfiprintf_r+0x1c0>
 800ecbc:	0800fa7c 	.word	0x0800fa7c
 800ecc0:	0800fa82 	.word	0x0800fa82
 800ecc4:	0800fa86 	.word	0x0800fa86
 800ecc8:	00000000 	.word	0x00000000
 800eccc:	0800ea21 	.word	0x0800ea21

0800ecd0 <_printf_common>:
 800ecd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd4:	4616      	mov	r6, r2
 800ecd6:	4698      	mov	r8, r3
 800ecd8:	688a      	ldr	r2, [r1, #8]
 800ecda:	690b      	ldr	r3, [r1, #16]
 800ecdc:	4607      	mov	r7, r0
 800ecde:	4293      	cmp	r3, r2
 800ece0:	bfb8      	it	lt
 800ece2:	4613      	movlt	r3, r2
 800ece4:	6033      	str	r3, [r6, #0]
 800ece6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ecea:	460c      	mov	r4, r1
 800ecec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ecf0:	b10a      	cbz	r2, 800ecf6 <_printf_common+0x26>
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	6033      	str	r3, [r6, #0]
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	0699      	lsls	r1, r3, #26
 800ecfa:	bf42      	ittt	mi
 800ecfc:	6833      	ldrmi	r3, [r6, #0]
 800ecfe:	3302      	addmi	r3, #2
 800ed00:	6033      	strmi	r3, [r6, #0]
 800ed02:	6825      	ldr	r5, [r4, #0]
 800ed04:	f015 0506 	ands.w	r5, r5, #6
 800ed08:	d106      	bne.n	800ed18 <_printf_common+0x48>
 800ed0a:	f104 0a19 	add.w	sl, r4, #25
 800ed0e:	68e3      	ldr	r3, [r4, #12]
 800ed10:	6832      	ldr	r2, [r6, #0]
 800ed12:	1a9b      	subs	r3, r3, r2
 800ed14:	42ab      	cmp	r3, r5
 800ed16:	dc2b      	bgt.n	800ed70 <_printf_common+0xa0>
 800ed18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed1c:	6822      	ldr	r2, [r4, #0]
 800ed1e:	3b00      	subs	r3, #0
 800ed20:	bf18      	it	ne
 800ed22:	2301      	movne	r3, #1
 800ed24:	0692      	lsls	r2, r2, #26
 800ed26:	d430      	bmi.n	800ed8a <_printf_common+0xba>
 800ed28:	4641      	mov	r1, r8
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed30:	47c8      	blx	r9
 800ed32:	3001      	adds	r0, #1
 800ed34:	d023      	beq.n	800ed7e <_printf_common+0xae>
 800ed36:	6823      	ldr	r3, [r4, #0]
 800ed38:	6922      	ldr	r2, [r4, #16]
 800ed3a:	f003 0306 	and.w	r3, r3, #6
 800ed3e:	2b04      	cmp	r3, #4
 800ed40:	bf14      	ite	ne
 800ed42:	2500      	movne	r5, #0
 800ed44:	6833      	ldreq	r3, [r6, #0]
 800ed46:	f04f 0600 	mov.w	r6, #0
 800ed4a:	bf08      	it	eq
 800ed4c:	68e5      	ldreq	r5, [r4, #12]
 800ed4e:	f104 041a 	add.w	r4, r4, #26
 800ed52:	bf08      	it	eq
 800ed54:	1aed      	subeq	r5, r5, r3
 800ed56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ed5a:	bf08      	it	eq
 800ed5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed60:	4293      	cmp	r3, r2
 800ed62:	bfc4      	itt	gt
 800ed64:	1a9b      	subgt	r3, r3, r2
 800ed66:	18ed      	addgt	r5, r5, r3
 800ed68:	42b5      	cmp	r5, r6
 800ed6a:	d11a      	bne.n	800eda2 <_printf_common+0xd2>
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	e008      	b.n	800ed82 <_printf_common+0xb2>
 800ed70:	2301      	movs	r3, #1
 800ed72:	4652      	mov	r2, sl
 800ed74:	4641      	mov	r1, r8
 800ed76:	4638      	mov	r0, r7
 800ed78:	47c8      	blx	r9
 800ed7a:	3001      	adds	r0, #1
 800ed7c:	d103      	bne.n	800ed86 <_printf_common+0xb6>
 800ed7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed86:	3501      	adds	r5, #1
 800ed88:	e7c1      	b.n	800ed0e <_printf_common+0x3e>
 800ed8a:	2030      	movs	r0, #48	@ 0x30
 800ed8c:	18e1      	adds	r1, r4, r3
 800ed8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed98:	4422      	add	r2, r4
 800ed9a:	3302      	adds	r3, #2
 800ed9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eda0:	e7c2      	b.n	800ed28 <_printf_common+0x58>
 800eda2:	2301      	movs	r3, #1
 800eda4:	4622      	mov	r2, r4
 800eda6:	4641      	mov	r1, r8
 800eda8:	4638      	mov	r0, r7
 800edaa:	47c8      	blx	r9
 800edac:	3001      	adds	r0, #1
 800edae:	d0e6      	beq.n	800ed7e <_printf_common+0xae>
 800edb0:	3601      	adds	r6, #1
 800edb2:	e7d9      	b.n	800ed68 <_printf_common+0x98>

0800edb4 <_printf_i>:
 800edb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edb8:	7e0f      	ldrb	r7, [r1, #24]
 800edba:	4691      	mov	r9, r2
 800edbc:	2f78      	cmp	r7, #120	@ 0x78
 800edbe:	4680      	mov	r8, r0
 800edc0:	460c      	mov	r4, r1
 800edc2:	469a      	mov	sl, r3
 800edc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800edc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800edca:	d807      	bhi.n	800eddc <_printf_i+0x28>
 800edcc:	2f62      	cmp	r7, #98	@ 0x62
 800edce:	d80a      	bhi.n	800ede6 <_printf_i+0x32>
 800edd0:	2f00      	cmp	r7, #0
 800edd2:	f000 80d3 	beq.w	800ef7c <_printf_i+0x1c8>
 800edd6:	2f58      	cmp	r7, #88	@ 0x58
 800edd8:	f000 80ba 	beq.w	800ef50 <_printf_i+0x19c>
 800eddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ede0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ede4:	e03a      	b.n	800ee5c <_printf_i+0xa8>
 800ede6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800edea:	2b15      	cmp	r3, #21
 800edec:	d8f6      	bhi.n	800eddc <_printf_i+0x28>
 800edee:	a101      	add	r1, pc, #4	@ (adr r1, 800edf4 <_printf_i+0x40>)
 800edf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edf4:	0800ee4d 	.word	0x0800ee4d
 800edf8:	0800ee61 	.word	0x0800ee61
 800edfc:	0800eddd 	.word	0x0800eddd
 800ee00:	0800eddd 	.word	0x0800eddd
 800ee04:	0800eddd 	.word	0x0800eddd
 800ee08:	0800eddd 	.word	0x0800eddd
 800ee0c:	0800ee61 	.word	0x0800ee61
 800ee10:	0800eddd 	.word	0x0800eddd
 800ee14:	0800eddd 	.word	0x0800eddd
 800ee18:	0800eddd 	.word	0x0800eddd
 800ee1c:	0800eddd 	.word	0x0800eddd
 800ee20:	0800ef63 	.word	0x0800ef63
 800ee24:	0800ee8b 	.word	0x0800ee8b
 800ee28:	0800ef1d 	.word	0x0800ef1d
 800ee2c:	0800eddd 	.word	0x0800eddd
 800ee30:	0800eddd 	.word	0x0800eddd
 800ee34:	0800ef85 	.word	0x0800ef85
 800ee38:	0800eddd 	.word	0x0800eddd
 800ee3c:	0800ee8b 	.word	0x0800ee8b
 800ee40:	0800eddd 	.word	0x0800eddd
 800ee44:	0800eddd 	.word	0x0800eddd
 800ee48:	0800ef25 	.word	0x0800ef25
 800ee4c:	6833      	ldr	r3, [r6, #0]
 800ee4e:	1d1a      	adds	r2, r3, #4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	6032      	str	r2, [r6, #0]
 800ee54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e09e      	b.n	800ef9e <_printf_i+0x1ea>
 800ee60:	6833      	ldr	r3, [r6, #0]
 800ee62:	6820      	ldr	r0, [r4, #0]
 800ee64:	1d19      	adds	r1, r3, #4
 800ee66:	6031      	str	r1, [r6, #0]
 800ee68:	0606      	lsls	r6, r0, #24
 800ee6a:	d501      	bpl.n	800ee70 <_printf_i+0xbc>
 800ee6c:	681d      	ldr	r5, [r3, #0]
 800ee6e:	e003      	b.n	800ee78 <_printf_i+0xc4>
 800ee70:	0645      	lsls	r5, r0, #25
 800ee72:	d5fb      	bpl.n	800ee6c <_printf_i+0xb8>
 800ee74:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee78:	2d00      	cmp	r5, #0
 800ee7a:	da03      	bge.n	800ee84 <_printf_i+0xd0>
 800ee7c:	232d      	movs	r3, #45	@ 0x2d
 800ee7e:	426d      	negs	r5, r5
 800ee80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee84:	230a      	movs	r3, #10
 800ee86:	4859      	ldr	r0, [pc, #356]	@ (800efec <_printf_i+0x238>)
 800ee88:	e011      	b.n	800eeae <_printf_i+0xfa>
 800ee8a:	6821      	ldr	r1, [r4, #0]
 800ee8c:	6833      	ldr	r3, [r6, #0]
 800ee8e:	0608      	lsls	r0, r1, #24
 800ee90:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee94:	d402      	bmi.n	800ee9c <_printf_i+0xe8>
 800ee96:	0649      	lsls	r1, r1, #25
 800ee98:	bf48      	it	mi
 800ee9a:	b2ad      	uxthmi	r5, r5
 800ee9c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee9e:	6033      	str	r3, [r6, #0]
 800eea0:	bf14      	ite	ne
 800eea2:	230a      	movne	r3, #10
 800eea4:	2308      	moveq	r3, #8
 800eea6:	4851      	ldr	r0, [pc, #324]	@ (800efec <_printf_i+0x238>)
 800eea8:	2100      	movs	r1, #0
 800eeaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eeae:	6866      	ldr	r6, [r4, #4]
 800eeb0:	2e00      	cmp	r6, #0
 800eeb2:	bfa8      	it	ge
 800eeb4:	6821      	ldrge	r1, [r4, #0]
 800eeb6:	60a6      	str	r6, [r4, #8]
 800eeb8:	bfa4      	itt	ge
 800eeba:	f021 0104 	bicge.w	r1, r1, #4
 800eebe:	6021      	strge	r1, [r4, #0]
 800eec0:	b90d      	cbnz	r5, 800eec6 <_printf_i+0x112>
 800eec2:	2e00      	cmp	r6, #0
 800eec4:	d04b      	beq.n	800ef5e <_printf_i+0x1aa>
 800eec6:	4616      	mov	r6, r2
 800eec8:	fbb5 f1f3 	udiv	r1, r5, r3
 800eecc:	fb03 5711 	mls	r7, r3, r1, r5
 800eed0:	5dc7      	ldrb	r7, [r0, r7]
 800eed2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eed6:	462f      	mov	r7, r5
 800eed8:	42bb      	cmp	r3, r7
 800eeda:	460d      	mov	r5, r1
 800eedc:	d9f4      	bls.n	800eec8 <_printf_i+0x114>
 800eede:	2b08      	cmp	r3, #8
 800eee0:	d10b      	bne.n	800eefa <_printf_i+0x146>
 800eee2:	6823      	ldr	r3, [r4, #0]
 800eee4:	07df      	lsls	r7, r3, #31
 800eee6:	d508      	bpl.n	800eefa <_printf_i+0x146>
 800eee8:	6923      	ldr	r3, [r4, #16]
 800eeea:	6861      	ldr	r1, [r4, #4]
 800eeec:	4299      	cmp	r1, r3
 800eeee:	bfde      	ittt	le
 800eef0:	2330      	movle	r3, #48	@ 0x30
 800eef2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eef6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eefa:	1b92      	subs	r2, r2, r6
 800eefc:	6122      	str	r2, [r4, #16]
 800eefe:	464b      	mov	r3, r9
 800ef00:	4621      	mov	r1, r4
 800ef02:	4640      	mov	r0, r8
 800ef04:	f8cd a000 	str.w	sl, [sp]
 800ef08:	aa03      	add	r2, sp, #12
 800ef0a:	f7ff fee1 	bl	800ecd0 <_printf_common>
 800ef0e:	3001      	adds	r0, #1
 800ef10:	d14a      	bne.n	800efa8 <_printf_i+0x1f4>
 800ef12:	f04f 30ff 	mov.w	r0, #4294967295
 800ef16:	b004      	add	sp, #16
 800ef18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef1c:	6823      	ldr	r3, [r4, #0]
 800ef1e:	f043 0320 	orr.w	r3, r3, #32
 800ef22:	6023      	str	r3, [r4, #0]
 800ef24:	2778      	movs	r7, #120	@ 0x78
 800ef26:	4832      	ldr	r0, [pc, #200]	@ (800eff0 <_printf_i+0x23c>)
 800ef28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef2c:	6823      	ldr	r3, [r4, #0]
 800ef2e:	6831      	ldr	r1, [r6, #0]
 800ef30:	061f      	lsls	r7, r3, #24
 800ef32:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef36:	d402      	bmi.n	800ef3e <_printf_i+0x18a>
 800ef38:	065f      	lsls	r7, r3, #25
 800ef3a:	bf48      	it	mi
 800ef3c:	b2ad      	uxthmi	r5, r5
 800ef3e:	6031      	str	r1, [r6, #0]
 800ef40:	07d9      	lsls	r1, r3, #31
 800ef42:	bf44      	itt	mi
 800ef44:	f043 0320 	orrmi.w	r3, r3, #32
 800ef48:	6023      	strmi	r3, [r4, #0]
 800ef4a:	b11d      	cbz	r5, 800ef54 <_printf_i+0x1a0>
 800ef4c:	2310      	movs	r3, #16
 800ef4e:	e7ab      	b.n	800eea8 <_printf_i+0xf4>
 800ef50:	4826      	ldr	r0, [pc, #152]	@ (800efec <_printf_i+0x238>)
 800ef52:	e7e9      	b.n	800ef28 <_printf_i+0x174>
 800ef54:	6823      	ldr	r3, [r4, #0]
 800ef56:	f023 0320 	bic.w	r3, r3, #32
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	e7f6      	b.n	800ef4c <_printf_i+0x198>
 800ef5e:	4616      	mov	r6, r2
 800ef60:	e7bd      	b.n	800eede <_printf_i+0x12a>
 800ef62:	6833      	ldr	r3, [r6, #0]
 800ef64:	6825      	ldr	r5, [r4, #0]
 800ef66:	1d18      	adds	r0, r3, #4
 800ef68:	6961      	ldr	r1, [r4, #20]
 800ef6a:	6030      	str	r0, [r6, #0]
 800ef6c:	062e      	lsls	r6, r5, #24
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	d501      	bpl.n	800ef76 <_printf_i+0x1c2>
 800ef72:	6019      	str	r1, [r3, #0]
 800ef74:	e002      	b.n	800ef7c <_printf_i+0x1c8>
 800ef76:	0668      	lsls	r0, r5, #25
 800ef78:	d5fb      	bpl.n	800ef72 <_printf_i+0x1be>
 800ef7a:	8019      	strh	r1, [r3, #0]
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	4616      	mov	r6, r2
 800ef80:	6123      	str	r3, [r4, #16]
 800ef82:	e7bc      	b.n	800eefe <_printf_i+0x14a>
 800ef84:	6833      	ldr	r3, [r6, #0]
 800ef86:	2100      	movs	r1, #0
 800ef88:	1d1a      	adds	r2, r3, #4
 800ef8a:	6032      	str	r2, [r6, #0]
 800ef8c:	681e      	ldr	r6, [r3, #0]
 800ef8e:	6862      	ldr	r2, [r4, #4]
 800ef90:	4630      	mov	r0, r6
 800ef92:	f000 f859 	bl	800f048 <memchr>
 800ef96:	b108      	cbz	r0, 800ef9c <_printf_i+0x1e8>
 800ef98:	1b80      	subs	r0, r0, r6
 800ef9a:	6060      	str	r0, [r4, #4]
 800ef9c:	6863      	ldr	r3, [r4, #4]
 800ef9e:	6123      	str	r3, [r4, #16]
 800efa0:	2300      	movs	r3, #0
 800efa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efa6:	e7aa      	b.n	800eefe <_printf_i+0x14a>
 800efa8:	4632      	mov	r2, r6
 800efaa:	4649      	mov	r1, r9
 800efac:	4640      	mov	r0, r8
 800efae:	6923      	ldr	r3, [r4, #16]
 800efb0:	47d0      	blx	sl
 800efb2:	3001      	adds	r0, #1
 800efb4:	d0ad      	beq.n	800ef12 <_printf_i+0x15e>
 800efb6:	6823      	ldr	r3, [r4, #0]
 800efb8:	079b      	lsls	r3, r3, #30
 800efba:	d413      	bmi.n	800efe4 <_printf_i+0x230>
 800efbc:	68e0      	ldr	r0, [r4, #12]
 800efbe:	9b03      	ldr	r3, [sp, #12]
 800efc0:	4298      	cmp	r0, r3
 800efc2:	bfb8      	it	lt
 800efc4:	4618      	movlt	r0, r3
 800efc6:	e7a6      	b.n	800ef16 <_printf_i+0x162>
 800efc8:	2301      	movs	r3, #1
 800efca:	4632      	mov	r2, r6
 800efcc:	4649      	mov	r1, r9
 800efce:	4640      	mov	r0, r8
 800efd0:	47d0      	blx	sl
 800efd2:	3001      	adds	r0, #1
 800efd4:	d09d      	beq.n	800ef12 <_printf_i+0x15e>
 800efd6:	3501      	adds	r5, #1
 800efd8:	68e3      	ldr	r3, [r4, #12]
 800efda:	9903      	ldr	r1, [sp, #12]
 800efdc:	1a5b      	subs	r3, r3, r1
 800efde:	42ab      	cmp	r3, r5
 800efe0:	dcf2      	bgt.n	800efc8 <_printf_i+0x214>
 800efe2:	e7eb      	b.n	800efbc <_printf_i+0x208>
 800efe4:	2500      	movs	r5, #0
 800efe6:	f104 0619 	add.w	r6, r4, #25
 800efea:	e7f5      	b.n	800efd8 <_printf_i+0x224>
 800efec:	0800fa8d 	.word	0x0800fa8d
 800eff0:	0800fa9e 	.word	0x0800fa9e

0800eff4 <memmove>:
 800eff4:	4288      	cmp	r0, r1
 800eff6:	b510      	push	{r4, lr}
 800eff8:	eb01 0402 	add.w	r4, r1, r2
 800effc:	d902      	bls.n	800f004 <memmove+0x10>
 800effe:	4284      	cmp	r4, r0
 800f000:	4623      	mov	r3, r4
 800f002:	d807      	bhi.n	800f014 <memmove+0x20>
 800f004:	1e43      	subs	r3, r0, #1
 800f006:	42a1      	cmp	r1, r4
 800f008:	d008      	beq.n	800f01c <memmove+0x28>
 800f00a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f00e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f012:	e7f8      	b.n	800f006 <memmove+0x12>
 800f014:	4601      	mov	r1, r0
 800f016:	4402      	add	r2, r0
 800f018:	428a      	cmp	r2, r1
 800f01a:	d100      	bne.n	800f01e <memmove+0x2a>
 800f01c:	bd10      	pop	{r4, pc}
 800f01e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f026:	e7f7      	b.n	800f018 <memmove+0x24>

0800f028 <_sbrk_r>:
 800f028:	b538      	push	{r3, r4, r5, lr}
 800f02a:	2300      	movs	r3, #0
 800f02c:	4d05      	ldr	r5, [pc, #20]	@ (800f044 <_sbrk_r+0x1c>)
 800f02e:	4604      	mov	r4, r0
 800f030:	4608      	mov	r0, r1
 800f032:	602b      	str	r3, [r5, #0]
 800f034:	f7f1 ffc2 	bl	8000fbc <_sbrk>
 800f038:	1c43      	adds	r3, r0, #1
 800f03a:	d102      	bne.n	800f042 <_sbrk_r+0x1a>
 800f03c:	682b      	ldr	r3, [r5, #0]
 800f03e:	b103      	cbz	r3, 800f042 <_sbrk_r+0x1a>
 800f040:	6023      	str	r3, [r4, #0]
 800f042:	bd38      	pop	{r3, r4, r5, pc}
 800f044:	200018b4 	.word	0x200018b4

0800f048 <memchr>:
 800f048:	4603      	mov	r3, r0
 800f04a:	b510      	push	{r4, lr}
 800f04c:	b2c9      	uxtb	r1, r1
 800f04e:	4402      	add	r2, r0
 800f050:	4293      	cmp	r3, r2
 800f052:	4618      	mov	r0, r3
 800f054:	d101      	bne.n	800f05a <memchr+0x12>
 800f056:	2000      	movs	r0, #0
 800f058:	e003      	b.n	800f062 <memchr+0x1a>
 800f05a:	7804      	ldrb	r4, [r0, #0]
 800f05c:	3301      	adds	r3, #1
 800f05e:	428c      	cmp	r4, r1
 800f060:	d1f6      	bne.n	800f050 <memchr+0x8>
 800f062:	bd10      	pop	{r4, pc}

0800f064 <memcpy>:
 800f064:	440a      	add	r2, r1
 800f066:	4291      	cmp	r1, r2
 800f068:	f100 33ff 	add.w	r3, r0, #4294967295
 800f06c:	d100      	bne.n	800f070 <memcpy+0xc>
 800f06e:	4770      	bx	lr
 800f070:	b510      	push	{r4, lr}
 800f072:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f076:	4291      	cmp	r1, r2
 800f078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f07c:	d1f9      	bne.n	800f072 <memcpy+0xe>
 800f07e:	bd10      	pop	{r4, pc}

0800f080 <_realloc_r>:
 800f080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f084:	4680      	mov	r8, r0
 800f086:	4615      	mov	r5, r2
 800f088:	460c      	mov	r4, r1
 800f08a:	b921      	cbnz	r1, 800f096 <_realloc_r+0x16>
 800f08c:	4611      	mov	r1, r2
 800f08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f092:	f7ff bc39 	b.w	800e908 <_malloc_r>
 800f096:	b92a      	cbnz	r2, 800f0a4 <_realloc_r+0x24>
 800f098:	f7ff fbcc 	bl	800e834 <_free_r>
 800f09c:	2400      	movs	r4, #0
 800f09e:	4620      	mov	r0, r4
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	f000 f81a 	bl	800f0dc <_malloc_usable_size_r>
 800f0a8:	4285      	cmp	r5, r0
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	d802      	bhi.n	800f0b4 <_realloc_r+0x34>
 800f0ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0b2:	d8f4      	bhi.n	800f09e <_realloc_r+0x1e>
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	4640      	mov	r0, r8
 800f0b8:	f7ff fc26 	bl	800e908 <_malloc_r>
 800f0bc:	4607      	mov	r7, r0
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d0ec      	beq.n	800f09c <_realloc_r+0x1c>
 800f0c2:	42b5      	cmp	r5, r6
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	bf28      	it	cs
 800f0ca:	4632      	movcs	r2, r6
 800f0cc:	f7ff ffca 	bl	800f064 <memcpy>
 800f0d0:	4621      	mov	r1, r4
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	f7ff fbae 	bl	800e834 <_free_r>
 800f0d8:	463c      	mov	r4, r7
 800f0da:	e7e0      	b.n	800f09e <_realloc_r+0x1e>

0800f0dc <_malloc_usable_size_r>:
 800f0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0e0:	1f18      	subs	r0, r3, #4
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	bfbc      	itt	lt
 800f0e6:	580b      	ldrlt	r3, [r1, r0]
 800f0e8:	18c0      	addlt	r0, r0, r3
 800f0ea:	4770      	bx	lr

0800f0ec <_init>:
 800f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ee:	bf00      	nop
 800f0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0f2:	bc08      	pop	{r3}
 800f0f4:	469e      	mov	lr, r3
 800f0f6:	4770      	bx	lr

0800f0f8 <_fini>:
 800f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fa:	bf00      	nop
 800f0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0fe:	bc08      	pop	{r3}
 800f100:	469e      	mov	lr, r3
 800f102:	4770      	bx	lr
